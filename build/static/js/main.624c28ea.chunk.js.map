{"version":3,"sources":["config.js","assets/incedo.webp","library/constants/urlConstants.js","library/api/projectApi.js","library/api/userAPI.js","library/redux/slice/userSlice.js","library/menuconstants/configureGuide.js","library/menuconstants/CG_New.js","library/menuconstants/mainMenu.js","library/menuconstants/menuOptions.js","library/menuconstants/CG_EditStep.js","library/menuconstants/CG_AddStep.js","library/menuconstants/CG_DeleteGuide.js","library/menuconstants/setupRoles.js","library/menuconstants/guideVisibility.js","library/menuconstants/CG_ReorderStep.js","library/redux/slice/menuSlice.js","library/redux/slice/projectSlice.js","library/redux/store.js","library/menu/configureguide/addnewguides/ANG_2_DomSelect.js","library/menu/configureguide/addnewguides/ANG_3_AddDetails.js","library/menu/configureguide/addnewguides/ANG_4_Confirm.js","library/menu/configureguide/addnewguides/ANG_1_Start.js","library/menu/configureguide/AddNewGuide.js","library/menu/configureguide/addstepsexisting/ASEG_1_Start.js","library/menu/configureguide/addstepsexisting/ASEG_2_InsertionPoint.js","library/menu/configureguide/addstepsexisting/ASEG_4_DomSelect.js","library/menu/configureguide/addstepsexisting/ASEG_5_AddDetails.js","library/menu/configureguide/addstepsexisting/ASEG_3_Prompt.js","library/menu/configureguide/addstepsexisting/ASEG_6_Confirm.js","library/menu/configureguide/AddStepsExistingGuide.js","library/menu/configureguide/editstepsexisting/ESE_1_Start.js","library/menu/configureguide/editstepsexisting/ESE_2_EditDetails.js","library/menu/configureguide/editstepsexisting/ESE_3_ConfirmDetails.js","library/menu/configureguide/EditStepsExisting.js","library/menu/configureguide/reordersteps/RSE_1_Start.js","library/menu/configureguide/reordersteps/RSE_2_StepOrder.js","library/menu/configureguide/reordersteps/RSE_3_ConfirmDetails.js","library/menu/configureguide/ReorderStepsExisting.js","library/menu/configureguide/deleteguides/DG_1_Start.js","library/menu/configureguide/deleteguides/DG_2_Confirm.js","library/menu/configureguide/DeleteGuides.js","library/menu/ConfigureGuides.js","library/uicomponents/GuideItem.js","library/menu/setupRoles/SR_1_Start.js","library/menu/setupRoles/SR_2_Confirm.js","library/menu/SetupRoles.js","library/menu/guidevisibility/GV_1_Start.js","library/menu/guidevisibility/GV_2_Confirm.js","library/menu/GuideVisibility.js","library/Menu.js","library/helper/util.js","library/uicomponents/UserIdleModal.js","library/Core.js","library/IncedoGuide.js","components/ui-general/CommonTabs.js","components/ui-general/Footer.js","components/LeaveDashboard.js","components/ApplyLeave.js","components/RaiseCompOff.js","components/LeaveHistory.js","components/pages/HumanResources.js","App.js","index.js"],"names":["CONFIG","fullName","userId","projectName","environment","emailId","projectRoles","currentUserId","currentUserRoles","getBaseUrl","env","markGuideComplete","a","projectId","selectedGuideId","url","axios","post","guideId","response","status","data","Error","projectApi","addNewGuide","identifier","steps","title","roleVisibilityList","getAllGuides","updateGuide","guide","deleteGuides","guideIdsToDelete","guideIds","updateProjectRoles","updateGuideRoles","rolesInGuides","userApi","fetchUserDetails","toUpperCase","apiUpdateProjectRoles","createAsyncThunk","thunkAPI","apiFetchUserDetails","userSlice","createSlice","name","initialState","projectDetails","userDetails","userRole","reducers","extraReducers","pending","state","loading","fulfilled","payload","user","project","rejected","actions","setUserRole","CONFIGURE_GUIDE_MENU_OPTIONS","CG_OPTION_NEW","action","CG_OPTION_ADD_STEP","CG_OPTION_EDIT_STEP","CG_OPTION_REORDER_STEP","CG_OPTION_DELETE_GUIDE","CG_NEW_START","CG_NEW_DOM_SELECT","CG_NEW_ADD_DETAILS","CG_NEW_CONFIRM_STEP","MAIN_MENU_OPTIONS","ADMIN_USER","NORMAL_USER","MAIN_ADMIN","MENU_TOGGLE_OPEN","MENU_TOGGLE_CLOSE","MENU_OPTION_CONFIGURE_GUIDES","MENU_OPTION_SETUP_ROLES","MENU_OPTION_SETUP_VISIBILITY","CG_EDIT_STEP_START","CG_EDIT_STEP_EDIT_DETAILS","CG_EDIT_STEP_EDIT_CONFIRM","CG_ADD_STEP_START","CG_ADD_STEP_INSERTION_POINT","CG_ADD_STEP_PROMPT","CG_ADD_STEP_DOM_SELECT","CG_ADD_STEP_ADD_DETAILS","CG_ADD_STEP_CONFIRM_STEPS","CG_DELETE_GUIDE_START","CG_DELETE_GUIDE_CONFIRM","SR_SETUP_START","SR_SETUP_CONFIRM","GV_SETUP_START","GV_SETUP_CONFIRM","CG_REORDER_STEP_START","CG_REORDER_STEP_CHANGE_ORDER","CG_REORDER_STEP_CONFIRM","menuSlice","menuToggle","menuOption","configureGuidesOption","setupRolesOption","configureGuidesNewState","currentAction","guideTitle","currentDomTarget","oldGuide","configureGuidesAddStepsState","insertionIndex","configureGuidesEditStepsState","configureGuidesReorderStepsState","configureGuidesDeleteGuidesState","oldGuides","setupRolesState","oldRoles","newRoles","guideVisibilityState","actionMenuToggle","type","actionMenuOption","actionConfigureGuidesOption","actionConfigureGuidesNewCurrentAction","stepName","content","stepContent","target","disableBeacon","actionConfigureGuidesAddStepsCurrentAction","actionConfigureGuidesEditStepsCurrentAction","newGuide","actionConfigureGuidesReorderStepsCurrentAction","actionConfigureGuidesDeleteGuidesCurrentAction","actionSetupRolesCurrentAction","actionGuideVisibilityCurrentAction","apiMarkGuideComplete","apiUpdateGuideRoles","apiGetAllGuides","apiAddNewGuide","apiUpdateGuide","apiDeleteGuides","projectSlicer","currentEnvironment","guides","completedGuides","joyrideStart","joyrideSteps","joyrideCurrentIndex","userIdle","actionSetEnvironment","actionSetUserIdle","actionSetIdentifier","actionSetJoyrideSteps","selectedGuide","find","actionSetJoyrideStart","actionSetJoyrideIndex","newGuides","map","roleVisibility","store","configureStore","reducer","userReducer","menu","menuReducer","projectReducer","ANG_2_DomSelect","useSelector","dispatch","useDispatch","mouseEnterHandler","e","preventDefault","stopPropagation","classList","add","mouseLeaveHandler","remove","mouseClickHandler","targetElement","unique","currentTarget","selectorTypes","document","querySelectorAll","forEach","element","removeEventListener","useEffect","window","addEventListener","keyCode","className","ANG_3_AddDetails","roleVisibilityListInState","useState","setGuideTitle","setStepName","setStepContent","setRoleVisibilityList","allRolesWithoutAdminRole","Object","keys","filter","role","validity","setValidity","old","isValid","invalidMessage","toggle","isOpen","Fragment","for","id","placeholder","valid","invalid","onChange","value","check","inline","checked","roleVisibilityCheckboxChanged","color","onClick","every","key","titleAlreadyPresentInState","ANG_4_Confirm","length","index","tag","ANG_1_Start","icon","faCheck","AddNewGuide","ASEG_1_Start","setSelectedGuideId","console","log","persist","EEG_2_InsertionPoint","currentGuide","style","width","textAlign","outline","size","display","ASEG_4_DomSelect","ASEG_5_AddDetails","disabled","ASEG_3_Prompt","ASEG_6_Confirm","guideToUpdate","oldSteps","newGuideStepsAltered","splice","concat","AddStepsExistingGuide","ESE_1_Start","ESE_2_EditDetails","selectedStep","setSelectedStep","setNewGuide","titleValidity","setTitleValidity","newValidityState","step","stepTitle","newSteps","_","values","ESE_3_ConfirmDetails","oldTitle","newTitle","oldContent","newContent","bordered","EditStepsExisting","RSE_2_StepOrder","flexDirection","padding","flex","justifyContent","alignContent","stepFrom","stepTo","faArrowUp","faArrowDown","RSE_3_ConfirmDetails","alignItems","ReorderStepsExisting","DG_1_Start","setGuideIdsToDelete","newGuideIds","push","addGuideToDelete","DG_2_Confirm","generatedGuides","includes","DeleteGuides","ConfigureGuides","selectedOption","setSelectedOption","GuideItem","faPlayCircle","SR_1_Start","roleSelected","setRoleSelected","newUser","setNewUser","setNewRoles","roleKey","newUserUpdatedRoles","alreadyPresentUser","deleteUserHandler","SR_2_Confirm","SetupRoles","GV_1_Start","guideSelected","setGuideSelected","setRolesInGuides","mapRolesInGuides","newRolesInGuides","newRolesInGuidesAltered","checkboxChangedHandler","GV_2_Confirm","GuideVisibility","Menu","isUserAdmin","src","alt","height","minWidth","header","guideRoles","shouldGuideBeVisible","checkIfGuideShouldBeVisibleToUser","UserIdleModal","Core","currentStepIndex","setCurrentStepIndex","oldGuideStarted","localStorage","getItem","oldGuideStepIndex","JSON","parse","oldGuideId","setTimeout","useIdleTimer","timeout","onIdle","event","onActive","onAction","debounce","callback","setItem","stringify","EVENTS","TOOLTIP_CLOSE","STEP_AFTER","TARGET_NOT_FOUND","STATUS","FINISHED","SKIPPED","continuous","getHelpers","run","scrollToFirstStep","showProgress","showSkipButton","spotlightClicks","stepIndex","styles","options","zIndex","primaryColor","IncedoGuide","CommonTabs","to","Footer","LeaveDashboard","ApplyLeave","RaiseCompOff","LeaveHistory","HumanResources","fluid","App","expand","light","href","incedoImage","navbar","path","exact","component","ReactDOM","render","getElementById"],"mappings":"gMAWeA,G,MAXA,CACbC,SAAU,oBACVC,OAAQ,SACRC,YAAa,kBACbC,YAAa,QACbC,QAAS,kCACTC,aAAc,CAAC,aAAc,cAC7BC,cAAe,SACfC,iBAAkB,CAAC,gB,OCRN,MAA0B,oC,+CCA5BC,EAAa,WAAoB,IAAnBC,EAAkB,uDAAZ,QAC/B,OAAQA,GACN,IAAK,QAGL,QACE,MAAO,kC,iBCFAC,EAAiB,uCAAG,uCAAAC,EAAA,6DAC/BC,EAD+B,EAC/BA,UACAC,EAF+B,EAE/BA,gBACAZ,EAH+B,EAG/BA,OAH+B,IAI/BE,YAEMW,EANyB,UAMhBN,OANgB,MAIjB,QAJiB,0BAORO,IAAMC,KAAKF,EAAK,CACrCF,YACAK,QAASJ,EACTZ,WAV6B,UAYP,OALlBiB,EAPyB,QAYlBC,QAAsC,MAApBD,EAASC,OAZT,yCAatBD,EAASE,MAba,aAevB,IAAIC,MAAM,8BAfa,4CAAH,sDAsJfC,EATI,CACjBC,YA1HsB,uCAAG,mDAAAZ,EAAA,iEACzBC,iBADyB,MACb,GADa,MAEzBY,kBAFyB,MAEZ,IAFY,MAGzBC,aAHyB,MAGjB,GAHiB,EAIzBC,EAJyB,EAIzBA,MAJyB,IAKzBvB,mBALyB,MAKX,QALW,EAMzBwB,EANyB,EAMzBA,mBAEMb,EARmB,UAQVN,EAAWL,GARD,sBASFY,IAAMC,KAAKF,EAAK,CACrCF,YACAY,aACAC,QACAC,QACAC,uBAduB,UAgBD,OAPlBT,EATmB,QAgBZC,QAAsC,MAApBD,EAASC,OAhBf,yCAiBhBD,EAASE,MAjBO,aAmBjB,IAAIC,MAAM,2BAnBO,4CAAH,sDA2HtBO,aAnGuB,uCAAG,qCAAAjB,EAAA,6DAC1BC,EAD0B,EAC1BA,UACAY,EAF0B,EAE1BA,WAF0B,IAG1BrB,YAEMW,EALoB,UAKXN,OALW,MAGZ,QAHY,yBAMHO,IAAMC,KAAKF,EAAK,CACrCF,YACAY,eARwB,UAUF,OAJlBN,EANoB,QAUbC,QAAsC,MAApBD,EAASC,OAVd,yCAWjBD,EAASE,MAXQ,aAalB,IAAIC,MAAM,6BAbQ,4CAAH,sDAoGvBX,oBACAmB,YAnFsB,uCAAG,2CAAAlB,EAAA,6DACzBmB,EADyB,EACzBA,MADyB,IAEzBlB,iBAFyB,MAEb,GAFa,MAGzBY,kBAHyB,MAGZ,IAHY,MAIzBrB,YAEMW,EANmB,UAMVN,OANU,MAIX,QAJW,4BAOFO,IAAMC,KAAKF,EAAK,CACrCgB,QACAlB,YACAY,eAVuB,UAYD,OALlBN,EAPmB,QAYZC,QAAsC,MAApBD,EAASC,OAZf,yCAahBD,EAASE,MAbO,aAejB,IAAIC,MAAM,kCAfO,4CAAH,sDAoFtBU,aAhEuB,uCAAG,2CAAApB,EAAA,6DAC1BqB,EAD0B,EAC1BA,iBAD0B,IAE1BpB,iBAF0B,MAEd,GAFc,MAG1BY,kBAH0B,MAGb,IAHa,MAI1BrB,YAEMW,EANoB,UAMXN,OANW,MAIZ,QAJY,4BAOHO,IAAMC,KAAKF,EAAK,CACrCmB,SAAUD,EACVpB,YACAY,eAVwB,UAYF,OALlBN,EAPoB,QAYbC,QAAsC,MAApBD,EAASC,OAZd,yCAajBD,EAASE,MAbQ,aAelB,IAAIC,MAAM,kCAfQ,4CAAH,sDAiEvBa,mBA7C6B,uCAAG,yCAAAvB,EAAA,6DAChCV,EADgC,EAChCA,OADgC,IAEhCW,iBAFgC,MAEpB,GAFoB,EAGhCP,EAHgC,EAGhCA,aAHgC,IAIhCF,YAEMW,EAN0B,UAMjBN,OANiB,MAIlB,QAJkB,mCAOTO,IAAMC,KAAKF,EAAK,CACrCb,SACAW,YACAP,iBAV8B,UAYR,OALlBa,EAP0B,QAYnBC,QAAsC,MAApBD,EAASC,OAZR,yCAavBD,EAASE,MAbc,aAexB,IAAIC,MAAM,iCAfc,4CAAH,sDA8C7Bc,iBA1B2B,uCAAG,uCAAAxB,EAAA,6DAC9BC,EAD8B,EAC9BA,UACAY,EAF8B,EAE9BA,WACAY,EAH8B,EAG9BA,cAH8B,IAI9BjC,YAEMW,EANwB,UAMfN,OANe,MAIhB,QAJgB,iCAOPO,IAAMC,KAAKF,EAAK,CACrCF,YACAY,aACAY,kBAV4B,UAYN,OALlBlB,EAPwB,QAYjBC,QAAsC,MAApBD,EAASC,OAZV,yCAarBD,EAASE,MAbY,aAetB,IAAIC,MAAM,+BAfY,4CAAH,uDC9FdgB,EADC,CAAEC,iBA3BW,uCAAG,+CAAA3B,EAAA,6DAC9BV,EAD8B,EAC9BA,OACAG,EAF8B,EAE9BA,QACAJ,EAH8B,EAG9BA,SACAE,EAJ8B,EAI9BA,YACAC,EAL8B,EAK9BA,YACAE,EAN8B,EAM9BA,aACAC,EAP8B,EAO9BA,cACAC,EAR8B,EAQ9BA,iBAEMO,EAVwB,UAUfN,EAAWL,GAVI,sBAWPY,IAAMC,KAAKF,EAAK,CACrCb,SACAG,UACAJ,WACAE,YAAaA,EAAYqC,cACzBlC,eACAC,gBACAC,qBAlB4B,UAoBN,OATlBW,EAXwB,QAoBjBC,QAAsC,MAApBD,EAASC,OApBV,oEAqBhBD,EAASE,MArBO,IAqBDd,gBAAeC,sBArBd,aAuBtB,IAAIc,MAAM,yBAvBY,4CAAH,uDCAhBmB,EAAwBC,YACnC,6BADmD,uCAEnD,aAAyDC,GAAzD,uBAAA/B,EAAA,6DAASC,EAAT,EAASA,UAAWX,EAApB,EAAoBA,OAAQE,EAA5B,EAA4BA,YAAaE,EAAzC,EAAyCA,aACjCa,EAAWI,EAAWY,mBAAmB,CAC7CtB,YACAX,SACAI,eACAF,gBALJ,kBAOSe,GAPT,2CAFmD,yDAaxCyB,EAAsBF,YACjC,yBADiD,uCAEjD,aAWEC,GAXF,+BAAA/B,EAAA,6DAEIV,EAFJ,EAEIA,OACAG,EAHJ,EAGIA,QACAJ,EAJJ,EAIIA,SACAE,EALJ,EAKIA,YACAC,EANJ,EAMIA,YACAE,EAPJ,EAOIA,aACAC,EARJ,EAQIA,cACAC,EATJ,EASIA,iBAIIW,EAAWmB,EAAQC,iBAAiB,CACxCrC,SACAG,UACAJ,WACAE,cACAC,cACAE,eACAC,gBACAC,qBArBJ,kBAuBSW,GAvBT,2CAFiD,yDA2CtC0B,EAAYC,YAAY,CACnCC,KAAM,OACNC,aAhBmB,CACnBC,eAAgB,CACdpC,UAAW,GACXX,OAAQ,GACRG,QAAS,GACTJ,SAAU,IAEZiD,YAAa,CACXhD,OAAQ,GACRW,UAAW,GACXV,YAAa,GACbgD,SAAU,KAMZC,SAAU,GACVC,eAAa,mBACVT,EAAoBU,SAAU,SAACC,GAC9BA,EAAMC,SAAU,KAFP,cAIVZ,EAAoBa,WAAY,SAACF,EAAD,GAAyB,IAAfG,EAAc,EAAdA,QACzCH,EAAML,YAAN,2BACKQ,EAAQC,MADb,IAEEpD,cAAemD,EAAQnD,cACvBC,iBAAkBkD,EAAQlD,mBAE5B+C,EAAMN,eAAiBS,EAAQE,QAC/BL,EAAMC,SAAU,KAXP,cAaVZ,EAAoBiB,UAAW,SAACN,GAC/BA,EAAMC,SAAU,KAdP,cAgBVf,EAAsBa,SAAU,SAACC,GAChCA,EAAMC,SAAU,KAjBP,cAmBVf,EAAsBgB,WAAY,SAACF,EAAD,GAAyB,IAAfG,EAAc,EAAdA,QAC3CH,EAAMN,eAAe3C,aAAeoD,EAAQE,QAAQtD,aACpDiD,EAAMC,SAAU,KArBP,cAuBVf,EAAsBoB,UAAW,SAACN,GACjCA,EAAMC,SAAU,KAxBP,KAgCAX,GAFgBA,EAAUiB,QAA1BC,YAEAlB,EAAf,S,QChGamB,EAA+B,CAC1CC,cAAe,CACbtC,MAAO,gBACPuC,OAAQ,iBAEVC,mBAAoB,CAClBxC,MAAO,8BACPuC,OAAQ,sBAEVE,oBAAqB,CACnBzC,MAAO,+BACPuC,OAAQ,uBAEVG,uBAAwB,CACtB1C,MAAO,kCACPuC,OAAQ,0BAEVI,uBAAwB,CACtB3C,MAAO,gBACPuC,OAAQ,2BAKCD,EAAgB,gBAChBE,EAAqB,qBACrBC,EAAsB,sBACtBC,EAAyB,yBACzBC,EAAyB,yBC5BzBC,EAAe,eACfC,EAAoB,oBACpBC,EAAqB,qBACrBC,EAAsB,sBCHtBC,EAAoB,CAC/BC,WAAY,CACV,CACEjD,MAAO,eACPuC,OAAQ,gCAEV,CACEvC,MAAO,cACPuC,OAAQ,2BAEV,CACEvC,MAAO,mBACPuC,OAAQ,iCAGZW,YAAa,CACX,CACElD,MAAO,mBACPuC,OAAQ,kCAUDY,EAAa,aAGbC,EAAmB,mBACnBC,EAAoB,oBC/BpBC,EAA+B,+BAC/BC,EAA0B,0BAC1BC,EAA+B,+BCH/BC,EAAqB,qBACrBC,EAA4B,4BAC5BC,EAA4B,4BCF5BC,EAAoB,oBACpBC,EAA8B,8BAC9BC,EAAqB,qBACrBC,GAAyB,yBACzBC,GAA0B,0BAC1BC,GAA4B,4BCL5BC,GAAwB,wBACxBC,GAA0B,0BCD1BC,GAAiB,iBACjBC,GAAmB,mBCDnBC,GAAiB,iBACjBC,GAAmB,mBCDnBC,GAAwB,wBACxBC,GAA+B,+BAC/BC,GAA0B,0BCwG1BC,GAAYxD,YAAY,CACnCC,KAAM,OACNC,aAtDmB,CACnBuD,WAAY,GACZC,WAAY,GACZC,sBAAuB,GACvBC,iBAAkB,GAClBC,wBAAyB,CACvBC,cAAe,GACflF,MAAO,GACPmF,WAAY,GACZC,iBAAkB,GAClBC,SAAU,GACVnF,mBAAoB,IAEtBoF,6BAA8B,CAC5BJ,cAAe,GACflF,MAAO,GACPmF,WAAY,GACZC,iBAAkB,GAClBhG,gBAAiB,GACjBmG,eAAgB,GAChBF,SAAU,GACVnF,mBAAoB,IAEtBsF,8BAA+B,CAC7BN,cAAe,GACflF,MAAO,GACPmF,WAAY,GACZ/F,gBAAiB,GACjBiG,SAAU,IAEZI,iCAAkC,CAChCP,cAAe,GACflF,MAAO,GACPmF,WAAY,GACZ/F,gBAAiB,GACjBiG,SAAU,IAEZK,iCAAkC,CAChCR,cAAe,GACfS,UAAW,GACXpF,iBAAkB,IAEpBqF,gBAAiB,CACfV,cAAe,GACfW,SAAU,GACVC,SAAU,IAEZC,qBAAsB,CACpBb,cAAe,GACfvE,cAAe,KAMjBe,SAAU,CACRsE,iBAAkB,SAACnE,EAAD,GAA8B,EAApBoE,KAC1B,OAD8C,EAAdjE,SAE9B,IAAK,GACHH,EAAMgD,WAAa,GACnB,MACF,KAAKxB,EACHxB,EAAMgD,WAAaxB,EACnB,MACF,KAAKC,EACHzB,EAAMgD,WAAavB,IAMzB4C,iBAAkB,SAACrE,EAAD,GAChB,OADwC,EAAdG,SAExB,IAAK,GACHH,EAAMiD,WAAa,GACnB,MACF,KAAKvB,EACH1B,EAAMiD,WAAavB,EACnB,MACF,KAAKC,EACH3B,EAAMiD,WAAatB,EACnB3B,EAAM+D,gBAAgBV,cAAgBb,GACtC,MACF,KAAKZ,EACH5B,EAAMiD,WAAarB,EACnB5B,EAAMkE,qBAAqBb,cAAgBX,KAOjD4B,4BAA6B,SAACtE,EAAD,GAA2C,IAAD,IAAhCG,QAAWQ,EAAqB,EAArBA,OAAqB,EAAb7C,KACxD,OAAQ6C,GACN,IAAK,GACHX,EAAMkD,sBAAwB,GAC9B,MACF,KAAKxC,EACHV,EAAMkD,sBAAwBxC,EAC9BV,EAAMoD,wBAAwBC,cAAgBrC,EAC9C,MACF,KAAKJ,EACHZ,EAAMkD,sBAAwBtC,EAC9BZ,EAAMyD,6BAA6BJ,cAAgBrB,EACnD,MACF,KAAKnB,EACHb,EAAMkD,sBAAwBrC,EAC9Bb,EAAM2D,8BAA8BN,cAClCxB,EACF,MACF,KAAKf,EACHd,EAAMkD,sBAAwBpC,EAC9Bd,EAAM4D,iCAAiCP,cACrCT,GACF,MACF,KAAK7B,EACHf,EAAMkD,sBAAwBnC,EAC9Bf,EAAM6D,iCAAiCR,cACrCf,KAORiC,sCAAuC,SACrCvE,EADqC,GAGjC,IAAD,IADDG,QAAWQ,EACV,EADUA,OAAQ7C,EAClB,EADkBA,KAErB,OAAQ6C,GACN,IAAK,GACHX,EAAMoD,wBAAwBC,cAAgB,GAC9CrD,EAAMoD,wBAAwBE,WAAa,GAC3CtD,EAAMoD,wBAAwBG,iBAAmB,GACjDvD,EAAMoD,wBAAwBjF,MAAQ,GACtC6B,EAAMoD,wBAAwB/E,mBAAqB,GACnD,MACF,KAAK2C,EACHhB,EAAMoD,wBAAwBC,cAAgBrC,EAC9C,MACF,KAAKC,EACHjB,EAAMoD,wBAAwBC,cAAgBpC,EAC9C,MACF,KAAKC,EACHlB,EAAMoD,wBAAwBC,cAAgBnC,EAC9ClB,EAAMoD,wBAAwBG,iBAAmBzF,EACjD,MACF,KAAKqD,EACHnB,EAAMoD,wBAAwBC,cAAgBlC,EAC9CnB,EAAMoD,wBAAwB/E,mBAC5BP,EAAKO,mBAEP2B,EAAMoD,wBAAwBE,WAAaxF,EAAKwF,WAChDtD,EAAMoD,wBAAwBjF,MAA9B,sBACK6B,EAAMoD,wBAAwBjF,OADnC,CAEE,CACEC,MAAON,EAAK0G,SACZC,QAAS3G,EAAK4G,YACdC,OAAQ3E,EAAMoD,wBAAwBG,iBACtCqB,eAAe,OASzBC,2CAA4C,SAC1C7E,EAD0C,GAGtC,IAAD,IADDG,QAAWQ,EACV,EADUA,OAAQ7C,EAClB,EADkBA,KAErB,OAAQ6C,GACN,IAAK,GACHX,EAAMyD,6BAA6BJ,cAAgB,GACnDrD,EAAMyD,6BAA6BH,WAAa,GAChDtD,EAAMyD,6BAA6BF,iBAAmB,GACtDvD,EAAMyD,6BAA6BtF,MAAQ,GAC3C,MACF,KAAK6D,EACHhC,EAAMyD,6BAA6BJ,cAAgBrB,EAEnD,MACF,KAAKC,EACHjC,EAAMyD,6BAA6BJ,cACjCpB,EACFjC,EAAMyD,6BAA6BD,SAAW1F,EAAK0F,SACnDxD,EAAMyD,6BAA6BlG,gBAAkBO,EAAKH,QAC1D,MACF,KAAKuE,EACHlC,EAAMyD,6BAA6BJ,cAAgBnB,EACnDlC,EAAMyD,6BAA6BC,eACjC5F,EAAK4F,eACP1D,EAAMyD,6BAA6BH,WAAaxF,EAAKM,MACrD,MAEF,KAAK+D,GACHnC,EAAMyD,6BAA6BJ,cACjClB,GACF,MAEF,KAAKC,GACHpC,EAAMyD,6BAA6BJ,cACjCjB,GACFpC,EAAMyD,6BAA6BF,iBACjCzF,EAAKyF,iBACP,MACF,KAAKlB,GACHrC,EAAMyD,6BAA6BJ,cACjChB,GACFrC,EAAMyD,6BAA6BtF,MAAnC,sBACK6B,EAAMyD,6BAA6BtF,OADxC,CAEE,CACEC,MAAON,EAAK0G,SACZC,QAAS3G,EAAK4G,YACdC,OAAQ3E,EAAMyD,6BAA6BF,iBAC3CqB,eAAe,OAUzBE,4CAA6C,SAC3C9E,EAD2C,GAGvC,IAAD,IADDG,QAAWQ,EACV,EADUA,OAAQ7C,EAClB,EADkBA,KAErB,OAAQ6C,GACN,IAAK,GACHX,EAAM2D,8BAA8BN,cAAgB,GACpDrD,EAAM2D,8BAA8BL,WAAa,GACjDtD,EAAM2D,8BAA8BJ,iBAAmB,GACvDvD,EAAM2D,8BAA8BxF,MAAQ,GAC5C,MACF,KAAK0D,EACH7B,EAAM2D,8BAA8BN,cAClCxB,EACF,MAEF,KAAKC,EACH9B,EAAM2D,8BAA8BN,cAClCvB,EACF9B,EAAM2D,8BAA8BpG,gBAAkBO,EAAKH,QAC3DqC,EAAM2D,8BAA8BH,SAAW1F,EAAK0F,SACpD,MACF,KAAKzB,EACH/B,EAAM2D,8BAA8BN,cAClCtB,EACF/B,EAAM2D,8BAA8BoB,SAAWjH,EAAKiH,WAQ1DC,+CAAgD,SAC9ChF,EAD8C,GAG1C,IAAD,IADDG,QAAWQ,EACV,EADUA,OAAQ7C,EAClB,EADkBA,KAErB,OAAQ6C,GACN,IAAK,GACHX,EAAM4D,iCAAiCP,cAAgB,GACvDrD,EAAM4D,iCAAiCN,WAAa,GACpDtD,EAAM4D,iCAAiCL,iBAAmB,GAC1DvD,EAAM4D,iCAAiCzF,MAAQ,GAC/C,MACF,KAAKyE,GACH5C,EAAM4D,iCAAiCP,cACrCT,GACF,MACF,KAAKC,GACH7C,EAAM4D,iCAAiCP,cACrCR,GACF7C,EAAM4D,iCAAiCjG,QAAUG,EAAKH,QACtDqC,EAAM4D,iCAAiCJ,SAAW1F,EAAK0F,SACvD,MACF,KAAKV,GACH9C,EAAM4D,iCAAiCP,cACrCP,GACF9C,EAAM4D,iCAAiCmB,SAAWjH,EAAKiH,WAQ7DE,+CAAgD,SAC9CjF,EAD8C,GAG1C,IAAD,IADDG,QAAWQ,EACV,EADUA,OAAQ7C,EAClB,EADkBA,KAErB,OAAQ6C,GACN,IAAK,GACHX,EAAM6D,iCAAiCR,cAAgB,GACvDrD,EAAM6D,iCAAiCP,WAAa,GACpDtD,EAAM6D,iCAAiCN,iBAAmB,GAC1DvD,EAAM6D,iCAAiC1F,MAAQ,GAC/C,MACF,KAAKmE,GACHtC,EAAM6D,iCAAiCR,cACrCf,GACF,MACF,KAAKC,GACHvC,EAAM6D,iCAAiCR,cACrCd,GACFvC,EAAM6D,iCAAiCnF,iBACrCZ,EAAKY,mBAObwG,8BAA+B,SAAClF,EAAD,GAA2C,IAAD,IAAhCG,QAAWQ,EAAqB,EAArBA,OAAQ7C,EAAa,EAAbA,KAC1D,OAAQ6C,GACN,IAAK,GACHX,EAAM+D,gBAAgBV,cAAgB,GACtCrD,EAAM+D,gBAAgBC,SAAW,GACjChE,EAAM+D,gBAAgBE,SAAW,GACjC,MACF,KAAKzB,GACHxC,EAAM+D,gBAAgBV,cAAgBb,GACtC,MACF,KAAKC,GACHzC,EAAM+D,gBAAgBV,cAAgBZ,GACtCzC,EAAM+D,gBAAgBC,SAAWlG,EAAKkG,SACtChE,EAAM+D,gBAAgBE,SAAWnG,EAAKmG,WAO5CkB,mCAAoC,SAClCnF,EADkC,GAG9B,IAAD,IADDG,QAAWQ,EACV,EADUA,OAAQ7C,EAClB,EADkBA,KAErB,OAAQ6C,GACN,IAAK,GACHX,EAAMkE,qBAAqBb,cAAgB,GAC3C,MACF,KAAKX,GACH1C,EAAMkE,qBAAqBb,cAAgBX,GAC3C,MACF,KAAKC,GACH3C,EAAMkE,qBAAqBb,cAAgBV,GAC3C3C,EAAMkE,qBAAqBpF,cAAgBhB,EAAKgB,iBAOxDgB,cAAe,K,GAebiD,GAAUxC,QAVZ4D,G,GAAAA,iBACAE,G,GAAAA,iBACAC,G,GAAAA,4BACAC,G,GAAAA,sCACAM,G,GAAAA,2CACAC,G,GAAAA,4CACAE,G,GAAAA,+CACAC,G,GAAAA,+CACAC,G,GAAAA,8BACAC,G,GAAAA,mCAGapC,MAAf,QCzaaqC,GAAuBjG,YAClC,4BADkD,uCAElD,aAA4DC,GAA5D,uBAAA/B,EAAA,6DAASC,EAAT,EAASA,UAAWX,EAApB,EAAoBA,OAAQY,EAA5B,EAA4BA,gBAAiBV,EAA7C,EAA6CA,YACrCe,EAAWI,EAAWZ,kBAAkB,CAC5CE,YACAX,SACAY,kBACAV,gBALJ,kBAOSe,GAPT,2CAFkD,yDAavCyH,GAAsBlG,YACjC,2BADiD,uCAEjD,aAA8DC,GAA9D,uBAAA/B,EAAA,6DAASC,EAAT,EAASA,UAAWY,EAApB,EAAoBA,WAAYrB,EAAhC,EAAgCA,YAAaiC,EAA7C,EAA6CA,cACrClB,EAAWI,EAAWa,iBAAiB,CAC3CvB,YACAY,aACArB,cACAiC,kBALJ,kBAOSlB,GAPT,2CAFiD,yDAatC0H,GAAkBnG,YAC7B,uBAD6C,uCAE7C,aAA+CC,GAA/C,qBAAA/B,EAAA,6DAASC,EAAT,EAASA,UAAWY,EAApB,EAAoBA,WAAYrB,EAAhC,EAAgCA,YACxBe,EAAWI,EAAWM,aAAa,CACvChB,YACAY,aACArB,gBAJJ,kBAMSe,GANT,2CAF6C,yDAYlC2H,GAAiBpG,YAC5B,sBAD4C,uCAE5C,aAEEC,GAFF,2BAAA/B,EAAA,6DACIC,EADJ,EACIA,UAAWY,EADf,EACeA,WAAYC,EAD3B,EAC2BA,MAAOC,EADlC,EACkCA,MAAOvB,EADzC,EACyCA,YAAawB,EADtD,EACsDA,mBAG9CT,EAAWI,EAAWC,YAAY,CACtCX,YACAY,aACAC,QACAC,QACAvB,cACAwB,uBAVJ,kBAYST,GAZT,2CAF4C,yDAkBjC4H,GAAiBrG,YAC5B,sBAD4C,uCAE5C,aAA+BC,GAA/B,mBAAA/B,EAAA,6DAASmB,EAAT,EAASA,MAAO3B,EAAhB,EAAgBA,YACRe,EAAWI,EAAWO,YAAY,CACtCC,QACA3B,gBAHJ,kBAKSe,GALT,2CAF4C,yDAWjC6H,GAAkBtG,YAC7B,uBAD6C,uCAE7C,aAAqDC,GAArD,qBAAA/B,EAAA,6DAASqB,EAAT,EAASA,iBAAkBpB,EAA3B,EAA2BA,UAAWT,EAAtC,EAAsCA,YAC9Be,EAAWI,EAAWS,aAAa,CACvCC,mBACApB,YACAT,gBAJJ,kBAMSe,GANT,2CAF6C,yDAyBlC8H,GAAgBnG,YAAY,CACvCC,KAAM,UACNC,aAfmB,CACnBkG,mBAAoB,QACpBzH,WAAY,GACZ0H,OAAQ,GACRC,gBAAiB,GACjBtI,gBAAiB,GACjBuI,cAAc,EACdC,aAAc,GACdC,oBAAqB,EACrB/F,SAAS,EACTlD,aAAc,GACdkJ,UAAU,GAKVpG,SAAU,CACRqG,qBAAsB,SAAClG,EAAD,GAAyB,IAAfG,EAAc,EAAdA,QAC9BH,EAAM2F,mBAAqBxF,GAE7BgG,kBAAmB,SAACnG,EAAD,GAAyB,IAAfG,EAAc,EAAdA,QAC3BH,EAAMiG,SAAW9F,GAEnBiG,oBAAqB,SAACpG,EAAD,GAAyB,IAAfG,EAAc,EAAdA,QAC7BH,EAAM9B,WAAaiC,GAErBkG,sBAAuB,SAACrG,EAAD,GAAyB,IAAfG,EAAc,EAAdA,QAC/BH,EAAMzC,gBAAkB4C,EACxB,IAAMmG,EAAgBtG,EAAM4F,OAAOW,MACjC,SAAC/H,GAAD,OAAWA,EAAMb,UAAYwC,KAK7BH,EAAM+F,aAHHO,EAGkBA,EAAcnI,MAFd,IAKzBqI,sBAAuB,SAACxG,EAAD,GAAyB,IAAfG,EAAc,EAAdA,QAC/BH,EAAM8F,aAAe3F,GAEvBsG,sBAAuB,SAACzG,EAAD,GAAyB,IAAfG,EAAc,EAAdA,QAC/BH,EAAMgG,oBAAsB7F,IAGhCL,eAAa,mBACVyF,GAAexF,SAAU,SAACC,GACzBA,EAAMC,SAAU,KAFP,cAIVsF,GAAerF,WAAY,SAACF,EAAD,GAAyB,IAAfG,EAAc,EAAdA,QACpCH,EAAM4F,OAASzF,EAAQyF,OACvB5F,EAAMC,SAAU,KANP,cAQVsF,GAAejF,UAAW,SAACN,GAC1BA,EAAMC,SAAU,KATP,cAWVqF,GAAgBvF,SAAU,SAACC,GAC1BA,EAAMC,SAAU,KAZP,cAcVqF,GAAgBpF,WAAY,SAACF,EAAD,GAAyB,IAAfG,EAAc,EAAdA,QACrCH,EAAM4F,OAASzF,EAAQyF,OACvB5F,EAAMC,SAAU,KAhBP,cAkBVqF,GAAgBhF,UAAW,SAACN,GAC3BA,EAAMC,SAAU,KAnBP,cAqBVmF,GAAqBrF,SAAU,SAACC,GAC/BA,EAAMC,SAAU,KAtBP,cAwBVmF,GAAqBlF,WAAY,SAACF,EAAD,GAAyB,IAAfG,EAAc,EAAdA,QAC1CH,EAAM6F,gBAAkB1F,EAAQ0F,gBAChC7F,EAAMC,SAAU,KA1BP,cA4BVmF,GAAqB9E,UAAW,SAACN,GAChCA,EAAMC,SAAU,KA7BP,cA+BVuF,GAAezF,SAAU,SAACC,GACzBA,EAAMC,SAAU,KAhCP,cAkCVuF,GAAetF,WAAY,SAACF,EAAD,GAAyB,IAAfG,EAAc,EAAdA,QACpCH,EAAM4F,OAASzF,EAAQyF,OACvB5F,EAAMC,SAAU,KApCP,cAsCVuF,GAAelF,UAAW,SAACN,GAC1BA,EAAMC,SAAU,KAvCP,cAyCVwF,GAAgB1F,SAAU,SAACC,GAC1BA,EAAMC,SAAU,KA1CP,cA4CVwF,GAAgBvF,WAAY,SAACF,EAAD,GAAyB,IAAfG,EAAc,EAAdA,QACrCH,EAAM4F,OAASzF,EAAQyF,OACvB5F,EAAMC,SAAU,KA9CP,cAgDVwF,GAAgBnF,UAAW,SAACN,GAC3BA,EAAMC,SAAU,KAjDP,cAmDVoF,GAAoBtF,SAAU,SAACC,GAC9BA,EAAMC,SAAU,KApDP,cAsDVoF,GAAoBnF,WAAY,SAACF,EAAD,GAAyB,IAClDlB,EADiD,EAAdqB,QACXrB,cAC1B4H,EAAS,YAAO1G,EAAM4F,QAC1Bc,EAAY1G,EAAM4F,OAAOe,KAAI,SAACnI,GAC5B,IAAIuG,EAAQ,eAAQvG,GAEpB,OADAuG,EAAS6B,eAAiB9H,EAAcN,EAAMb,SACvCoH,KAET/E,EAAM4F,OAASc,EACf1G,EAAMC,SAAU,KA/DP,cAiEVoF,GAAoB/E,UAAW,SAACN,GAC/BA,EAAMC,SAAU,KAlEP,K,GA8EXyF,GAAcnF,QALhB2F,G,GAAAA,qBACAE,G,GAAAA,oBACAC,G,GAAAA,sBACAG,G,GAAAA,sBACAL,G,GAAAA,kBAGaT,MAAf,QCzMamB,GAAQC,YAAe,CAClCC,QAAS,CACP3G,KAAM4G,EACNC,KAAMC,GACN7G,QAAS8G,M,4CCAE,SAASC,KACtB,IAAMH,EAAOI,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QACpCK,EAAWC,eACTnE,EAA4B6D,EAA5B7D,wBAGFoE,GAFqCpE,EAAnCE,WAAmCF,EAAvB/E,mBAEM,SAACoJ,GACzBA,EAAEC,iBACFD,EAAEE,kBACSF,EAAE9C,OACViD,UAAUC,IAAI,2BAEbC,EAAoB,SAACL,GACzBA,EAAEC,iBACFD,EAAEE,kBACSF,EAAE9C,OACViD,UAAUG,OAAO,0BAEhBC,EAAoB,SAApBA,EAAqBP,GACzBA,EAAEC,iBACFD,EAAEE,kBACF,IAAMM,EAAgBC,KAAOT,EAAEU,cAAe,CAC5CC,cAAe,CAAC,KAAM,MAAO,cAEXC,SAASC,iBAAiB,KAElCC,SAAQ,SAACC,GACnBA,EAAQC,oBAAoB,aAAcjB,GAAmB,GAC7DgB,EAAQC,oBAAoB,aAAcX,GAAmB,GAC7DU,EAAQC,oBAAoB,QAAST,GAAmB,GACxDQ,EAAQZ,UAAUG,OAAO,4BAE3BT,EACE/C,GAAsC,CACpC5D,OAAQO,EACRpD,KAAMmK,MAsCZ,OAjCAS,qBAAU,WACc,qBAAXC,SACWN,SAASC,iBAAiB,KAElCC,SAAQ,SAACC,GACnBA,EAAQI,iBAAiB,aAAcpB,GAAmB,GAC1DgB,EAAQI,iBAAiB,aAAcd,GAAmB,GAC1DU,EAAQI,iBAAiB,QAASZ,GAAmB,MAGvDK,SAASO,iBAAiB,WAAW,SAAUnB,GAC3B,KAAdA,EAAEoB,UACgBR,SAASC,iBAAiB,KAElCC,SAAQ,SAACC,GACnBA,EAAQC,oBAAoB,aAAcjB,GAAmB,GAC7DgB,EAAQC,oBAAoB,aAAcX,GAAmB,GAC7DU,EAAQC,oBAAoB,QAAST,GAAmB,GACxDQ,EAAQZ,UAAUG,OAAO,4BAG3BT,EACE/C,GAAsC,CACpC5D,OAAQK,YAQjB,IAGD,qCACE,sBAAK8H,UAAU,2BAAf,mCC3DS,SAASC,KAAoB,IAAD,kBACnC9B,EAAOI,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QAGlClK,EAFKsK,cAAY,SAACrH,GAAD,OAAWA,EAAMI,QAClCV,eACA3C,aACAqG,EAA4B6D,EAA5B7D,wBACoB4F,EAC1B5F,EADM/E,mBAEFiJ,EAAWC,eARwB,EASL0B,mBAClC7F,EAAwBE,YAAc,IAVC,oBASlCA,EATkC,KAStB4F,EATsB,OAYTD,mBAAS,IAZA,oBAYlCzE,EAZkC,KAYxB2E,EAZwB,OAaHF,mBAAS,IAbN,oBAalCvE,EAbkC,KAarB0E,EAbqB,OAcWH,mBAClDD,GAfuC,oBAclC3K,EAdkC,KAcdgL,EAdc,KAiBnCC,EAA2BC,OAAOC,KAAKzM,GAAc0M,QACzD,SAACC,GAAD,OAAUA,IAASnI,KAlBoB,EAsBT0H,mBAAS,IAtBA,oBAsBlCU,EAtBkC,KAsBxBC,EAtBwB,KAwBzClB,qBAAU,WAEJkB,EADW,KAAftG,EACgB,SAACuG,GAAD,mBAAC,eAAcA,GAAf,IAAoBvG,WAAY,CAAEwG,SAAS,MAC3C,SAACD,GAAD,mBAAC,eACRA,GADO,IAEVvG,WAAY,CACVwG,SAAS,EACTC,eAAgB,mCAIpBH,EADS,KAAbpF,EACgB,SAACqF,GAAD,mBAAC,eAAcA,GAAf,IAAoBrF,SAAU,CAAEsF,SAAS,MACzC,SAACD,GAAD,mBAAC,eACRA,GADO,IAEVrF,SAAU,CACRsF,SAAS,EACTC,eAAgB,wCAIpBH,EADY,KAAhBlF,EACgB,SAACmF,GAAD,mBAAC,eAAcA,GAAf,IAAoBnF,YAAa,CAAEoF,SAAS,MAC5C,SAACD,GAAD,mBAAC,eACRA,GADO,IAEVnF,YAAa,CACXoF,SAAS,EACTC,eAAgB,4CAGvB,CAACzG,EAAYkB,EAAUE,IAM1B,OACE,qCACE,gBAAC,IAAD,CACEsF,OAAQ,aACRC,OAAQ7G,EAAwBC,gBAAkBnC,EAFpD,UAIE,eAAC,IAAD,CACE8I,OAAQ,WACN1C,EAASjD,GAAiB,KAC1BiD,EAAS/C,GAAsC,CAAE5D,OAAQ,MACzD2G,EAASnD,GAAiB3C,KAJ9B,uCASA,eAAC,IAAD,UACE,gBAAC,IAAD,WAC0C,KAAvC4B,EAAwBE,YACvB,gBAAC,IAAM4G,SAAP,WACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAOC,IAAI,aAAX,yBACA,eAAC,IAAD,CACEC,GAAG,aACH5K,KAAK,aACL6K,YAAY,GACZjG,KAAK,OACLkG,OAAO,UAAAX,EAAQ,kBAAR,eAAwBG,WAAW,EAC1CS,UAAS,UAACZ,EAAQ,kBAAT,aAAC,EAAwBG,WAAW,EAC7CU,SAAU,SAAC/C,GACTyB,EAAczB,EAAEU,cAAcsC,QAEhCA,MAAOnH,IAET,eAAC,IAAD,CAAciH,QAAQ,OAAtB,mBACGZ,EAAQ,kBADX,aACG,EAAwBI,oBAK7B,gBAAC,IAAD,WACE,eAAC,IAAD,CAAOI,IAAI,WAAX,wBADF,IAC2C,wBACxCb,EAAyB3C,KAAI,SAAC+C,GAC7B,OACE,eAAC,IAAMQ,SAAP,UACE,gBAAC,IAAD,CAAWQ,OAAK,EAACC,QAAM,EAAvB,UACE,eAAC,IAAD,CACEvG,KAAK,WACLwG,QAASvM,EAAmBqL,KAAS,EACrCc,SAAU,kBApDE,SAACd,GACrCL,GAAsB,SAACQ,GAAD,mBAAC,eAAcA,GAAf,kBAAqBH,GAAQG,EAAIH,QAmDfmB,CAA8BnB,MAEhD,eAAC,IAAD,CAAOgB,OAAK,EAAZ,SAAchB,QAPGA,YAgB/B,gBAAC,IAAD,WACE,eAAC,IAAD,CAAOS,IAAI,WAAX,uBACA,eAAC,IAAD,CACEC,GAAG,WACH5K,KAAK,WACL6K,YAAY,GACZjG,KAAK,OACLkG,OAAO,UAAAX,EAAQ,gBAAR,eAAsBG,WAAW,EACxCS,UAAS,UAACZ,EAAQ,gBAAT,aAAC,EAAsBG,WAAW,EAC3CU,SAAU,SAAC/C,GACT0B,EAAY1B,EAAEU,cAAcsC,QAE9BA,MAAOjG,IAET,eAAC,IAAD,CAAc+F,QAAQ,OAAtB,mBACGZ,EAAQ,gBADX,aACG,EAAsBI,oBAG3B,gBAAC,IAAD,WACE,eAAC,IAAD,CAAOI,IAAI,kBAAX,8BACA,eAAC,IAAD,CACEC,GAAG,kBACH5K,KAAK,kBACL6K,YAAY,GACZjG,KAAK,OACLkG,OAAO,UAAAX,EAAQ,mBAAR,eAAyBG,WAAW,EAC3CS,UAAS,UAACZ,EAAQ,mBAAT,aAAC,EAAyBG,WAAW,EAC9CU,SAAU,SAAC/C,GACT2B,EAAe3B,EAAEU,cAAcsC,QAEjCA,MAAO/F,IAET,eAAC,IAAD,CAAc6F,QAAQ,OAAtB,mBACGZ,EAAQ,mBADX,aACG,EAAyBI,yBAKlC,gBAAC,IAAD,WACE,eAAC,IAAD,CACEe,MAAM,UACNC,QAAS,WACP,GACExB,OAAOC,KAAKG,GAAUqB,OACpB,SAACC,GAAD,OAAmC,IAA1BtB,EAASsB,GAAKnB,WAEzB,CACA,IAAMoB,EACmC,KAAvC9H,EAAwBE,WAC1BgE,EACE/C,GAAsC,CACpC5D,OAAQQ,EACRrD,KAAM,CACJO,qBACAmG,WACAE,cACApB,WAAY4H,EACR9H,EAAwBE,WACxBA,QAnBhB,qBA4BU,IACV,eAAC,IAAD,CACEyH,QAAS,WACPzD,EAASjD,GAAiB,KAC1BiD,EAAS/C,GAAsC,CAAE5D,OAAQ,MACzD2G,EAASnD,GAAiB3C,KAJ9B,4BCvLK,SAAS2J,KACtB,IAAMlE,EAAOI,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QACpC7G,EAAOiH,cAAY,SAACrH,GAAD,OAAWA,EAAMI,QACpCC,EAAUgH,cAAY,SAACrH,GAAD,OAAWA,EAAMK,WAErCsF,EAAmCtF,EAAnCsF,mBAAoBzH,EAAemC,EAAfnC,WACpBkF,EAA4B6D,EAA5B7D,wBACAjF,EAAUiF,EAAVjF,MACAuB,EAAmBU,EAAnBV,eAEF4H,EAAWC,eACTjK,EAAcoC,EAAdpC,UAER,OACE,qCACE,gBAAC,IAAD,CACE0M,OAAQ,aACRC,OAAQ7G,EAAwBC,gBAAkBlC,EAFpD,UAIE,eAAC,IAAD,CACE6I,OAAQ,WACN1C,EAASjD,GAAiB,KAC1BiD,EAAS/C,GAAsC,CAAE5D,OAAQ,MACzD2G,EAASnD,GAAiB3C,KAJ9B,+BASA,gBAAC,IAAD,WACoB,IAAjBrD,EAAMiN,QAAgB,oDACL,IAAjBjN,EAAMiN,QACLjN,EAAMwI,KAAI,WAAqB0E,GAArB,IAAGjN,EAAH,EAAGA,MAAOqG,EAAV,EAAUA,QAAV,OACR,eAAC,IAAD,CAAkBqE,UAAU,OAA5B,SACE,gBAAC,IAAD,WACE,gBAAC,IAAD,CAAOgC,MAAM,UAAb,kBAA6BO,EAAQ,KACrC,eAAC,IAAD,CAAWC,IAAI,KAAKxC,UAAU,OAA9B,SACG1K,IAEH,eAAC,IAAD,CAAc0K,UAAU,kBAAkBwC,IAAI,KAA9C,SACG7G,QAPI4G,SAajB,gBAAC,IAAD,WACE,eAAC,IAAD,CACEP,MAAM,UACNC,QAAS,WACPzD,EACE/B,GAAe,CACbjI,YACAY,aACAE,MAAOgF,EAAwBE,WAC/BnF,MAAOiF,EAAwBjF,MAC/BE,mBACE+E,EAAwB/E,mBAC1BsH,wBAGJ2B,EACE/C,GAAsC,CACpC5D,OAAQ,MAGZ2G,EAASnD,GAAiB3C,KAnB9B,gBAuBU,IACV,eAAC,IAAD,CACEuJ,QAAS,WACPzD,EACE/C,GAAsC,CACpC5D,OAAQK,EACRlD,KAAM,CACJM,MAAOgF,EAAwBE,WAC/BjF,mBACE+E,EAAwB/E,wBARpC,0BAgBA,eAAC,IAAD,CACE0M,QAAS,WACPzD,EAASjD,GAAiB,KAC1BiD,EAAS/C,GAAsC,CAAE5D,OAAQ,MACzD2G,EAASnD,GAAiB3C,KAJ9B,4B,sBCzGK,SAAS+J,KACtB,IACQnI,EADKiE,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QAClC7D,wBACFkE,EAAWC,eAEjB,OACE,qCACE,uBACEuB,UACE1F,EAAwBC,gBAAkBrC,EACtC,sCACA,wCAJR,UAOE,eAAC,KAAD,CACEoJ,GAAG,mBACHtB,UAAW,8BACX0C,KAAMC,KACNV,QAAS,WACPzD,EACE/C,GAAsC,CACpC5D,OAAQM,EACRnD,KAAM,SAKd,eAAC,IAAD,CAAOgL,UAAU,oBAAoBgC,MAAM,UAA3C,gDCrBO,SAASY,KACtB,IACQtI,EADKiE,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QAClC7D,wBAER,OACE,uCACGA,EAAwBC,gBAAkBrC,GACzC,eAACuK,GAAD,IAEDnI,EAAwBC,gBAAkBpC,GACzC,eAACmG,GAAD,IAEDhE,EAAwBC,gBAAkBnC,GACzC,eAAC6H,GAAD,IAED3F,EAAwBC,gBAAkBlC,GACzC,eAACgK,GAAD,OCRO,SAASQ,KACtB,IAAM1E,EAAOI,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QAElCrB,EADQyB,cAAY,SAACrH,GAAD,OAAWA,EAAMK,WACrCuF,OACAnC,EAAiCwD,EAAjCxD,6BACF6D,EAAWC,eALoB,EAMS0B,mBACzB,IAAlBrD,EAAOwF,QAAgBxF,EAAO,GAAGjI,SAAY,GAPX,oBAM9BJ,EAN8B,KAMbqO,EANa,KASjCtF,EAAgB,GAapB,OALAoC,qBAAU,WAERpC,EAAgBV,EAAOW,MAAK,SAAC/H,GAAD,OAAYA,EAAMb,WAAaJ,OAC1D,CAACA,IAGF,qCACE,gBAAC,IAAD,CACEyM,OAAQ,aACRC,OACExG,EAA6BJ,gBAAkBrB,EAHnD,UAME,eAAC,IAAD,CACEgI,OAAQ,WACN1C,EAASjD,GAAiB,KAC1BiD,EACEzC,GAA2C,CAAElE,OAAQ,MAEvD2G,EAASnD,GAAiB3C,KAN9B,mCAWA,gBAAC,IAAD,WACqB,IAAlBoE,EAAOwF,QACN,gBAAC,IAAD,WACE,eAAC,IAAD,CAAOjB,IAAI,gBAAX,8BACA,eAAC,IAAD,CACEC,GAAG,gBACH5K,KAAK,SACL4E,KAAK,SACLqG,MAAOlN,EACPiN,SAvCe,SAAC/C,GAC5BoE,QAAQC,IAAIrE,EAAE9C,OAAO8F,OACrBhD,EAAEsE,UACFH,GAAmB,SAAC/B,GAAD,OAASpC,EAAE9C,OAAO8F,UA+B3B,SAOG7E,EAAOe,KAAI,YAAyB,IAAtBvI,EAAqB,EAArBA,MAAOT,EAAc,EAAdA,QACpB,OACE,yBAAsB8M,MAAO9M,EAA7B,SACGS,GADUT,WAQJ,IAAlBiI,EAAOwF,QAAgB,uDAE1B,gBAAC,IAAD,WACqB,IAAlBxF,EAAOwF,QACN,uCACE,eAAC,IAAD,CACEN,MAAM,UACNC,QAAS,WACPzD,EACEzC,GAA2C,CACzClE,OAAQsB,EACRnE,KAAM,CACJH,QAASJ,EACTiG,SAAU8C,OARpB,qBAeU,OAGd,eAAC,IAAD,CACEyE,QAAS,WACPzD,EAASjD,GAAiB,KAC1BiD,EACEzC,GAA2C,CAAElE,OAAQ,MAEvD2G,EAASnD,GAAiB3C,KAN9B,4BCnFK,SAASwK,KACtB,IAAM/E,EAAOI,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QAElCrB,EADQyB,cAAY,SAACrH,GAAD,OAAWA,EAAMK,WACrCuF,OACAnC,EAAiCwD,EAAjCxD,6BACAlG,EAAoBkG,EAApBlG,gBACF0O,EAAerG,EAAOW,MAC1B,SAAC/H,GAAD,OAAYA,EAAMb,WAAaJ,KAE3B+J,EAAWC,eAcjB,OACE,qCACE,gBAAC,IAAD,CACEyC,OAAQ,aACRC,OACExG,EAA6BJ,gBAC7BpB,EAJJ,UAOE,eAAC,IAAD,CACE+H,OAAQ,WACN1C,EAASjD,GAAiB,KAC1BiD,EACEzC,GAA2C,CAAElE,OAAQ,MAEvD2G,EAASnD,GAAiB3C,KAN9B,uCAWA,gBAAC,IAAD,WACiC,IAA9ByK,EAAa9N,MAAMiN,QAClBa,EAAa9N,MAAMwI,KAAI,WAAqB0E,GAAW,IAA7BjN,EAA4B,EAA5BA,MAAOqG,EAAqB,EAArBA,QAC/B,OACE,gBAAC,IAAMyF,SAAP,WACE,eAAC,IAAD,CAAMpB,UAAU,OAAhB,SACE,gBAAC,IAAD,WACE,gBAAC,IAAD,CAAOgC,MAAM,UAAb,kBAA6BO,EAAQ,KACrC,eAAC,IAAD,CAAWC,IAAI,KAAf,SAAqBlN,IACrB,eAAC,IAAD,UAAWqG,SAGf,sBACEyH,MAAO,CAAEC,MAAO,OAAQC,UAAW,UACnCrB,QAAS,WA7CzBzD,EACEzC,GAA2C,CACzClE,OAAQuB,EACRpE,KAAM,CACJ4F,eAyCkD2H,EAAQ,EAxC1DjN,MAAO6N,EAAa7N,WAsCZ,SAIE,gBAAC,IAAD,CACE0M,MAAM,UACNuB,SAAO,EACPvD,UAAU,OACVwD,KAAK,KACLJ,MAAO,CACLK,QAAS,gBANb,+BASqBlB,EAAQ,SArBZA,MA2BI,IAA9BY,EAAa9N,MAAMiN,QAClB,uBAAKc,MAAO,CAAEC,MAAO,OAAQC,UAAW,UAAxC,UACE,mDACA,eAAC,IAAD,CACEtB,MAAM,UACNuB,SAAO,EACPvD,UAAU,OACVwD,KAAK,KACLJ,MAAO,CACLK,QAAS,gBANb,wCC/FC,SAASC,KACtB,IAAMlF,EAAWC,eAEXC,EAAoB,SAACC,GACzBA,EAAEC,iBACFD,EAAEE,kBACSF,EAAE9C,OACViD,UAAUC,IAAI,0BAEbC,EAAoB,SAACL,GACzBA,EAAEC,iBACFD,EAAEE,kBACSF,EAAE9C,OACViD,UAAUG,OAAO,0BAEhBC,EAAoB,SAApBA,EAAqBP,GACzBA,EAAEC,iBACFD,EAAEE,kBACF,IAAMM,EAAgBC,KAAOT,EAAEU,cAAe,CAC5CC,cAAe,CAAC,KAAM,MAAO,cAEXC,SAASC,iBAAiB,KAElCC,SAAQ,SAACC,GACnBA,EAAQC,oBAAoB,aAAcjB,GAAmB,GAC7DgB,EAAQC,oBAAoB,aAAcX,GAAmB,GAC7DU,EAAQC,oBAAoB,QAAST,GAAmB,GACxDQ,EAAQZ,UAAUG,OAAO,4BAE3BT,EACEzC,GAA2C,CACzClE,OAAQyB,GACRtE,KAAM,CACJyF,iBAAkB0E,OAmB1B,OAbAS,qBAAU,WACc,qBAAXC,QACWN,SAASC,iBAAiB,KAElCC,SAAQ,SAACC,GACnBA,EAAQI,iBAAiB,aAAcpB,GAAmB,GAC1DgB,EAAQI,iBAAiB,aAAcd,GAAmB,GAC1DU,EAAQI,iBAAiB,QAASZ,GAAmB,QAIxD,IAEI,+BC/BM,SAASyE,KAAqB,IAAD,YAElChJ,EADK4D,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QAClCxD,6BACAH,EAAeG,EAAfH,WACFgE,EAAWC,eAJyB,EAKV0B,mBAAS,IALC,oBAKnCzE,EALmC,KAKzB2E,EALyB,OAMJF,mBAAS,IANL,oBAMnCvE,EANmC,KAMtB0E,EANsB,OASVH,mBAAS,IATC,oBASnCU,EATmC,KASzBC,EATyB,KAgC1C,OArBAlB,qBAAU,WAEJkB,EADS,KAAbpF,EACgB,SAACqF,GAAD,mBAAC,eAAcA,GAAf,IAAoBrF,SAAU,CAAEsF,SAAS,MACzC,SAACD,GAAD,mBAAC,eACRA,GADO,IAEVrF,SAAU,CACRsF,SAAS,EACTC,eAAgB,wCAIpBH,EADY,KAAhBlF,EACgB,SAACmF,GAAD,mBAAC,eAAcA,GAAf,IAAoBnF,YAAa,CAAEoF,SAAS,MAC5C,SAACD,GAAD,mBAAC,eACRA,GADO,IAEVnF,YAAa,CACXoF,SAAS,EACTC,eAAgB,4CAGvB,CAACvF,EAAUE,IAGZ,qCACE,gBAAC,IAAD,CACEsF,OAAQ,aACRC,OACExG,EAA6BJ,gBAAkBjB,GAHnD,UAME,eAAC,IAAD,CACE4H,OAAQ,WACN1C,EAASjD,GAAiB,KAC1BiD,EAAS/C,GAAsC,CAAE5D,OAAQ,MACzD2G,EAASnD,GAAiB3C,KAJ9B,uCASA,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAO2I,IAAI,aAAX,yBACA,eAAC,IAAD,CACEC,GAAG,aACH5K,KAAK,aACL6K,YAAY,GACZqC,UAAU,EACVtI,KAAK,OACLqG,MAAOnH,OAGX,gBAAC,IAAD,WACE,eAAC,IAAD,CAAO6G,IAAI,WAAX,uBACA,eAAC,IAAD,CACEC,GAAG,WACH5K,KAAK,WACL6K,YAAY,GACZjG,KAAK,OACLkG,OAAO,UAAAX,EAAQ,gBAAR,eAAsBG,WAAW,EACxCS,UAAS,UAACZ,EAAQ,gBAAT,aAAC,EAAsBG,WAAW,EAC3CU,SAAU,SAAC/C,GACT0B,EAAY1B,EAAEU,cAAcsC,QAE9BA,MAAOjG,IAET,eAAC,IAAD,CAAc+F,QAAQ,OAAtB,mBACGZ,EAAQ,gBADX,aACG,EAAsBI,oBAG3B,gBAAC,IAAD,WACE,eAAC,IAAD,CAAOI,IAAI,kBAAX,0BACA,eAAC,IAAD,CACEC,GAAG,kBACH5K,KAAK,kBACL6K,YAAY,GACZjG,KAAK,WACLkG,OAAO,UAAAX,EAAQ,mBAAR,eAAyBG,WAAW,EAC3CS,UAAS,UAACZ,EAAQ,mBAAT,aAAC,EAAyBG,WAAW,EAC9CU,SAAU,SAAC/C,GACT2B,EAAe3B,EAAEU,cAAcsC,QAEjCA,MAAO/F,IAET,eAAC,IAAD,CAAc6F,QAAQ,OAAtB,mBACGZ,EAAQ,mBADX,aACG,EAAyBI,yBAKlC,gBAAC,IAAD,WACE,eAAC,IAAD,CACEe,MAAM,UACNC,QAAS,WAELxB,OAAOC,KAAKG,GAAUqB,OACpB,SAACC,GAAD,OAAmC,IAA1BtB,EAASsB,GAAKnB,YAGzBxC,EACEzC,GAA2C,CACzClE,OAAQ0B,GACRvE,KAAM,CACJ0G,WACAE,mBAbZ,qBAsBU,IACV,eAAC,IAAD,CACEqG,QAAS,WACPzD,EAASjD,GAAiB,KAC1BiD,EACEzC,GAA2C,CAAElE,OAAQ,MAEvD2G,EAASnD,GAAiB3C,KAN9B,4BC5IK,SAASmL,KACtB,IACQlJ,EADK4D,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QAClCxD,6BACF6D,EAAWC,eAEjB,OACE,qCACE,uBACEuB,UACErF,EAA6BJ,gBAAkBnB,EAC3C,sCACA,wCAJR,UAOE,eAAC,KAAD,CACEkI,GAAG,mBACHtB,UAAW,8BACX0C,KAAMC,KACNV,QAAS,WACPzD,EACEzC,GAA2C,CACzClE,OAAQwB,SAKhB,eAAC,IAAD,CAAO2G,UAAU,oBAAoBgC,MAAM,UAA3C,gDCtBO,SAAS8B,KACtB,IAAM3F,EAAOI,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QACpC5G,EAAUgH,cAAY,SAACrH,GAAD,OAAWA,EAAMK,WAErCsF,EAA+BtF,EAA/BsF,mBAAoBC,EAAWvF,EAAXuF,OACpBnC,EAAiCwD,EAAjCxD,6BACAC,EACND,EADMC,eAAgBJ,EACtBG,EADsBH,WAAYnF,EAClCsF,EADkCtF,MAAOZ,EACzCkG,EADyClG,gBAGrC+J,EAAWC,eAEjB,OACE,qCACE,gBAAC,IAAD,CACEyC,OAAQ,aACRC,OACExG,EAA6BJ,gBAC7BhB,GAJJ,UAOE,eAAC,IAAD,CACE2H,OAAQ,WACN1C,EAASjD,GAAiB,KAC1BiD,EACEzC,GAA2C,CAAElE,OAAQ,MAEvD2G,EAASnD,GAAiB3C,KAN9B,+BAWA,eAAC,IAAD,gCACA,gBAAC,IAAD,WACE,eAAC,IAAD,CACEsJ,MAAM,UACNC,QAAS,WAEP,IAAM8B,EAAgBjH,EAAOW,MAC3B,SAAC/H,GAAD,OAAYA,EAAMb,WAAaJ,KAE3BuP,EAAQ,YAAOD,EAAc1O,OAC7B4O,EAAuBD,EAC1BE,OAAO,EAAGtJ,GACVuJ,OAAO9O,GACP8O,OAAOH,EAASE,QAAQtJ,IAG3B4D,EACE9B,GAAe,CACbhH,MAAM,2BAAMqO,GAAP,IAAsB1O,MAAO4O,IAClCpH,wBAGJ2B,EACEzC,GAA2C,CACzClE,OAAQ,MAGZ2G,EAASnD,GAAiB3C,KAzB9B,gBA6BU,IACV,eAAC,IAAD,CACEuJ,QAAS,WACPzD,EACEzC,GAA2C,CACzClE,OAAQuB,EACRpE,KAAM,CACJ4F,iBACAtF,MAAOkF,OAPjB,0BAeA,eAAC,IAAD,CACEyH,QAAS,WACPzD,EAASjD,GAAiB,KAC1BiD,EACEzC,GAA2C,CAAElE,OAAQ,MAEvD2G,EAASnD,GAAiB3C,KAN9B,4BC3EK,SAAS0L,KACtB,IACQzJ,EADK4D,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QAClCxD,6BAER,OACE,uCACGA,EAA6BJ,gBAAkBrB,GAC9C,eAAC2J,GAAD,IAEDlI,EAA6BJ,gBAC5BpB,GAA+B,eAAC,GAAD,IAChCwB,EAA6BJ,gBAAkBnB,GAC9C,eAACyK,GAAD,IAEDlJ,EAA6BJ,gBAC5BlB,IAA0B,eAACqK,GAAD,IAC3B/I,EAA6BJ,gBAC5BjB,IAA2B,eAACqK,GAAD,IAC5BhJ,EAA6BJ,gBAC5BhB,IAA6B,eAACuK,GAAD,OCftB,SAASO,KACtB,IAAMlG,EAAOI,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QAElCrB,EADQyB,cAAY,SAACrH,GAAD,OAAWA,EAAMK,WACrCuF,OACAjC,EAAkCsD,EAAlCtD,8BACF2D,EAAWC,eALmB,EAMU0B,mBACzB,IAAlBrD,EAAOwF,QAAgBxF,EAAO,GAAGjI,SAAY,GAPZ,oBAM7BJ,EAN6B,KAMZqO,EANY,KAShCtF,EAAgB,GAYpB,OALAoC,qBAAU,WAERpC,EAAgBV,EAAOW,MAAK,SAAC/H,GAAD,OAAYA,EAAMb,WAAaJ,OAC1D,CAACA,IAGF,qCACE,gBAAC,IAAD,CACEyM,OAAQ,aACRC,OACEtG,EAA8BN,gBAAkBxB,EAHpD,UAME,eAAC,IAAD,CACEmI,OAAQ,WACN1C,EAASjD,GAAiB,KAC1BiD,EACExC,GAA4C,CAAEnE,OAAQ,MAExD2G,EAASnD,GAAiB3C,KAN9B,oCAWA,gBAAC,IAAD,WACqB,IAAlBoE,EAAOwF,QACN,gBAAC,IAAD,WACE,eAAC,IAAD,CAAOjB,IAAI,gBAAX,6BACA,eAAC,IAAD,CACEC,GAAG,gBACH5K,KAAK,SACL4E,KAAK,SACLqG,MAAOlN,EACPiN,SAtCe,SAAC/C,GAC5BA,EAAEsE,UACFH,GAAmB,SAAC/B,GAAD,OAASpC,EAAE9C,OAAO8F,UA+B3B,SAOG7E,EAAOe,KAAI,YAAyB,IAAtBvI,EAAqB,EAArBA,MAAOT,EAAc,EAAdA,QACpB,OACE,yBAAsB8M,MAAO9M,EAA7B,SACGS,GADUT,WAQJ,IAAlBiI,EAAOwF,QAAgB,uDAE1B,gBAAC,IAAD,WACqB,IAAlBxF,EAAOwF,QACN,eAAC,IAAD,CACEN,MAAM,UACNC,QAAS,WACPzD,EACExC,GAA4C,CAC1CnE,OAAQmB,EACRhE,KAAM,CACJH,QAASJ,EACTiG,SAAU8C,OARpB,qBAiBF,eAAC,IAAD,CACEyE,QAAS,WACPzD,EAASjD,GAAiB,KAC1BiD,EACExC,GAA4C,CAAEnE,OAAQ,MAExD2G,EAASnD,GAAiB3C,KAN9B,4BCjFK,SAAS4L,KAAqB,IAAD,wBAElCzJ,EADK0D,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QAClCtD,8BACAH,EAAaG,EAAbH,SACF8D,EAAWC,eAJyB,EAKF0B,mBAAS,GALP,oBAKnCoE,EALmC,KAKrBC,EALqB,OAMVrE,mBAASzF,GANC,oBAMnCuB,EANmC,KAMzBwI,EANyB,OAcVtE,mBAAS,IAdC,oBAcnCU,EAdmC,KAczBC,EAdyB,OAeAX,mBAAS,CACjDa,SAAS,EACTC,eAAgB,gCAjBwB,oBAenCyD,EAfmC,KAepBC,EAfoB,KAkD1C,OA7BA/E,qBAAU,WACR+E,GAAiB,SAAC5D,GAAD,MAAU,CACzBC,QAA4B,KAAnB/E,EAAS3G,MAClB2L,eAAgB,oCAEjB,CAAChF,IAGJ2D,qBAAU,WACR,IAAIgF,EAAmB,GACvB3I,EAAS5G,MAAMoK,SAAQ,SAACoF,EAAMtC,GAC5BqC,EAAgB,2BACXA,GADW,kBAEbrC,EAAQ,CACPuC,UAAW,CACT9D,QAAwB,KAAf6D,EAAKvP,MACd2L,eAAgB,8BAElBrF,YAAa,CACXoF,QAA0B,KAAjB6D,EAAKlJ,QACdsF,eAAgB,sCAMxBH,GAAY,SAACC,GAAD,OAAS6D,OACpB,CAAC3I,IAGF,qCACE,gBAAC,IAAD,CACEiF,OAAQ,aACRC,OACEtG,EAA8BN,gBAC9BvB,EAJJ,UAOE,eAAC,IAAD,CACEkI,OAAQ,WACN1C,EAASjD,GAAiB,KAC1BiD,EACExC,GAA4C,CAAEnE,OAAQ,MAExD2G,EAASnD,GAAiB3C,KAN9B,oCAWA,gBAAC,IAAD,WAC6B,IAA1BuD,EAAS5G,MAAMiN,QACd,uCACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAOjB,IAAI,WAAX,yBACA,eAAC,IAAD,CACEC,GAAG,WACH5K,KAAK,WACL6K,YAAY,GACZjG,KAAK,OACLkG,OAAoB,OAAbkD,QAAa,IAAbA,OAAA,EAAAA,EAAe1D,WAAW,EACjCS,UAAS,OAACiD,QAAD,IAACA,OAAD,EAACA,EAAe1D,WAAW,EACpCU,SAAU,SAAC/C,GACTA,EAAEsE,UACFwB,GAAY,SAAC1D,GAAD,mBAAC,eAAcA,GAAf,IAAoBzL,MAAOqJ,EAAE9C,OAAO8F,YAElDA,MAAO1F,EAAS3G,QAElB,eAAC,IAAD,CAAcmM,QAAQ,OAAtB,gBACGiD,QADH,IACGA,OADH,EACGA,EAAezD,oBAGpB,gBAAC,IAAD,WACE,eAAC,IAAD,CAAOI,IAAI,gBAAX,6BACA,gBAAC,IAAD,CACEC,GAAG,gBACH5K,KAAK,SACL4E,KAAK,SACLqG,MAAO4C,EACP7C,SA3FiB,SAAC/C,GAChCA,EAAEsE,UACFuB,GAAgB,SAACzD,GAAD,OAASpC,EAAE9C,OAAO8F,UAoFtB,UAOG1F,EAAS5G,MAAMiN,QACdrG,EAAS5G,MAAMwI,KAAI,WAAY0E,GAAW,IAApBjN,EAAmB,EAAnBA,MACpB,OACE,0BAAoBqM,MAAOY,EAA3B,kBACQA,EAAQ,EADhB,MACsBjN,IADTiN,OAKjBtG,EAAS5G,MAAMiN,QAAU,sDAE7B,gBAAC,IAAD,CAAWtC,UAAU,OAArB,UACE,eAAC,IAAD,CAAOqB,IAAI,WAAX,wBACA,eAAC,IAAD,CACEC,GAAG,WACH5K,KAAK,WACL6K,YAAY,GACZjG,KAAK,OACLkG,OAAO,UAAAX,EAAS0D,UAAT,mBAAwBO,iBAAxB,eAAmC9D,WAAW,EACrDS,UACE,UAACZ,EAAS0D,UAAV,iBAAC,EAAwBO,iBAAzB,aAAC,EAAmC9D,WAAW,EAEjDU,SAAU,SAAC/C,GACTA,EAAEsE,UACF,IAAMe,EAAQ,YAAO/H,EAAS5G,OAC9B2O,EAASO,GAAT,2BACKP,EAASO,IADd,IAEEjP,MAAOqJ,EAAE9C,OAAO8F,QAElB8C,GAAY,SAAC1D,GAAD,mBAAC,eACRA,GADO,IAEV1L,MAAO2O,QAGXrC,MAAO1F,EAAS5G,MAAMkP,GAAcjP,QAEtC,eAAC,IAAD,CAAcmM,QAAQ,OAAtB,mBACGZ,EAAS0D,UADZ,iBACG,EAAwBO,iBAD3B,aACG,EAAmC7D,oBAGxC,gBAAC,IAAD,WACE,eAAC,IAAD,CAAOI,IAAI,kBAAX,0BACA,eAAC,IAAD,CACEC,GAAG,kBACH5K,KAAK,kBACL6K,YAAY,GACZjG,KAAK,WACLkG,OACE,UAAAX,EAAS0D,UAAT,mBAAwB3I,mBAAxB,eAAqCoF,WAAW,EAElDS,UACE,UAACZ,EAAS0D,UAAV,iBAAC,EAAwB3I,mBAAzB,aAAC,EAAqCoF,WAAW,EAEnDU,SAAU,SAAC/C,GACTA,EAAEsE,UACF,IAAMe,EAAQ,YAAO/H,EAAS5G,OAC9B2O,EAASO,GAAT,2BACKP,EAASO,IADd,IAEE5I,QAASgD,EAAE9C,OAAO8F,QAEpB8C,GAAY,SAAC1D,GAAD,mBAAC,eACRA,GADO,IAEV1L,MAAO2O,QAGXrC,MAAO1F,EAAS5G,MAAMkP,GAAc5I,UAEtC,eAAC,IAAD,CAAc8F,QAAQ,OAAtB,mBACGZ,EAAS0D,UADZ,iBACG,EAAwB3I,mBAD3B,aACG,EAAqCqF,oBAG1C,gBAAC,IAAD,CACEe,MAAM,SACNuB,SAAO,EACPK,SAAoC,IAA1B3H,EAAS5G,MAAMiN,OACzBL,QAAS,WAEP,GAAIhG,EAAS5G,MAAMiN,OAAS,EAAG,CAC7B,IAAMyC,EAAW9I,EAAS5G,MAAMsL,QAC9B,SAACqE,EAAGzC,GAAJ,OAAegC,IAAiBhC,KAElCkC,GAAY,SAAC1D,GAAD,mBAAC,eACRA,GADO,IAEV1L,MAAO0P,OAETP,GAAgB,SAACzD,GAAD,OAAS,OAd/B,UAmB6B,IAA1B9E,EAAS5G,MAAMiN,QAAgB,8BAC/BrG,EAAS5G,MAAMiN,OAAS,GAAxB,uBACiBiC,EAAe,YAMd,IAA1BtI,EAAS5G,MAAMiN,QAAgB,uDAElC,gBAAC,IAAD,WACE,eAAC,IAAD,CACEN,MAAM,UACNC,QAAS,WAGLxB,OAAOwE,OAAOpE,GAAUqB,OACtB,SAAC2C,GAAD,OAAUA,EAAKC,UAAU9D,SAAW6D,EAAKjJ,YAAYoF,YAEvD0D,EAAc1D,SAEdxC,EACExC,GAA4C,CAC1CnE,OAAQoB,EACRjE,KAAM,CACJiH,SAAUA,OAdtB,qBAuBU,IACV,eAAC,IAAD,CACEgG,QAAS,WACPzD,EAASjD,GAAiB,KAC1BiD,EACExC,GAA4C,CAAEnE,OAAQ,MAExD2G,EAASnD,GAAiB3C,KAN9B,4BCrOK,SAASwM,KACtB,IAAM/G,EAAOI,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QAElCtB,EADQ0B,cAAY,SAACrH,GAAD,OAAWA,EAAMK,WACrCsF,mBACAhC,EAAkCsD,EAAlCtD,8BACAH,EAAuBG,EAAvBH,SAAUuB,EAAapB,EAAboB,SACZuC,EAAWC,eAEjB,OACE,qCACE,gBAAC,IAAD,CACEyC,OAAQ,aACRC,OACEtG,EAA8BN,gBAC9BtB,EAJJ,UAOE,eAAC,IAAD,CACEiI,OAAQ,WACN1C,EAASjD,GAAiB,KAC1BiD,EACExC,GAA4C,CAAEnE,OAAQ,MAExD2G,EAASnD,GAAiB3C,KAN9B,+BAWA,gBAAC,IAAD,WAC6B,IAA1BuD,EAAS5G,MAAMiN,QACd,qCACGrG,EAAS5G,MAAMwI,KAAI,SAACgH,EAAMtC,GACzB,IAAM4C,EAAWzK,EAASrF,MAAMkN,GAAOjN,MACjC8P,EAAWnJ,EAAS5G,MAAMkN,GAAOjN,MACjC+P,EAAa3K,EAASrF,MAAMkN,GAAO5G,QACnC2J,EAAarJ,EAAS5G,MAAMkN,GAAO5G,QAEzC,OACE,iCACE,wCAAU4G,EAAQ,KAClB,gBAAC,IAAD,CAAOgD,UAAQ,EAAf,UACE,iCACE,gCACE,4CACA,iDAGJ,iCACE,gCACE,8BAAKJ,IACL,8BAAKC,YAIX,gBAAC,IAAD,WACE,iCACE,gCACE,8CACA,mDAGJ,iCACE,gCACE,8BAAKC,IACL,8BAAKC,WAVC/C,KAhBJA,QAmCS,IAA1BtG,EAAS5G,MAAMiN,QAAgB,wDAElC,gBAAC,IAAD,WACE,eAAC,IAAD,CACEN,MAAM,UACNC,QAAS,WACPzD,EACE9B,GAAe,CACbhH,MAAOuG,EACPY,wBAGJ2B,EACExC,GAA4C,CAC1CnE,OAAQ,MAGZ2G,EAASnD,GAAiB3C,KAd9B,qBAkBU,IACV,eAAC,IAAD,CACEuJ,QAAS,WACPzD,EAASjD,GAAiB,KAC1BiD,EACExC,GAA4C,CAAEnE,OAAQ,MAExD2G,EAASnD,GAAiB3C,KAN9B,4BCtGK,SAAS8M,KACtB,IACQ3K,EADK0D,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QAClCtD,8BAER,OACE,uCACGA,EAA8BN,gBAAkBxB,GAC/C,eAACsL,GAAD,IAEDxJ,EAA8BN,gBAC7BvB,GAA6B,eAACsL,GAAD,IAC9BzJ,EAA8BN,gBAC7BtB,GAA6B,eAACiM,GAAD,OCFtB,SAASb,KACtB,IAAMlG,EAAOI,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QAElCrB,EADQyB,cAAY,SAACrH,GAAD,OAAWA,EAAMK,WACrCuF,OACAhC,EAAqCqD,EAArCrD,iCACF0D,EAAWC,eALmB,EAMU0B,mBACzB,IAAlBrD,EAAOwF,QAAgBxF,EAAO,GAAGjI,SAAY,GAPZ,oBAM7BJ,EAN6B,KAMZqO,EANY,KAShCtF,EAAgB,GAWpB,OALAoC,qBAAU,WAERpC,EAAgBV,EAAOW,MAAK,SAAC/H,GAAD,OAAWA,EAAMb,UAAYJ,OACxD,CAACA,IAGF,qCACE,gBAAC,IAAD,CACEyM,OAAQ,aACRC,OACErG,EAAiCP,gBACjCT,GAJJ,UAOE,eAAC,IAAD,CACEoH,OAAQ,WACN1C,EAASjD,GAAiB,KAC1BiD,EACEtC,GAA+C,CAAErE,OAAQ,MAE3D2G,EAASnD,GAAiB3C,KAN9B,oCAWA,gBAAC,IAAD,WACqB,IAAlBoE,EAAOwF,QACN,gBAAC,IAAD,WACE,eAAC,IAAD,CAAOjB,IAAI,gBAAX,6BACA,eAAC,IAAD,CACEC,GAAG,gBACH5K,KAAK,SACL4E,KAAK,SACLqG,MAAOlN,EACPiN,SAtCe,SAAC/C,GAC5BmE,GAAmB,SAAC/B,GAAD,OAASpC,EAAE9C,OAAO8F,UAgC3B,SAOG7E,EAAOe,KAAI,YAAyB,IAAtBvI,EAAqB,EAArBA,MAAOT,EAAc,EAAdA,QACpB,OACE,yBAAsB8M,MAAO9M,EAA7B,SACGS,GADUT,WAQJ,IAAlBiI,EAAOwF,QAAgB,sDAE1B,gBAAC,IAAD,WACE,eAAC,IAAD,CACEN,MAAM,UACNC,QAAS,WACPzD,EACEtC,GAA+C,CAC7CrE,OAAQkC,GACR/E,KAAM,CACJH,QAASJ,EACTiG,SAAU8C,OARpB,qBAeU,IACV,eAAC,IAAD,CACEyE,QAAS,WACPzD,EAASjD,GAAiB,KAC1BiD,EACEtC,GAA+C,CAAErE,OAAQ,MAE3D2G,EAASnD,GAAiB3C,KAN9B,4BC3EK,SAAS+M,KACtB,IACQ3K,EADKyD,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QAClCrD,iCACAJ,EAAaI,EAAbJ,SACArF,EAAUqF,EAAVrF,MACFmJ,EAAWC,eALuB,EAMR0B,mBAASzF,GAND,oBAMjCuB,EANiC,KAMvBwI,EANuB,KAYxC,OAJA7E,qBAAU,WACRmD,QAAQC,IAAI/G,EAAS5G,SACpB,CAAC4G,IAGF,qCACE,gBAAC,IAAD,CACEiF,OAAQ,aACRC,OACErG,EAAiCP,gBACjCR,GAJJ,UAOE,eAAC,IAAD,CACEmH,OAAQ,WACN1C,EAASjD,GAAiB,KAC1BiD,EACEtC,GAA+C,CAAErE,OAAQ,MAE3D2G,EAASnD,GAAiB3C,KAN9B,2BAWA,gBAAC,IAAD,WAC6B,IAA1BuD,EAAS5G,MAAMiN,QACdrG,EAAS5G,MAAMwI,KAAI,SAACgH,EAAMtC,GACxB,OACE,eAAC,IAAD,CAAMvC,UAAU,OAAhB,SACE,uBACEoD,MAAO,CACLK,QAAS,OACTiC,cAAe,MACfrC,MAAO,OACPsC,QAAS,QALb,UAQE,sBAAKvC,MAAO,CAAEwC,KAAM,KAApB,SACE,gBAAC,IAAD,WACE,gBAAC,IAAD,CAAWpD,IAAI,KAAf,kBAA0BD,EAAQ,KAClC,eAAC,IAAD,CAAcvC,UAAU,kBAAkBwC,IAAI,KAA9C,SACGqC,EAAKvP,QAER,eAAC,IAAD,UAAWuP,EAAKlJ,eAGpB,uBACEyH,MAAO,CACLK,QAAS,OACTiC,cAAe,SACfG,eAAgB,SAChBC,aAAc,UALlB,UAQa,IAAVvD,GACC,eAAC,IAAD,CACEvC,UAAU,MACViC,QAAS,WACP,IAAI8C,EAAQ,YAAO9I,EAAS5G,OACxB0Q,EAAWhB,EAASxC,GACpByD,EAASjB,EAASxC,EAAQ,GAC9BwC,EAASxC,GAASyD,EAClBjB,EAASxC,EAAQ,GAAKwD,EAEtBtB,GAAY,SAAC1D,GACX,OAAO,2BACFA,GADL,IAEE1L,MAAO0P,QAZf,SAiBE,eAAC,KAAD,CAAiBrC,KAAMuD,SAG1B1D,IAAUlN,EAAMiN,OAAS,GACxB,eAAC,IAAD,CACEtC,UAAU,MACViC,QAAS,WACP,IAAI8C,EAAQ,YAAO9I,EAAS5G,OACxB0Q,EAAWhB,EAASxC,GACpByD,EAASjB,EAASxC,EAAQ,GAC9BwC,EAASxC,GAASyD,EAClBjB,EAASxC,EAAQ,GAAKwD,EAEtBtB,GAAY,SAAC1D,GAKX,OAJAgC,QAAQC,IAAR,2BACKjC,GADL,IAEE1L,MAAO0P,KAEF,2BACFhE,GADL,IAEE1L,MAAO0P,QAhBf,SAqBE,eAAC,KAAD,CAAiBrC,KAAMwD,gBArEL3D,MA6EP,IAA1BtG,EAAS5G,MAAMiN,QAAgB,sDAElC,gBAAC,IAAD,WACE,eAAC,IAAD,CACEN,MAAM,UACNC,QAAS,WACPc,QAAQC,IAAI/G,GACZuC,EACEtC,GAA+C,CAC7CrE,OAAQmC,GACRhF,KAAM,CACJiH,SAAUA,OARpB,qBAeU,IACV,eAAC,IAAD,CACEgG,QAAS,WACPzD,EAASjD,GAAiB,KAC1BiD,EACEtC,GAA+C,CAAErE,OAAQ,MAE3D2G,EAASnD,GAAiB3C,KAN9B,4BCtIK,SAASyN,KACtB,IAAMhI,EAAOI,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QAElCtB,EADQ0B,cAAY,SAACrH,GAAD,OAAWA,EAAMK,WACrCsF,mBACA/B,EAAqCqD,EAArCrD,iCACAmB,EAAanB,EAAbmB,SACFuC,EAAWC,eAEjB,OACE,qCACE,gBAAC,IAAD,CACEyC,OAAQ,aACRC,OACErG,EAAiCP,gBACjCP,GAJJ,UAOE,eAAC,IAAD,CACEkH,OAAQ,WACN1C,EAASjD,GAAiB,KAC1BiD,EACEtC,GAA+C,CAAErE,OAAQ,MAE3D2G,EAASnD,GAAiB3C,KAN9B,+BAWA,gBAAC,IAAD,WAC6B,IAA1BuD,EAAS5G,MAAMiN,QACd,qCACGrG,EAAS5G,MAAMwI,KAAI,SAACgH,EAAMtC,GACzB,OACE,gBAAC,IAAMnB,SAAP,WACE,eAAC,IAAD,CAAMpB,UAAU,MAAhB,SACE,gBAAC,IAAD,WACE,gBAAC,IAAD,CAAWwC,IAAI,KAAf,kBAA0BD,EAAQ,KAClC,eAAC,IAAD,CAAcvC,UAAU,kBAAkBwC,IAAI,KAA9C,SACGqC,EAAKvP,QAER,eAAC,IAAD,UAAWuP,EAAKlJ,eAGnB4G,IAAUtG,EAAS5G,MAAMiN,OAAS,GACjC,sBACEc,MAAO,CACLC,MAAO,OACPI,QAAS,OACTiC,cAAe,MACfU,WAAY,SACZP,eAAgB,UANpB,SASE,eAAC,KAAD,CAAiBnD,KAAMwD,WApBR3D,QA4BF,IAA1BtG,EAAS5G,MAAMiN,QAAgB,wDAElC,gBAAC,IAAD,WACE,eAAC,IAAD,CACEN,MAAM,UACNC,QAAS,WACPzD,EACE9B,GAAe,CACbhH,MAAOuG,EACPY,wBAGJ2B,EACEtC,GAA+C,CAC7CrE,OAAQ,MAGZ2G,EAASnD,GAAiB3C,KAd9B,qBAkBU,IACV,eAAC,IAAD,CACEuJ,QAAS,WACPzD,EAASjD,GAAiB,KAC1BiD,EACEtC,GAA+C,CAAErE,OAAQ,MAE3D2G,EAASnD,GAAiB3C,KAN9B,4BC/FK,SAAS2N,KACtB,IACQvL,EADKyD,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QAClCrD,iCAER,OACE,uCACGA,EAAiCP,gBAChCT,IAAyB,eAAC,GAAD,IAC1BgB,EAAiCP,gBAChCR,IAAgC,eAAC0L,GAAD,IACjC3K,EAAiCP,gBAChCP,IAA2B,eAACmM,GAAD,OCFpB,SAASG,KACtB,IAAMnI,EAAOI,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QAElCrB,EADQyB,cAAY,SAACrH,GAAD,OAAWA,EAAMK,WACrCuF,OACA/B,EAAqCoD,EAArCpD,iCACFyD,EAAWC,eALkB,EAMa0B,mBAAS,IANtB,oBAM5BvK,EAN4B,KAMV2Q,EANU,KA0BnC,OACE,qCACE,gBAAC,IAAD,CACErF,OAAQ,aACRC,OACEpG,EAAiCR,gBACjCf,GAJJ,UAOE,eAAC,IAAD,CACE0H,OAAQ,WACN1C,EAASjD,GAAiB,KAC1BiD,EACErC,GAA+C,CAAEtE,OAAQ,MAE3D2G,EAASnD,GAAiB3C,KAN9B,2BAWA,gBAAC,IAAD,WACqB,IAAlBoE,EAAOwF,QACNxF,EAAOe,KAAI,YAAyB,IAAtBhJ,EAAqB,EAArBA,QAASS,EAAY,EAAZA,MACrB,OACE,gBAAC,IAAD,CAAWsM,OAAK,EAACC,QAAM,EAAvB,UACE,eAAC,IAAD,CACEvG,KAAK,WACLwG,QAASlM,EAAiB6H,MAAK,SAAC6D,GAAD,OAAQA,IAAOzM,KAC9C6M,SAAU,YA9CH,SAAC7M,GACxB,GAAIe,EAAiB6H,MAAK,SAAC6D,GAAD,OAAQA,IAAOzM,KAAU,CACjD,IAAI2R,EACJA,EAAc5Q,EAAiB+K,QAAO,SAACW,GACrC,OAAOA,IAAOzM,KAEhB0R,GAAoB,SAACxF,GACnB,OAAOyF,SAEJ,CACL,IAAIA,EAAc5Q,EAClB4Q,EAAYC,KAAK5R,GACjB0R,GAAoB,SAACxF,GACnB,OAAOyF,MAkCOE,CAAiB7R,MAGrB,eAAC,IAAD,CAAO+M,OAAK,EAAZ,SAActM,MARaT,MAYhB,IAAlBiI,EAAOwF,QAAgB,uDAE1B,gBAAC,IAAD,WACE,eAAC,IAAD,CACEN,MAAM,UACNC,QAAS,WACPzD,EACErC,GAA+C,CAC7CtE,OAAQ4B,GACRzE,KAAM,CACJY,iBAAkBA,OAP5B,qBAcU,IACV,eAAC,IAAD,CACEqM,QAAS,WACPzD,EAASjD,GAAiB,KAC1BiD,EACErC,GAA+C,CAAEtE,OAAQ,MAE3D2G,EAASnD,GAAiB3C,KAN9B,4BC/EK,SAASiO,KACtB,IAEQnS,EAFK+J,cAAY,SAACrH,GAAD,OAAWA,EAAMI,QAClCV,eACApC,UACF2J,EAAOI,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QACpC5G,EAAUgH,cAAY,SAACrH,GAAD,OAAWA,EAAMK,WACrCuF,EAA+BvF,EAA/BuF,OAAQD,EAAuBtF,EAAvBsF,mBACR9B,EAAqCoD,EAArCpD,iCACAnF,EAAqBmF,EAArBnF,iBACFgR,EAAkB,GAClBpI,EAAWC,eAOjB,OANA3B,EAAO2C,SAAQ,SAAC/J,GACVE,EAAiBiR,SAASnR,EAAMb,WAClC+R,EAAgBlR,EAAMb,SAAWa,MAKnC,qCACE,gBAAC,IAAD,CACEwL,OAAQ,aACRC,OACEpG,EAAiCR,gBACjCd,GAJJ,UAOE,eAAC,IAAD,CACEyH,OAAQ,WACN1C,EAASjD,GAAiB,KAC1BiD,EACErC,GAA+C,CAAEtE,OAAQ,MAE3D2G,EAASnD,GAAiB3C,KAN9B,sCAWA,eAAC,IAAD,UAC2C,IAAxC+H,OAAOC,KAAKkG,GAAiBtE,QAC5B7B,OAAOC,KAAKkG,GAAiB/I,KAAI,SAACsE,GAChC,OACE,eAAC,IAAD,CAAgBnC,UAAU,OAA1B,SACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAWwC,IAAI,KAAf,SAAqBoE,EAAgBzE,GAAK7M,QAC1C,gBAAC,IAAD,CAAc0K,UAAU,kBAAkBwC,IAAI,KAA9C,+BACqBoE,EAAgBzE,GAAK9M,MAAMiN,cAJzCH,QAWnB,gBAAC,IAAD,WACE,eAAC,IAAD,CACEH,MAAM,UACNC,QAAS,WAEPzD,EACE7B,GAAgB,CACd/G,mBACApB,YACAqI,wBAGJ2B,EACErC,GAA+C,CAC7CtE,OAAQ,MAGZ2G,EAASnD,GAAiB3C,KAhB9B,qBAoBU,IACV,eAAC,IAAD,CACEuJ,QAAS,WACPzD,EAASjD,GAAiB,KAC1BiD,EACErC,GAA+C,CAAEtE,OAAQ,MAE3D2G,EAASnD,GAAiB3C,KAN9B,4BCvFK,SAASoO,KACtB,IACQ/L,EADKwD,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QAClCpD,iCAER,OACE,uCACGA,EAAiCR,gBAChCf,IAAyB,eAAC8M,GAAD,IAC1BvL,EAAiCR,gBAChCd,IAA2B,eAACkN,GAAD,OCQpB,SAASI,KACtB,IAAM5I,EAAOI,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QACpCK,EAAWC,eACTtE,EAAegE,EAAfhE,WAHgC,EAIIgG,mBAC1CM,OAAOC,KAAK/I,GAA8B,IALJ,oBAIjCqP,EAJiC,KAIjBC,EAJiB,KAYxC,OACE,uCACE,gBAAC,IAAD,CACE/F,OAAQ,aACRC,OAAQhH,IAAevB,EAFzB,UAIE,eAAC,IAAD,CACEsI,OAAQ,WACN1C,EAASjD,GAAiB,KAC1BiD,EAASnD,GAAiB3C,KAH9B,gCAQA,eAAC,IAAD,UACE,eAAC,IAAD,CAAUwI,OAAQ,aAAlB,SACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAOG,IAAI,gBAAX,8BACA,eAAC,IAAD,CACE/F,KAAK,SACL5E,KAAK,SACL4K,GAAG,gBACHK,MAAOqF,EACPtF,SA3BY,SAAC/C,GACzBsI,EAAkBtI,EAAE9C,OAAO8F,QAqBjB,SAOGlB,OAAOC,KAAK/I,GAA8BkG,KAAI,SAACsE,GAC9C,OACE,yBAEER,MAAOhK,EAA6BwK,GAAKtK,OAF3C,SAIGF,EAA6BwK,GAAK7M,OAH9BqC,EAA6BwK,GAAKtK,oBAWrD,gBAAC,IAAD,WACE,eAAC,IAAD,CACEmK,MAAM,UACNC,QAAS,WACPzD,EAASjD,GAAiB,KAC1BiD,EAAShD,GAA4B,CAAE3D,OAAQmP,MAJnD,qBAQU,IACV,eAAC,IAAD,CACE/E,QAAS,WACPzD,EAASjD,GAAiB,KAC1BiD,EAASnD,GAAiB3C,KAH9B,0BAWJ,eAACkK,GAAD,IACA,eAACwB,GAAD,IACA,eAACoB,GAAD,IACA,eAACa,GAAD,IACA,eAACS,GAAD,OC7FS,SAASI,GAAT,GAAwC,IAAnB5R,EAAkB,EAAlBA,MAAOT,EAAW,EAAXA,QACnC2J,EAAWC,eAOjB,OACE,sBAAKwD,QANY,SAACtD,GAClBH,EAASjB,GAAsB1I,IAC/B2J,EAASd,IAAsB,KAI/B,SACE,eAAC,IAAD,UACE,eAAC,IAAD,UACE,wBAAMsC,UAAU,kBAAhB,UACE,eAAC,KAAD,CAAiB0C,KAAMyE,KAAcnH,UAAU,mBAC9C1K,WCGE,SAAS8R,KACtB,IAAMjJ,EAAOI,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QACpC7G,EAAOiH,cAAY,SAACrH,GAAD,OAAWA,EAAMI,QACpCkH,EAAWC,eACT7H,EAAmBU,EAAnBV,eACA3C,EAAyB2C,EAAzB3C,aAAcJ,EAAW+C,EAAX/C,OACdoH,EAAoBkD,EAApBlD,gBAN2B,EAOKkF,mBAAS1H,GAPd,oBAO5B4O,EAP4B,KAOdC,EAPc,OAQLnH,mBAAS,IARJ,oBAQ5BoH,EAR4B,KAQnBC,EARmB,OASHrH,mBAASlM,GATN,oBAS5BkH,EAT4B,KASlBsM,EATkB,KA+CnC,OAFA7H,qBAAU,cAAU,CAACyH,IAGnB,qCACE,gBAAC,IAAD,CACEnG,OAAQ,aACRC,OAAQlG,EAAgBV,gBAAkBb,GAF5C,UAIE,eAAC,IAAD,CACEwH,OAAQ,WACN1C,EAASjD,GAAiB,KAC1BiD,EACEpC,GAA8B,CAC5BvE,OAAQ,MAGZ2G,EAASnD,GAAiB3C,KAR9B,mCAaA,gBAAC,IAAD,WAEE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAO2I,IAAI,OAAX,yBACA,eAAC,IAAD,CACEC,GAAG,OACH5K,KAAK,OACL4E,KAAK,SACLqG,MAAO0F,EACP3F,SAhEc,SAAC/C,GACzBA,EAAEsE,UACFqE,GAAgB,SAACvG,GAAD,OAASpC,EAAE9C,OAAO8F,UAyD1B,SAOGxG,GACCsF,OAAOC,KAAKvF,GAAU0C,KAAI,SAAC6J,GACzB,OAAO,kCAAuBA,GAAVA,WAK5B,4DACA,gBAAC,IAAD,WACGvM,GACmC,IAAlCA,EAASkM,GAAc/E,QACvBnH,EAASkM,GAAcxJ,KAAI,SAACvG,GAC1B,OACE,eAAC,IAAM8J,SAAP,UACE,gBAAC,IAAD,CACEgC,MAAO,CAAEK,QAAS,OAAQiC,cAAe,OAD3C,UAGE,uBAAMtC,MAAO,CAAEwC,KAAM,KAArB,SAA6BtO,IAE5BA,EAAO,KAAOzD,EAAS,IACtB,eAAC,IAAD,CACEmO,MAAM,SACNhC,UAAU,sBACViC,QAAS,kBArEP,SAAC3K,GACzB,IAAMqQ,EAAmB,2BACpBxM,GADoB,kBAEtBkM,EAFsB,YAGlBlM,EAASkM,GAAc1G,QACxB,SAACiH,GAAD,OAAwBA,IAAuBtQ,QAKrDmQ,GAAY,SAAC1G,GAAD,OAAS4G,KACrB5E,QAAQC,IAAI2E,GA0DyBE,CAAkBvQ,IAHnC,oBAQDA,EAAO,KAAOzD,EAAS,IACtB,eAAC,IAAD,CAAOmO,MAAM,UAAUC,QAAS,aAAhC,+BAhBe3K,MAwB1B6D,GAA8C,IAAlCA,EAASkM,GAAc/E,QAClC,sDAGJ,gBAAC,IAAD,CAAWtC,UAAU,OAArB,UACE,eAAC,IAAD,CAAOqB,IAAI,UAAX,0BACA,gBAAC,IAAD,WACE,eAAC,IAAD,CACEC,GAAG,UACHK,MAAO4F,EACP7Q,KAAK,UACLgL,SA7Ge,SAAC/C,GAC5BA,EAAEsE,UACFuE,GAAW,SAACzG,GAAD,OAASpC,EAAE9C,OAAO8F,UA4GjBJ,YAAY,oBACZjG,KAAK,SAEP,eAAC,IAAD,CAAQ0G,MAAM,UAAUC,QA5GP,SAACtD,GAC5BA,EAAEsE,UACF,IAAM0E,EAAmB,2BACpBxM,GADoB,kBAEtBkM,EAFsB,sBAEHlM,EAASkM,IAFN,CAEqBE,MAG9CE,GAAY,SAAC1G,GAAD,OAAS4G,MAqGX,+BAMN,gBAAC,IAAD,WACE,eAAC,IAAD,CACE3F,MAAM,UACNC,QAAS,WACPzD,EACEpC,GAA8B,CAC5BvE,OAAQ8B,GACR3E,KAAM,CACJkG,SAAUjH,EACVkH,gBARV,qBAeU,IACV,eAAC,IAAD,CACE8G,QAAS,WACPzD,EAASjD,GAAiB,KAC1BiD,EACEpC,GAA8B,CAC5BvE,OAAQ,MAGZ2G,EAASnD,GAAiB3C,KAR9B,4BCvKK,SAASoP,KACtB,IAAM3J,EAAOI,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QACpC7G,EAAOiH,cAAY,SAACrH,GAAD,OAAWA,EAAMI,QAElCuF,EADQ0B,cAAY,SAACrH,GAAD,OAAWA,EAAMK,WACrCsF,mBACAjG,EAAgCU,EAAhCV,eAAgBC,EAAgBS,EAAhBT,YAChBrC,EAAcoC,EAAdpC,UACAX,EAAWgD,EAAXhD,OACF2K,EAAWC,eACTxD,EAAoBkD,EAApBlD,gBACAE,EAAaF,EAAbE,SAER,OACE,qCACE,gBAAC,IAAD,CACE+F,OAAQ,aACRC,OAAQlG,EAAgBV,gBAAkBZ,GAF5C,UAIE,eAAC,IAAD,CACEuH,OAAQ,WACN1C,EAASjD,GAAiB,KAC1BiD,EACEpC,GAA8B,CAC5BvE,OAAQ,MAGZ2G,EAASnD,GAAiB3C,KAR9B,2BAaA,gBAAC,IAAD,WACE,eAAC,IAAD,CACEsJ,MAAM,UACNC,QAAS,WACPzD,EACEpI,EAAsB,CACpBvC,SACAW,YACAP,aAAckH,EACdpH,YAAa8I,KAGjB2B,EAASjD,GAAiB,KAC1BiD,EACEpC,GAA8B,CAC5BvE,OAAQ,OAdhB,iBAoBU,IACV,eAAC,IAAD,CACEoK,QAAS,WACPzD,EAASjD,GAAiB,KAC1BiD,EACEpC,GAA8B,CAC5BvE,OAAQ,MAGZ2G,EAASnD,GAAiB3C,KAR9B,4BC1DK,SAASqP,KACtB,IACQ9M,EADKsD,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QAClClD,gBAER,OACE,uCACGA,EAAgBV,gBAAkBb,IAAkB,eAAC0N,GAAD,IACpDnM,EAAgBV,gBAAkBZ,IAAoB,eAACmO,GAAD,OCS9C,SAASE,KACtB,IAAM1Q,EAAOiH,cAAY,SAACrH,GAAD,OAAWA,EAAMI,QACpC6G,EAAOI,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QAElCrB,EADQyB,cAAY,SAACrH,GAAD,OAAWA,EAAMK,WACrCuF,OACA1B,EAAyB+C,EAAzB/C,qBAEAnH,EADmBqD,EAAnBV,eACA3C,aAP2B,EAQOkM,mBAAS,GARhB,oBAQ5B8H,EAR4B,KAQbC,EARa,OASO/H,mBAAS,IAThB,oBAS5BnK,EAT4B,KASbmS,EATa,KAU7B3J,EAAWC,eAEjBmB,qBAAU,WACR,GAAsB,IAAlB9C,EAAOwF,OAAc,CACvB4F,GAAiB,SAACnH,GAAD,OAASjE,EAAO,GAAGjI,WACpC,IAAIuT,EAAmB,GACvBtL,EAAO2C,SAAQ,SAAC/J,GACd0S,EAAgB,2BACXA,GADW,mBAEZ1S,EAAMb,QAAUa,EAAMoI,oBAG5BqK,GAAiB,SAACpH,GAAD,OAASqH,QAE3B,CAACtL,IA8BJ,OACE,gBAAC,IAAD,CACEoE,OAAQ,aACRC,OAAQ/F,EAAqBb,gBAAkBX,GAFjD,UAIE,eAAC,IAAD,CACEsH,OAAQ,WACN1C,EAASjD,GAAiB,KAC1BiD,EAASnC,GAAmC,CAAExE,OAAQ,MACtD2G,EAASnD,GAAiB3C,KAJ9B,oCASA,gBAAC,IAAD,WACGoE,GAA4B,IAAlBA,EAAOwF,QAChB,gBAAC,IAAMlB,SAAP,WACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAOC,IAAI,gBAAX,0BACA,eAAC,IAAD,CACEC,GAAG,gBACH5K,KAAK,gBACL4E,KAAK,SACLqG,MAAOsG,EACPvG,SApDgB,SAAC/C,GAC7BA,EAAEsE,UACFiF,GAAkBvJ,EAAE9C,OAAO8F,QA6CjB,SAOG7E,EAAOe,KAAI,SAACnI,GACX,OACE,yBAA4BiM,MAAOjM,EAAMb,QAAzC,SACGa,EAAMJ,OADII,EAAMb,iBAO3B,gBAAC,IAAD,WACE,eAAC,IAAD,CAAOwM,IAAI,gBAAX,0BACA,wBACCpN,GACC+B,GACqC,IAArCyK,OAAOC,KAAKzM,GAAcqO,QACY,IAAtC7B,OAAOC,KAAK1K,GAAesM,QAC3B7B,OAAOC,KAAKzM,GAAc4J,KAAI,SAAC6J,GAC7B,OACE,eAAC,IAAD,CAAW9F,OAAK,EAACC,QAAM,EAAvB,SACG6F,IAAYjP,GACX,gBAAC,IAAM2I,SAAP,WACE,eAAC,IAAD,CACE9F,KAAK,WACLoG,SAAU,kBAxEL,SAACgG,GAE9B,GADA3E,QAAQC,IAAI0E,GACR1R,EAAciS,GAAepB,SAASa,GAAU,CAClD,IAAIW,EAAgB,YAAOrS,EAAciS,IACzCI,EAAmBrS,EAAciS,GAAetH,QAC9C,SAACC,GAAD,OAAUA,IAAS8G,KAErB,IAAMY,EAAuB,2BACxBtS,GADwB,kBAE1BiS,EAAgBI,IAEnBF,GAAiB,SAACpH,GAAD,OAASuH,SACrB,CACL,IAAID,EAAgB,YAAOrS,EAAciS,IACzCI,EAAiB5B,KAAKiB,GACtB,IAAMY,EAAuB,2BACxBtS,GADwB,kBAE1BiS,EAAgBI,IAEnBF,GAAiB,SAACpH,GAAD,OAASuH,MAqDYC,CAAuBb,IACvC5F,QAAS9L,EAAciS,GAAepB,SACpCa,KAGJ,eAAC,IAAD,CAAO9F,OAAK,EAAZ,SAAc8F,QAVSA,YAmBxC5K,GAA4B,IAAlBA,EAAOwF,QAAgB,sDAEpC,gBAAC,IAAD,WACE,eAAC,IAAD,CACEN,MAAM,UACNC,QAAS,WACPzD,EACEnC,GAAmC,CACjCxE,OAAQgC,GACR7E,KAAM,CACJgB,qBAPV,oBAcU,IACV,eAAC,IAAD,CACEiM,QAAS,WACPzD,EAASjD,GAAiB,KAC1BiD,EAASnC,GAAmC,CAAExE,OAAQ,MACtD2G,EAASnD,GAAiB3C,KAJ9B,0BClJO,SAAS8P,KACtB,IAAMlR,EAAOiH,cAAY,SAACrH,GAAD,OAAWA,EAAMI,QACpC6G,EAAOI,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QACpC5G,EAAUgH,cAAY,SAACrH,GAAD,OAAWA,EAAMK,WACrCnC,EAAmCmC,EAAnCnC,WAAYyH,EAAuBtF,EAAvBsF,mBAEZrI,EADmB8C,EAAnBV,eACApC,UACA4G,EAAyB+C,EAAzB/C,qBACApF,EAAkBoF,EAAlBpF,cACFwI,EAAWC,eAEjB,OACE,qCACE,gBAAC,IAAD,CACEyC,OAAQ,aACRC,OAAQ/F,EAAqBb,gBAAkBV,GAFjD,UAIE,eAAC,IAAD,CACEqH,OAAQ,WACN1C,EAASjD,GAAiB,KAC1BiD,EACEnC,GAAmC,CACjCxE,OAAQ,MAGZ2G,EAASnD,GAAiB3C,KAR9B,6BAaA,gBAAC,IAAD,WACE,eAAC,IAAD,CACEsJ,MAAM,UACNC,QAAS,WACPzD,EACEjC,GAAoB,CAClB/H,YACAY,aACAY,gBACAjC,YAAa8I,KAGjB2B,EAASjD,GAAiB,KAC1BiD,EACEnC,GAAmC,CACjCxE,OAAQ,OAdhB,iBAoBU,IACV,eAAC,IAAD,CACEoK,QAAS,WACPzD,EAASjD,GAAiB,KAC1BiD,EACEnC,GAAmC,CACjCxE,OAAQ,MAGZ2G,EAASnD,GAAiB3C,KAR9B,4BCtDK,SAAS+P,KACtB,IACQrN,EADKmD,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QAClC/C,qBACR,OACE,uCACGA,EAAqBb,gBAAkBX,IAAkB,eAACoO,GAAD,IACzD5M,EAAqBb,gBAAkBV,IACtC,eAAC2O,GAAD,OCEO,SAASE,KACtB,IAAMpR,EAAOiH,cAAY,SAACrH,GAAD,OAAWA,EAAMI,QACpC6G,EAAOI,cAAY,SAACrH,GAAD,OAAWA,EAAMiH,QACpC5G,EAAUgH,cAAY,SAACrH,GAAD,OAAWA,EAAMK,WACvCiH,EAAWC,eACTvE,EAAeiE,EAAfjE,WACAtD,EAAgCU,EAAhCV,eAAgBC,EAAgBS,EAAhBT,YAChB5C,EAAyB2C,EAAzB3C,aAAcJ,EAAW+C,EAAX/C,OACdK,EAAoC2C,EAApC3C,cAAeC,EAAqB0C,EAArB1C,iBACf2I,EAAWvF,EAAXuF,OAEF6L,EACJ1U,GAAgBA,EAAY,WAAa4S,SAAS3S,GAEpD,OACE,gBAAC,IAAMkN,SAAP,WACE,gBAAC,IAAD,CACEF,OAAQ,WAEF1C,EAASnD,GADbnB,IAAexB,EACeC,EACAD,KAEhCyI,OAAQjH,IAAexB,EANzB,UAQE,eAAC,IAAD,CAAgBsJ,MAAM,OAAtB,SACE,sBACE4G,IAAI,wDACJ5I,UAAU,mBACV6I,IAAI,aACJzF,MAAO,CAAEC,MAAO,OAAQyF,OAAQ,YAGpC,gBAAC,IAAD,CAAc1F,MAAO,CAAE2F,SAAU,SAAjC,UACGJ,GACEzU,KAAmBL,EAClB,eAAC,IAAD,CAAOmO,MAAM,SAAb,2BAEA,eAAC,IAAD,CAAOA,MAAM,UAAb,mBAGF,eAAC,IAAD,CAAOA,MAAM,UAAb,kBAEF,eAAC,IAAD,CAAcgH,QAAM,EAApB,0BAECL,GACCrQ,EAAiB,WAAauF,KAAI,YAAwB,IAArBvI,EAAoB,EAApBA,MAAOuC,EAAa,EAAbA,OAC1C,OACE,eAAC,IAAD,CAEEoK,QAAS,WACPzD,EAASjD,GAAiB1D,IAC1B2G,EAASnD,GAAiB1C,KAJ9B,SAOGrD,GANIA,OAWXqT,GACArQ,EAAiB,YAAcuF,KAAI,YAAwB,IAArBvI,EAAoB,EAApBA,MAAOuC,EAAa,EAAbA,OAC3C,OACE,eAAC,IAAD,CAEEoK,QAAS,WACPzD,EAASjD,GAAiB1D,IAC1B2G,EAASnD,GAAiB1C,KAJ9B,SAOGrD,GANIA,MAUM,IAAlBwH,EAAOwF,QACN,eAAC,IAAD,CAAc0G,QAAM,EAApB,8BAGDL,GACC7L,EAAOe,KAAI,SAACnI,GACV,OACE,eAAC,IAAD,UACE,eAACwR,GAAD,CAAW5R,MAAOI,EAAMJ,MAAOT,QAASa,EAAMb,WAD7Ba,EAAMb,aAM7B8T,GACA7L,EAAOe,KAAI,SAACnI,GACV,OC3GmC,SAC/CuT,EACA9U,GAEA,IAAI+U,GAAuB,EAO3B,OANA/U,EAAiBsL,SAAQ,SAACmB,GACpBqI,EAAWpC,SAASjG,KACtBsI,GAAuB,MAIpBA,EDiGOC,CACEzT,EAAMoI,eACN3J,GAIA,eAAC,IAAD,UACE,eAAC+S,GAAD,CAAW5R,MAAOI,EAAMJ,MAAOT,QAASa,EAAMb,WAD7Ba,EAAMb,SAKpB,cAMjB,eAACkS,GAAD,IACA,eAACgB,GAAD,IACA,eAACU,GAAD,O,sBExHS,SAASW,KACtB,IAAM5K,EAAWC,eAEjB,OACE,gBAAC,IAAD,CAAOyC,OAAQ,aAA0BC,QAAQ,EAAjD,UACE,eAAC,IAAD,CACED,OAAQ,WACN1C,EAASnB,IAAkB,IAC3BmB,EAASnD,GAAiB1C,KAH9B,8BAQA,gBAAC,IAAD,WACE,eAAC,IAAD,CACEqJ,MAAM,UACNC,QAAS,WACPzD,EAASnB,IAAkB,IAC3BmB,EAASnD,GAAiB3C,KAJ9B,8BAQU,IACV,gBAAC,IAAD,CACEuJ,QAAS,WACPzD,EAASnB,IAAkB,IAC3BmB,EAASnD,GAAiB1C,KAH9B,eAMK,aCnBE,SAAS0Q,GAAT,GASX,IARFxV,EAQC,EARDA,OAQC,IAPDE,mBAOC,MAPa,QAOb,EANDD,EAMC,EANDA,YACAF,EAKC,EALDA,SACAI,EAIC,EAJDA,QACAC,EAGC,EAHDA,aACAC,EAEC,EAFDA,cACAC,EACC,EADDA,iBAEMmD,EAAOiH,cAAY,SAACrH,GAAD,OAAWA,EAAMI,QACpCC,EAAUgH,cAAY,SAACrH,GAAD,OAAWA,EAAMK,WACrCV,EAAgCS,EAAhCT,YAAaD,EAAmBU,EAAnBV,eACbxB,EAAqDmC,EAArDnC,WAAY4H,EAAyCzF,EAAzCyF,aAAcC,EAA2B1F,EAA3B0F,aAAcE,EAAa5F,EAAb4F,SACxC3I,EAAcoC,EAAdpC,UACAqI,EAAwCtF,EAAxCsF,mBAAoBpI,EAAoB8C,EAApB9C,gBAN3B,EAO+C0L,mBAAS,GAPxD,oBAOMmJ,EAPN,KAOwBC,EAPxB,KAQK/K,EAAWC,eAEjBmB,qBAAU,WACRpB,EAASpB,GAAqBrJ,IAC9ByK,EACEjI,EAAoB,CAClB1C,SACAG,UACAJ,WACAE,cACA+I,qBACA5I,eACAC,gBACAC,sBAGkB,qBAAX0L,QAETrB,EAASlB,GAAoB,QAE9B,CACDzJ,EACAG,EACAJ,EACAE,EACA+I,EACA2B,EACAzK,EACAG,EACAD,EACAE,IAGFyL,qBAAU,WACR,GAAkB,KAAdpL,GAAmC,KAAfY,EAAmB,CACzCoJ,EACEhC,GAAgB,CACdhI,YACAY,aACArB,YAAa8I,KAKjB,IAAM2M,EAAkBC,aAAaC,QAAQ,YAC7C,GAAwB,SAApBF,GAAkD,OAApBA,EAA0B,CAC1D,IAAMG,EAAoBC,KAAKC,MAAML,GAAiBF,iBAChDQ,EAAaF,KAAKC,MAAML,GAAiB/U,gBAG/CsV,YAAW,WACTvL,EAASd,IAAsB,IAC/Bc,EAASjB,GAAsBuM,IAC/BP,GAAoB,SAACxI,GAAD,OAAU4I,EAAoB,QACjD,SAGN,CAACnV,EAAWY,EAAYyH,EAAoB2B,IAkE/C,OARAwL,aAAa,CACXC,QAAS,IACTC,OAZmB,SAACC,GACpB3L,EAASnB,IAAkB,KAY3B+M,SARqB,SAACD,KAStBE,SANqB,SAACF,KAOtBG,SAAU,MAIV,uCAEGnN,GAAY,eAACiM,GAAD,IACZvS,GAAeD,GAAkB,eAAC8R,GAAD,IAClC,eAAC,KAAD,CACE6B,SArEwB,SAACvV,GAC7B,GAAIgI,EAAc,CAChByM,aAAae,QACX,WACAZ,KAAKa,UAAU,CACbhW,kBACA6U,iBAAkBA,KALN,IASRvU,EAAiBC,EAAjBD,OAAQuG,EAAStG,EAATsG,KACZA,IAASoP,KAAOC,cAClBnM,EAASd,IAAsB,IACtB,CAACgN,KAAOE,WAAYF,KAAOG,kBAAkBhE,SAASvL,KAC3DA,IAASoP,KAAOG,iBAElBtB,GAAoB,SAACxI,GAAD,OAASuI,EAAmB,KAGhDC,GAAoB,SAACxI,GAAD,OAASuI,EAAmB,MAGhDvU,IAAW+V,KAAOC,WACpBvM,EACElC,GAAqB,CACnB9H,YACAC,kBACAZ,SACAgJ,wBAGJ0M,GAAoB,SAACxI,GAAD,OAAS,KAC7BvC,EAASd,IAAsB,IAC/B+L,aAAae,QAAQ,WAAY,OAE/BzV,IAAW+V,KAAOE,SAEpBxM,EAASd,IAAsB,MAiC/BuN,YAAY,EACZC,WA7Ba,aA8BbC,IAAKnO,EACLoO,mBAAmB,EACnBC,cAAc,EACdC,gBAAgB,EAChBC,iBAAiB,EACjBlW,MAAO4H,EACPuO,UAAWlC,EACXmC,OAAQ,CACNC,QAAS,CACPC,OAAQ,IACRC,aAAc,gB,OC3KX,SAASC,GAAT,GASX,IARFhY,EAQC,EARDA,OAQC,IAPDE,mBAOC,MAPa,QAOb,EANDD,EAMC,EANDA,YACAF,EAKC,EALDA,SACAI,EAIC,EAJDA,QACAC,EAGC,EAHDA,aACAC,EAEC,EAFDA,cACAC,EACC,EADDA,iBAEA,OACE,eAAC,KAAD,CAAU4J,MAAOA,GAAjB,SACE,eAACsL,GAAD,CACExV,OAAQA,EACRE,YAAaA,EACbD,YAAaA,EACbF,SAAUA,EACVI,QAASA,EACTC,aAAcA,EACdC,cAAeA,EACfC,iBAAkBA,MCpBX,SAAS2X,GAAT,GAAgC,IAAVvJ,EAAS,EAATA,MACnC,OACE,sBAAKjB,GAAG,cAAR,SACE,gBAAC,IAAD,WACE,eAAC,IAAD,CACEyK,GAAG,mBACH/L,UACY,IAAVuC,EAAc,+BAAiC,aAHnD,6BAQA,eAAC,IAAD,CACEwJ,GAAG,eACH/L,UACY,IAAVuC,EAAc,+BAAiC,aAHnD,yBAQA,eAAC,IAAD,CACEwJ,GAAG,mBACH/L,UACY,IAAVuC,EAAc,+BAAiC,aAHnD,8BAQA,eAAC,IAAD,CACEwJ,GAAG,iBACH/L,UACY,IAAVuC,EAAc,+BAAiC,aAHnD,gCC9BO,SAASyJ,GAAT,GAA2B,EAATzJ,MAC/B,OACE,yBCAW,SAAS0J,KACtB,OACE,uBAAK3K,GAAG,kBAAR,UACE,eAACwK,GAAD,CAAYvJ,MAAO,IACnB,eAAC,IAAD,CAAKa,MAAO,CAAEE,UAAW,SAAzB,SACE,eAAC,IAAD,CAAKtD,UAAU,UAAUoD,MAAO,CAAEK,QAAS,gBAA3C,SACE,eAAC,IAAD,CAAQzD,UAAU,mBAAlB,6BAGJ,eAAC,IAAD,CAAKA,UAAU,MAAMsB,GAAG,gBAAxB,SACE,eAAC,IAAD,UACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAWkB,IAAI,KAAf,mCACA,gBAAC,IAAD,CAAO+C,UAAQ,EAAf,UACE,iCACE,gCACE,qBAAIvF,UAAU,sBAAd,wBACA,qBAAIA,UAAU,sBAAd,qCAGA,qBAAIA,UAAU,sBAAd,8BAGJ,mCACE,gCACE,kDACA,qCACA,kDAEF,gCACE,+CACA,oCACA,kDAEF,gCACE,mDACA,oCACA,iEAQd,eAAC,IAAD,CAAKA,UAAU,MAAMsB,GAAG,mBAAxB,SACE,eAAC,IAAD,UACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAWkB,IAAI,KAAf,kCACA,gBAAC,IAAD,CAAO+C,UAAQ,EAAf,UACE,iCACE,gCACE,qBAAIvF,UAAU,sBAAd,wBACA,qBAAIA,UAAU,sBAAd,uBACA,qBAAIA,UAAU,sBAAd,qBACA,qBAAIA,UAAU,sBAAd,kBACA,qBAAIA,UAAU,sBAAd,sBACA,qBAAIA,UAAU,sBAAd,+BAGJ,iCACE,gCACE,kDACA,sDACA,sDACA,yCACA,8CACA,uEAQd,eAACgM,GAAD,OCpES,SAASE,KACtB,OACE,uBAAK5K,GAAG,cAAR,UACE,eAACwK,GAAD,CAAYvJ,MAAO,IACnB,eAAC,IAAD,CAAKa,MAAO,CAAEE,UAAW,SAAzB,SACE,eAAC,IAAD,CAAKtD,UAAU,UAAUoD,MAAO,CAAEK,QAAS,gBAA3C,SACE,eAAC,IAAD,CAAQzD,UAAU,mBAAlB,6BAGJ,gBAAC,IAAD,CAAKA,UAAU,MAAMsB,GAAG,oBAAxB,UACE,eAAC,IAAD,UACE,eAAC,IAAD,UACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAOD,IAAI,gBAAX,+BACA,gBAAC,IAAD,CAAOC,GAAG,gBAAgB5K,KAAK,SAAS4E,KAAK,SAA7C,UACE,yDACA,sDACA,mDACA,uDACA,qDACA,+DACA,gEACA,wDACA,+DACA,uDACA,wDACA,wDACA,6DAMV,eAAC,IAAD,UACE,eAAC,IAAD,UACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAO+F,IAAI,eAAX,8BACA,eAAC,IAAD,CACEC,GAAG,eACH5K,KAAK,SACLkN,UAAQ,EACRrC,YAAY,KACZjG,KAAK,uBAOjB,gBAAC,IAAD,CAAK0E,UAAU,MAAMsB,GAAG,iBAAxB,UACE,eAAC,IAAD,UACE,eAAC,IAAD,UACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAOD,IAAI,kBAAX,uBACA,eAAC,IAAD,CACEC,GAAG,kBACH5K,KAAK,WACL6K,YAAY,YACZjG,KAAK,kBAMf,eAAC,IAAD,UACE,eAAC,IAAD,UACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAO+F,IAAI,kBAAX,qBACA,eAAC,IAAD,CACEC,GAAG,kBACH5K,KAAK,WACL6K,YAAY,UACZjG,KAAK,kBAMf,eAAC,IAAD,UACE,eAAC,IAAD,UACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAO+F,IAAI,eAAX,wBACA,eAAC,IAAD,CACEC,GAAG,eACH5K,KAAK,SACL6K,YAAY,IACZjG,KAAK,uBAOjB,eAAC,IAAD,CAAK0E,UAAU,MAAMsB,GAAG,iBAAxB,SACE,eAAC,IAAD,UACE,eAAC,IAAD,UACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAOD,IAAI,cAAX,8BACA,eAAC,IAAD,CAAOC,GAAG,cAAc5K,KAAK,OAAO4E,KAAK,wBAMnD,eAAC0Q,GAAD,OC9GS,SAASG,KACtB,OACE,uBAAK7K,GAAG,gBAAR,UACE,eAACwK,GAAD,CAAYvJ,MAAO,IACnB,eAAC,IAAD,CAAKa,MAAO,CAAEE,UAAW,SAAzB,SACE,eAAC,IAAD,CAAKtD,UAAU,UAAUoD,MAAO,CAAEK,QAAS,gBAA3C,SACE,eAAC,IAAD,CAAQzD,UAAU,mBAAlB,6BAIJ,gBAAC,IAAD,CAAKA,UAAU,MAAMsB,GAAG,YAAxB,UACE,eAAC,IAAD,UACE,eAAC,IAAD,UACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAOD,IAAI,kBAAX,uBACA,eAAC,IAAD,CACEC,GAAG,kBACH5K,KAAK,WACL6K,YAAY,YACZjG,KAAK,kBAMf,eAAC,IAAD,UACE,eAAC,IAAD,UACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAO+F,IAAI,kBAAX,qBACA,eAAC,IAAD,CACEC,GAAG,kBACH5K,KAAK,WACL6K,YAAY,UACZjG,KAAK,kBAMf,eAAC,IAAD,UACE,eAAC,IAAD,UACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAO+F,IAAI,eAAX,wBACA,eAAC,IAAD,CACEC,GAAG,eACH5K,KAAK,SACL6K,YAAY,IACZjG,KAAK,uBAOjB,eAAC,IAAD,CAAK0E,UAAU,MAAMsB,GAAG,WAAxB,SACE,eAAC,IAAD,UACE,eAAC,IAAD,UACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAOD,IAAI,cAAX,8BACA,eAAC,IAAD,CAAOC,GAAG,cAAc5K,KAAK,OAAO4E,KAAK,wBAMnD,eAAC0Q,GAAD,OC/ES,SAASI,KACtB,OACE,uBAAK9K,GAAG,gBAAR,UACE,eAACwK,GAAD,CAAYvJ,MAAO,IACnB,eAAC,IAAD,CAAKvC,UAAU,MAAMsB,GAAG,gBAAxB,8BCIS,SAAS+K,KACtB,OACE,sBAAKrM,UAAU,kBAAf,SACE,gBAAC,IAAD,CAAWsM,OAAK,EAAhB,UACE,gBAAC,IAAD,CAAKhL,GAAG,mBAAR,UACE,eAAC,IAAD,UACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAWkB,IAAI,KAAKlB,GAAG,MAAvB,kBAGA,eAAC,IAAD,CAActB,UAAU,kBAAkBwC,IAAI,KAA9C,wCAGA,eAAC,IAAD,CAAQxC,UAAU,uBAAlB,6BAIN,eAAC,IAAD,UACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAWwC,IAAI,KAAf,+CAGA,eAAC,IAAD,CAAcxC,UAAU,kBAAkBwC,IAAI,KAA9C,0DAGA,eAAC,IAAD,CAAQxC,UAAU,uBAAlB,gCAKR,gBAAC,IAAD,CAAKA,UAAU,OAAf,UACE,eAAC,IAAD,UACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAWwC,IAAI,KAAf,+CAGA,eAAC,IAAD,CAAcxC,UAAU,kBAAkBwC,IAAI,KAA9C,mEAGA,eAAC,IAAD,CAAQxC,UAAU,uBAAlB,6BAIN,eAAC,IAAD,UACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAWwC,IAAI,KAAf,uCACA,eAAC,IAAD,CAAcxC,UAAU,kBAAkBwC,IAAI,KAA9C,2DAGA,eAAC,IAAD,CAAQxC,UAAU,uBAAlB,gCAKR,gBAAC,IAAD,CAAKA,UAAU,OAAf,UACE,eAAC,IAAD,UACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAWwC,IAAI,KAAf,sCACA,eAAC,IAAD,CAAcxC,UAAU,kBAAkBwC,IAAI,KAA9C,sGAIA,eAAC,IAAD,CAAQxC,UAAU,uBAAlB,6BAIN,eAAC,IAAD,UACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAWwC,IAAI,KAAf,6CACA,eAAC,IAAD,CAAcxC,UAAU,kBAAkBwC,IAAI,KAA9C,kGAIA,eAAC,IAAD,CAAQxC,UAAU,uBAAlB,gCAKR,gBAAC,IAAD,CAAKA,UAAU,OAAf,UACE,eAAC,IAAD,UACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAWwC,IAAI,KAAf,uDAGA,eAAC,IAAD,CAAcxC,UAAU,kBAAkBwC,IAAI,KAA9C,kGAIA,eAAC,IAAD,CAAQxC,UAAU,uBAAlB,6BAIN,eAAC,IAAD,UACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAWwC,IAAI,KAAf,kDAGA,eAAC,IAAD,CAAcxC,UAAU,kBAAkBwC,IAAI,KAA9C,kGAIA,eAAC,IAAD,CAAQxC,UAAU,uBAAlB,gCAKR,gBAAC,IAAD,CAAKA,UAAU,OAAf,UACE,eAAC,IAAD,UACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAWwC,IAAI,KAAf,sCACA,eAAC,IAAD,CAAcxC,UAAU,kBAAkBwC,IAAI,KAA9C,uHAIA,eAAC,IAAD,CAAQxC,UAAU,uBAAlB,6BAIN,eAAC,IAAD,UACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAWwC,IAAI,KAAf,wCACA,eAAC,IAAD,CAAcxC,UAAU,kBAAkBwC,IAAI,KAA9C,wIAIA,eAAC,IAAD,CAAQxC,UAAU,uBAAlB,qCCjEDuM,OA1Df,WACE,OACE,sBAAKvM,UAAU,MAAf,SACE,eAAC,IAAD,UACE,eAAC,IAAD,UACE,iCACE,gBAAC,IAAD,CAAQgC,MAAM,QAAQwK,OAAO,KAAKC,OAAK,EAAvC,UACE,eAAC,IAAD,CAAaC,KAAK,IAAlB,SACE,sBAAK9D,IAAK+D,EAAa9D,IAAI,SAAS7I,UAAU,oBAEhD,eAAC,IAAD,CAAeiC,QAAS,eACxB,gBAAC,IAAD,CAAU2K,QAAM,EAAhB,UACE,gBAAC,IAAD,CAAK5M,UAAU,UAAU4M,QAAM,EAA/B,UACE,eAAC,IAAD,CAASF,KAAK,IAAd,0BACA,eAAC,IAAD,CAASA,KAAK,IAAd,2BACA,eAAC,IAAD,UACE,eAAC,IAAD,CAASA,KAAK,mBAAd,+BAEF,eAAC,IAAD,CAASA,KAAK,IAAd,mCAEF,eAACb,GAAD,CACEhY,OAAQF,EAAOE,OACfE,YAAaJ,EAAOI,YACpBD,YAAaH,EAAOG,YACpBF,SAAUD,EAAOC,SACjBI,QAASL,EAAOK,QAChBC,aAAcN,EAAOM,aACrBC,cAAeP,EAAOO,cACtBC,iBAAkBR,EAAOQ,yBAI/B,eAAC,IAAD,CAAWmY,OAAK,EAACtM,UAAU,MAA3B,SACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAO6M,KAAK,IAAIC,OAAK,EAACC,UAAWd,KACjC,eAAC,IAAD,CACEY,KAAK,mBACLC,OAAK,EACLC,UAAWd,KAEb,eAAC,IAAD,CAAOY,KAAK,eAAeC,OAAK,EAACC,UAAWb,KAC5C,eAAC,IAAD,CAAOW,KAAK,mBAAmBC,OAAK,EAACC,UAAWZ,KAChD,eAAC,IAAD,CAAOU,KAAK,iBAAiBC,OAAK,EAACC,UAAWX,KAC9C,eAAC,IAAD,CAAOS,KAAK,iBAAiBC,OAAK,EAACC,UAAWX,KAC9C,eAAC,IAAD,CACES,KAAK,mBACLC,OAAK,EACLC,UAAWV,oBClE7BW,IAASC,OAAO,eAAC,GAAD,IAAS1N,SAAS2N,eAAe,U","file":"static/js/main.624c28ea.chunk.js","sourcesContent":["const CONFIG = {\n  fullName: 'Jeeva Kalaiselvam',\n  userId: '606275', //This represents the ADMIN USER FOR PROJECT WHEN ONBOARDING\n  projectName: 'Incedo Helpdesk',\n  environment: 'LOCAL',\n  emailId: 'jeeva.kalaiselvam@incedoinc.com',\n  projectRoles: ['ROLE_TYPE1', 'ROLE_TYPE2'],\n  currentUserId: '606275',\n  currentUserRoles: ['ROLE_TYPE1'],\n};\n\nexport default CONFIG;\n","export default __webpack_public_path__ + \"static/media/incedo.a6b3a180.webp\";","export const getBaseUrl = (env = 'LOCAL') => {\n  switch (env) {\n    case 'LOCAL':\n      return 'http://localhost:8000/api/v1/';\n    // return 'https://incedo-guide.herokuapp.com/api/v1/';\n    default:\n      return 'http://localhost:8000/api/v1/';\n  }\n};\n","import { getBaseUrl } from '../constants/urlConstants';\nimport axios from 'axios';\n\n//Mark Guide Complete\nexport const markGuideComplete = async ({\n  projectId,\n  selectedGuideId,\n  userId,\n  environment = 'LOCAL',\n}) => {\n  const url = `${getBaseUrl(environment)}audit/mark`;\n  const response = await axios.post(url, {\n    projectId,\n    guideId: selectedGuideId,\n    userId,\n  });\n  if (response.status === 200 || response.status === 201) {\n    return response.data;\n  } else {\n    throw new Error('Audit Mark Complete Failed');\n  }\n};\n\n//Add New Guide\nexport const addNewGuide = async ({\n  projectId = '',\n  identifier = '/',\n  steps = {},\n  title,\n  environment = 'LOCAL',\n  roleVisibilityList,\n}) => {\n  const url = `${getBaseUrl(environment)}guide/add`;\n  const response = await axios.post(url, {\n    projectId,\n    identifier,\n    steps,\n    title,\n    roleVisibilityList,\n  });\n  if (response.status === 200 || response.status === 201) {\n    return response.data;\n  } else {\n    throw new Error('Adding New Guide Failed');\n  }\n};\n\n//Find All Guides for a ProjectId and Identifier\nexport const getAllGuides = async ({\n  projectId,\n  identifier,\n  environment = 'LOCAL',\n}) => {\n  const url = `${getBaseUrl(environment)}guide/all`;\n  const response = await axios.post(url, {\n    projectId,\n    identifier,\n  });\n  if (response.status === 200 || response.status === 201) {\n    return response.data;\n  } else {\n    throw new Error('Getting All Guides Failed');\n  }\n};\n\n//Update Guide\nexport const updateGuide = async ({\n  guide,\n  projectId = '',\n  identifier = '/',\n  environment = 'LOCAL',\n}) => {\n  const url = `${getBaseUrl(environment)}guide/update`;\n  const response = await axios.post(url, {\n    guide,\n    projectId,\n    identifier,\n  });\n  if (response.status === 200 || response.status === 201) {\n    return response.data;\n  } else {\n    throw new Error('Updating Existing Guide Failed');\n  }\n};\n\n//Delete Guides\nexport const deleteGuides = async ({\n  guideIdsToDelete,\n  projectId = '',\n  identifier = '/',\n  environment = 'LOCAL',\n}) => {\n  const url = `${getBaseUrl(environment)}guide/delete`;\n  const response = await axios.post(url, {\n    guideIds: guideIdsToDelete,\n    projectId,\n    identifier,\n  });\n  if (response.status === 200 || response.status === 201) {\n    return response.data;\n  } else {\n    throw new Error('Deleting Existing Guide Failed');\n  }\n};\n\n//Update Project Roles\nexport const updateProjectRoles = async ({\n  userId,\n  projectId = '',\n  projectRoles,\n  environment = 'LOCAL',\n}) => {\n  const url = `${getBaseUrl(environment)}project/updateRoles`;\n  const response = await axios.post(url, {\n    userId,\n    projectId,\n    projectRoles,\n  });\n  if (response.status === 200 || response.status === 201) {\n    return response.data;\n  } else {\n    throw new Error('Updating Project Roles Failed');\n  }\n};\n\n//Update Guide Roles\nexport const updateGuideRoles = async ({\n  projectId,\n  identifier,\n  rolesInGuides,\n  environment = 'LOCAL',\n}) => {\n  const url = `${getBaseUrl(environment)}guide/updateRoles`;\n  const response = await axios.post(url, {\n    projectId,\n    identifier,\n    rolesInGuides,\n  });\n  if (response.status === 200 || response.status === 201) {\n    return response.data;\n  } else {\n    throw new Error('Updating Guide Roles Failed');\n  }\n};\n\nconst projectApi = {\n  addNewGuide,\n  getAllGuides,\n  markGuideComplete,\n  updateGuide,\n  deleteGuides,\n  updateProjectRoles,\n  updateGuideRoles,\n};\nexport default projectApi;\n","import { getBaseUrl } from '../constants/urlConstants';\nimport axios from 'axios';\n\n//Get User Details\nexport const fetchUserDetails = async ({\n  userId,\n  emailId,\n  fullName,\n  projectName,\n  environment,\n  projectRoles,\n  currentUserId,\n  currentUserRoles,\n}) => {\n  const url = `${getBaseUrl(environment)}user/info`;\n  const response = await axios.post(url, {\n    userId,\n    emailId,\n    fullName,\n    projectName: projectName.toUpperCase(),\n    projectRoles,\n    currentUserId,\n    currentUserRoles,\n  });\n  if (response.status === 200 || response.status === 201) {\n    return { ...response.data, currentUserId, currentUserRoles };\n  } else {\n    throw new Error('No User Data obtained');\n  }\n};\n\nconst userApi = { fetchUserDetails };\nexport default userApi;\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport projectApi from '../../api/projectApi';\nimport userApi from '../../api/userAPI';\n\nexport const apiUpdateProjectRoles = createAsyncThunk(\n  'project/updateProjectRoles',\n  async ({ projectId, userId, environment, projectRoles }, thunkAPI) => {\n    const response = projectApi.updateProjectRoles({\n      projectId,\n      userId,\n      projectRoles,\n      environment,\n    });\n    return response;\n  }\n);\n\nexport const apiFetchUserDetails = createAsyncThunk(\n  'users/fetchUserDetails',\n  async (\n    {\n      userId,\n      emailId,\n      fullName,\n      projectName,\n      environment,\n      projectRoles,\n      currentUserId,\n      currentUserRoles,\n    },\n    thunkAPI\n  ) => {\n    const response = userApi.fetchUserDetails({\n      userId,\n      emailId,\n      fullName,\n      projectName,\n      environment,\n      projectRoles,\n      currentUserId,\n      currentUserRoles,\n    });\n    return response;\n  }\n);\n\nconst initialState = {\n  projectDetails: {\n    projectId: '',\n    userId: '',\n    emailId: '',\n    fullName: '',\n  },\n  userDetails: {\n    userId: '',\n    projectId: '',\n    projectName: '',\n    userRole: '',\n  },\n};\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [apiFetchUserDetails.pending]: (state) => {\n      state.loading = true;\n    },\n    [apiFetchUserDetails.fulfilled]: (state, { payload }) => {\n      state.userDetails = {\n        ...payload.user,\n        currentUserId: payload.currentUserId,\n        currentUserRoles: payload.currentUserRoles,\n      };\n      state.projectDetails = payload.project;\n      state.loading = false;\n    },\n    [apiFetchUserDetails.rejected]: (state) => {\n      state.loading = false;\n    },\n    [apiUpdateProjectRoles.pending]: (state) => {\n      state.loading = true;\n    },\n    [apiUpdateProjectRoles.fulfilled]: (state, { payload }) => {\n      state.projectDetails.projectRoles = payload.project.projectRoles;\n      state.loading = true;\n    },\n    [apiUpdateProjectRoles.rejected]: (state) => {\n      state.loading = true;\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { setUserRole } = userSlice.actions;\n\nexport default userSlice.reducer;\n","export const CONFIGURE_GUIDE_MENU_OPTIONS = {\n  CG_OPTION_NEW: {\n    title: 'Add New Guide',\n    action: 'CG_OPTION_NEW',\n  },\n  CG_OPTION_ADD_STEP: {\n    title: 'Add Steps to Existing Guide',\n    action: 'CG_OPTION_ADD_STEP',\n  },\n  CG_OPTION_EDIT_STEP: {\n    title: 'Edit Steps of Existing Guide',\n    action: 'CG_OPTION_EDIT_STEP',\n  },\n  CG_OPTION_REORDER_STEP: {\n    title: 'Reorder Steps of Existing Guide',\n    action: 'CG_OPTION_REORDER_STEP',\n  },\n  CG_OPTION_DELETE_GUIDE: {\n    title: 'Delete Guides',\n    action: 'CG_OPTION_DELETE_GUIDE',\n  },\n};\n\n//Configure Guides Options\nexport const CG_OPTION_NEW = 'CG_OPTION_NEW';\nexport const CG_OPTION_ADD_STEP = 'CG_OPTION_ADD_STEP';\nexport const CG_OPTION_EDIT_STEP = 'CG_OPTION_EDIT_STEP';\nexport const CG_OPTION_REORDER_STEP = 'CG_OPTION_REORDER_STEP';\nexport const CG_OPTION_DELETE_GUIDE = 'CG_OPTION_DELETE_GUIDE';\n","export const CG_NEW_START = 'CG_NEW_START';\nexport const CG_NEW_DOM_SELECT = 'CG_NEW_DOM_SELECT';\nexport const CG_NEW_ADD_DETAILS = 'CG_NEW_ADD_DETAILS';\nexport const CG_NEW_CONFIRM_STEP = 'CG_NEW_CONFIRM_STEP';\n","export const MAIN_MENU_OPTIONS = {\n  ADMIN_USER: [\n    {\n      title: 'Setup Guides',\n      action: 'MENU_OPTION_CONFIGURE_GUIDES',\n    },\n    {\n      title: 'Setup Roles',\n      action: 'MENU_OPTION_SETUP_ROLES',\n    },\n    {\n      title: 'Setup Visibility',\n      action: 'MENU_OPTION_SETUP_VISIBILITY',\n    },\n  ],\n  NORMAL_USER: [\n    {\n      title: 'Provide Feedback',\n      action: 'MENU_OPTION_PROVIDE_FEEDBACK',\n    },\n  ],\n};\n\n//Menu Option Keys\nexport const ADMIN_USER = 'ADMIN_USER';\nexport const NORMAL_USER = 'NORMAL_USER';\n\n//Main Admin Role\nexport const MAIN_ADMIN = 'MAIN_ADMIN';\n\n//Menu Toggle Options\nexport const MENU_TOGGLE_OPEN = 'MENU_TOGGLE_OPEN';\nexport const MENU_TOGGLE_CLOSE = 'MENU_TOGGLE_CLOSE';\n","//Main Menu Actions\nexport const MENU_OPTION_CONFIGURE_GUIDES = 'MENU_OPTION_CONFIGURE_GUIDES';\nexport const MENU_OPTION_SETUP_ROLES = 'MENU_OPTION_SETUP_ROLES';\nexport const MENU_OPTION_SETUP_VISIBILITY = 'MENU_OPTION_SETUP_VISIBILITY';\n","export const CG_EDIT_STEP_START = 'CG_EDIT_STEP_START';\nexport const CG_EDIT_STEP_EDIT_DETAILS = 'CG_EDIT_STEP_EDIT_DETAILS';\nexport const CG_EDIT_STEP_EDIT_CONFIRM = 'CG_EDIT_STEP_EDIT_CONFIRM';\n","export const CG_ADD_STEP_START = 'CG_ADD_STEP_START';\nexport const CG_ADD_STEP_INSERTION_POINT = 'CG_ADD_STEP_INSERTION_POINT';\nexport const CG_ADD_STEP_PROMPT = 'CG_ADD_STEP_PROMPT';\nexport const CG_ADD_STEP_DOM_SELECT = 'CG_ADD_STEP_DOM_SELECT';\nexport const CG_ADD_STEP_ADD_DETAILS = 'CG_ADD_STEP_ADD_DETAILS';\nexport const CG_ADD_STEP_CONFIRM_STEPS = 'CG_ADD_STEP_CONFIRM_STEPS';\n","export const CG_DELETE_GUIDE_START = 'CG_DELETE_GUIDE_START';\nexport const CG_DELETE_GUIDE_CONFIRM = 'CG_DELETE_GUIDE_CONFIRM';\n","export const SR_SETUP_START = 'SR_SETUP_START';\nexport const SR_SETUP_CONFIRM = 'SR_SETUP_CONFIRM';\nexport const SR_SETUP_UPDATE = 'SR_SETUP_UPDATE';\n","export const GV_SETUP_START = 'GV_SETUP_START';\nexport const GV_SETUP_CONFIRM = 'GV_SETUP_CONFIRM';\nexport const GV_SETUP_UPDATE = 'GV_SETUP_UPDATE';\n","export const CG_REORDER_STEP_START = 'CG_REORDER_STEP_START';\nexport const CG_REORDER_STEP_CHANGE_ORDER = 'CG_REORDER_STEP_CHANGE_ORDER';\nexport const CG_REORDER_STEP_CONFIRM = 'CG_REORDER_STEP_CONFIRM';\n","import { createSlice } from '@reduxjs/toolkit';\nimport {\n  CG_OPTION_NEW,\n  CG_OPTION_ADD_STEP,\n  CG_OPTION_EDIT_STEP,\n  CG_OPTION_REORDER_STEP,\n  CG_OPTION_DELETE_GUIDE,\n} from '../../menuconstants/configureGuide';\nimport {\n  CG_NEW_ADD_DETAILS,\n  CG_NEW_CONFIRM_STEP,\n  CG_NEW_DOM_SELECT,\n  CG_NEW_START,\n} from '../../menuconstants/CG_New';\nimport {\n  MENU_TOGGLE_CLOSE,\n  MENU_TOGGLE_OPEN,\n} from '../../menuconstants/mainMenu';\nimport {\n  MENU_OPTION_CONFIGURE_GUIDES,\n  MENU_OPTION_SETUP_VISIBILITY,\n  MENU_OPTION_SETUP_ROLES,\n} from '../../menuconstants/menuOptions';\nimport {\n  CG_EDIT_STEP_EDIT_CONFIRM,\n  CG_EDIT_STEP_EDIT_DETAILS,\n  CG_EDIT_STEP_START,\n} from '../../menuconstants/CG_EditStep';\nimport {\n  CG_ADD_STEP_ADD_DETAILS,\n  CG_ADD_STEP_CONFIRM_STEPS,\n  CG_ADD_STEP_DOM_SELECT,\n  CG_ADD_STEP_INSERTION_POINT,\n  CG_ADD_STEP_PROMPT,\n  CG_ADD_STEP_START,\n} from '../../menuconstants/CG_AddStep';\nimport {\n  CG_DELETE_GUIDE_CONFIRM,\n  CG_DELETE_GUIDE_START,\n} from '../../menuconstants/CG_DeleteGuide';\nimport {\n  SR_SETUP_CONFIRM,\n  SR_SETUP_START,\n} from '../../menuconstants/setupRoles';\nimport {\n  GV_SETUP_CONFIRM,\n  GV_SETUP_START,\n} from '../../menuconstants/guideVisibility';\nimport {\n  CG_REORDER_STEP_CHANGE_ORDER,\n  CG_REORDER_STEP_CONFIRM,\n  CG_REORDER_STEP_START,\n} from '../../menuconstants/CG_ReorderStep';\n\nconst initialState = {\n  menuToggle: '',\n  menuOption: '',\n  configureGuidesOption: '',\n  setupRolesOption: '',\n  configureGuidesNewState: {\n    currentAction: '',\n    steps: [],\n    guideTitle: '',\n    currentDomTarget: '',\n    oldGuide: {},\n    roleVisibilityList: {},\n  },\n  configureGuidesAddStepsState: {\n    currentAction: '',\n    steps: [],\n    guideTitle: '',\n    currentDomTarget: '',\n    selectedGuideId: '',\n    insertionIndex: '',\n    oldGuide: {},\n    roleVisibilityList: {},\n  },\n  configureGuidesEditStepsState: {\n    currentAction: '',\n    steps: [],\n    guideTitle: '',\n    selectedGuideId: '',\n    oldGuide: {},\n  },\n  configureGuidesReorderStepsState: {\n    currentAction: '',\n    steps: [],\n    guideTitle: '',\n    selectedGuideId: '',\n    oldGuide: {},\n  },\n  configureGuidesDeleteGuidesState: {\n    currentAction: '',\n    oldGuides: [],\n    guideIdsToDelete: [],\n  },\n  setupRolesState: {\n    currentAction: '',\n    oldRoles: {},\n    newRoles: {},\n  },\n  guideVisibilityState: {\n    currentAction: '',\n    rolesInGuides: {},\n  },\n};\nexport const menuSlice = createSlice({\n  name: 'menu',\n  initialState,\n  reducers: {\n    actionMenuToggle: (state, { type, payload }) => {\n      switch (payload) {\n        case '':\n          state.menuToggle = '';\n          break;\n        case MENU_TOGGLE_OPEN:\n          state.menuToggle = MENU_TOGGLE_OPEN;\n          break;\n        case MENU_TOGGLE_CLOSE:\n          state.menuToggle = MENU_TOGGLE_CLOSE;\n          break;\n        default:\n          break;\n      }\n    },\n    actionMenuOption: (state, { payload }) => {\n      switch (payload) {\n        case '':\n          state.menuOption = '';\n          break;\n        case MENU_OPTION_CONFIGURE_GUIDES:\n          state.menuOption = MENU_OPTION_CONFIGURE_GUIDES;\n          break;\n        case MENU_OPTION_SETUP_ROLES:\n          state.menuOption = MENU_OPTION_SETUP_ROLES;\n          state.setupRolesState.currentAction = SR_SETUP_START;\n          break;\n        case MENU_OPTION_SETUP_VISIBILITY:\n          state.menuOption = MENU_OPTION_SETUP_VISIBILITY;\n          state.guideVisibilityState.currentAction = GV_SETUP_START;\n          break;\n        default:\n          break;\n      }\n    },\n    //Configure Guide Option Dropdown\n    actionConfigureGuidesOption: (state, { payload: { action, data } }) => {\n      switch (action) {\n        case '':\n          state.configureGuidesOption = '';\n          break;\n        case CG_OPTION_NEW:\n          state.configureGuidesOption = CG_OPTION_NEW;\n          state.configureGuidesNewState.currentAction = CG_NEW_START;\n          break;\n        case CG_OPTION_ADD_STEP:\n          state.configureGuidesOption = CG_OPTION_ADD_STEP;\n          state.configureGuidesAddStepsState.currentAction = CG_ADD_STEP_START;\n          break;\n        case CG_OPTION_EDIT_STEP:\n          state.configureGuidesOption = CG_OPTION_EDIT_STEP;\n          state.configureGuidesEditStepsState.currentAction =\n            CG_EDIT_STEP_START;\n          break;\n        case CG_OPTION_REORDER_STEP:\n          state.configureGuidesOption = CG_OPTION_REORDER_STEP;\n          state.configureGuidesReorderStepsState.currentAction =\n            CG_REORDER_STEP_START;\n          break;\n        case CG_OPTION_DELETE_GUIDE:\n          state.configureGuidesOption = CG_OPTION_DELETE_GUIDE;\n          state.configureGuidesDeleteGuidesState.currentAction =\n            CG_DELETE_GUIDE_START;\n          break;\n        default:\n          break;\n      }\n    },\n    //Configure Guide - Add New Guide Actions\n    actionConfigureGuidesNewCurrentAction: (\n      state,\n      { payload: { action, data } }\n    ) => {\n      switch (action) {\n        case '':\n          state.configureGuidesNewState.currentAction = '';\n          state.configureGuidesNewState.guideTitle = '';\n          state.configureGuidesNewState.currentDomTarget = '';\n          state.configureGuidesNewState.steps = [];\n          state.configureGuidesNewState.roleVisibilityList = [];\n          break;\n        case CG_NEW_START:\n          state.configureGuidesNewState.currentAction = CG_NEW_START;\n          break;\n        case CG_NEW_DOM_SELECT:\n          state.configureGuidesNewState.currentAction = CG_NEW_DOM_SELECT;\n          break;\n        case CG_NEW_ADD_DETAILS:\n          state.configureGuidesNewState.currentAction = CG_NEW_ADD_DETAILS;\n          state.configureGuidesNewState.currentDomTarget = data;\n          break;\n        case CG_NEW_CONFIRM_STEP:\n          state.configureGuidesNewState.currentAction = CG_NEW_CONFIRM_STEP;\n          state.configureGuidesNewState.roleVisibilityList =\n            data.roleVisibilityList;\n\n          state.configureGuidesNewState.guideTitle = data.guideTitle;\n          state.configureGuidesNewState.steps = [\n            ...state.configureGuidesNewState.steps,\n            {\n              title: data.stepName,\n              content: data.stepContent,\n              target: state.configureGuidesNewState.currentDomTarget,\n              disableBeacon: true,\n            },\n          ];\n          break;\n        default:\n          break;\n      }\n    },\n    //Configure Tour - Add Steps to Existing TOur\n    actionConfigureGuidesAddStepsCurrentAction: (\n      state,\n      { payload: { action, data } }\n    ) => {\n      switch (action) {\n        case '':\n          state.configureGuidesAddStepsState.currentAction = '';\n          state.configureGuidesAddStepsState.guideTitle = '';\n          state.configureGuidesAddStepsState.currentDomTarget = '';\n          state.configureGuidesAddStepsState.steps = [];\n          break;\n        case CG_ADD_STEP_START:\n          state.configureGuidesAddStepsState.currentAction = CG_ADD_STEP_START;\n\n          break;\n        case CG_ADD_STEP_INSERTION_POINT:\n          state.configureGuidesAddStepsState.currentAction =\n            CG_ADD_STEP_INSERTION_POINT;\n          state.configureGuidesAddStepsState.oldGuide = data.oldGuide;\n          state.configureGuidesAddStepsState.selectedGuideId = data.guideId;\n          break;\n        case CG_ADD_STEP_PROMPT:\n          state.configureGuidesAddStepsState.currentAction = CG_ADD_STEP_PROMPT;\n          state.configureGuidesAddStepsState.insertionIndex =\n            data.insertionIndex;\n          state.configureGuidesAddStepsState.guideTitle = data.title;\n          break;\n\n        case CG_ADD_STEP_DOM_SELECT:\n          state.configureGuidesAddStepsState.currentAction =\n            CG_ADD_STEP_DOM_SELECT;\n          break;\n\n        case CG_ADD_STEP_ADD_DETAILS:\n          state.configureGuidesAddStepsState.currentAction =\n            CG_ADD_STEP_ADD_DETAILS;\n          state.configureGuidesAddStepsState.currentDomTarget =\n            data.currentDomTarget;\n          break;\n        case CG_ADD_STEP_CONFIRM_STEPS:\n          state.configureGuidesAddStepsState.currentAction =\n            CG_ADD_STEP_CONFIRM_STEPS;\n          state.configureGuidesAddStepsState.steps = [\n            ...state.configureGuidesAddStepsState.steps,\n            {\n              title: data.stepName,\n              content: data.stepContent,\n              target: state.configureGuidesAddStepsState.currentDomTarget,\n              disableBeacon: true,\n            },\n          ];\n          break;\n\n        default:\n          break;\n      }\n    },\n    //Configure Tour - Edit Steps to Existing TOur\n    actionConfigureGuidesEditStepsCurrentAction: (\n      state,\n      { payload: { action, data } }\n    ) => {\n      switch (action) {\n        case '':\n          state.configureGuidesEditStepsState.currentAction = '';\n          state.configureGuidesEditStepsState.guideTitle = '';\n          state.configureGuidesEditStepsState.currentDomTarget = '';\n          state.configureGuidesEditStepsState.steps = [];\n          break;\n        case CG_EDIT_STEP_START:\n          state.configureGuidesEditStepsState.currentAction =\n            CG_EDIT_STEP_START;\n          break;\n\n        case CG_EDIT_STEP_EDIT_DETAILS:\n          state.configureGuidesEditStepsState.currentAction =\n            CG_EDIT_STEP_EDIT_DETAILS;\n          state.configureGuidesEditStepsState.selectedGuideId = data.guideId;\n          state.configureGuidesEditStepsState.oldGuide = data.oldGuide;\n          break;\n        case CG_EDIT_STEP_EDIT_CONFIRM:\n          state.configureGuidesEditStepsState.currentAction =\n            CG_EDIT_STEP_EDIT_CONFIRM;\n          state.configureGuidesEditStepsState.newGuide = data.newGuide;\n          break;\n\n        default:\n          break;\n      }\n    },\n    //Configure Tour - Reorder Steps to Existing TOur\n    actionConfigureGuidesReorderStepsCurrentAction: (\n      state,\n      { payload: { action, data } }\n    ) => {\n      switch (action) {\n        case '':\n          state.configureGuidesReorderStepsState.currentAction = '';\n          state.configureGuidesReorderStepsState.guideTitle = '';\n          state.configureGuidesReorderStepsState.currentDomTarget = '';\n          state.configureGuidesReorderStepsState.steps = [];\n          break;\n        case CG_REORDER_STEP_START:\n          state.configureGuidesReorderStepsState.currentAction =\n            CG_REORDER_STEP_START;\n          break;\n        case CG_REORDER_STEP_CHANGE_ORDER:\n          state.configureGuidesReorderStepsState.currentAction =\n            CG_REORDER_STEP_CHANGE_ORDER;\n          state.configureGuidesReorderStepsState.guideId = data.guideId;\n          state.configureGuidesReorderStepsState.oldGuide = data.oldGuide;\n          break;\n        case CG_REORDER_STEP_CONFIRM:\n          state.configureGuidesReorderStepsState.currentAction =\n            CG_REORDER_STEP_CONFIRM;\n          state.configureGuidesReorderStepsState.newGuide = data.newGuide;\n          break;\n\n        default:\n          break;\n      }\n    },\n    //Configure Tour - Delete Guides\n    actionConfigureGuidesDeleteGuidesCurrentAction: (\n      state,\n      { payload: { action, data } }\n    ) => {\n      switch (action) {\n        case '':\n          state.configureGuidesDeleteGuidesState.currentAction = '';\n          state.configureGuidesDeleteGuidesState.guideTitle = '';\n          state.configureGuidesDeleteGuidesState.currentDomTarget = '';\n          state.configureGuidesDeleteGuidesState.steps = [];\n          break;\n        case CG_DELETE_GUIDE_START:\n          state.configureGuidesDeleteGuidesState.currentAction =\n            CG_DELETE_GUIDE_START;\n          break;\n        case CG_DELETE_GUIDE_CONFIRM:\n          state.configureGuidesDeleteGuidesState.currentAction =\n            CG_DELETE_GUIDE_CONFIRM;\n          state.configureGuidesDeleteGuidesState.guideIdsToDelete =\n            data.guideIdsToDelete;\n          break;\n        default:\n          break;\n      }\n    },\n    //Setup Roles State\n    actionSetupRolesCurrentAction: (state, { payload: { action, data } }) => {\n      switch (action) {\n        case '':\n          state.setupRolesState.currentAction = '';\n          state.setupRolesState.oldRoles = {};\n          state.setupRolesState.newRoles = {};\n          break;\n        case SR_SETUP_START:\n          state.setupRolesState.currentAction = SR_SETUP_START;\n          break;\n        case SR_SETUP_CONFIRM:\n          state.setupRolesState.currentAction = SR_SETUP_CONFIRM;\n          state.setupRolesState.oldRoles = data.oldRoles;\n          state.setupRolesState.newRoles = data.newRoles;\n          break;\n        default:\n          break;\n      }\n    },\n    //Setup Guide Visibility\n    actionGuideVisibilityCurrentAction: (\n      state,\n      { payload: { action, data } }\n    ) => {\n      switch (action) {\n        case '':\n          state.guideVisibilityState.currentAction = '';\n          break;\n        case GV_SETUP_START:\n          state.guideVisibilityState.currentAction = GV_SETUP_START;\n          break;\n        case GV_SETUP_CONFIRM:\n          state.guideVisibilityState.currentAction = GV_SETUP_CONFIRM;\n          state.guideVisibilityState.rolesInGuides = data.rolesInGuides;\n          break;\n        default:\n          break;\n      }\n    },\n  },\n  extraReducers: {},\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  actionMenuToggle,\n  actionMenuOption,\n  actionConfigureGuidesOption,\n  actionConfigureGuidesNewCurrentAction,\n  actionConfigureGuidesAddStepsCurrentAction,\n  actionConfigureGuidesEditStepsCurrentAction,\n  actionConfigureGuidesReorderStepsCurrentAction,\n  actionConfigureGuidesDeleteGuidesCurrentAction,\n  actionSetupRolesCurrentAction,\n  actionGuideVisibilityCurrentAction,\n} = menuSlice.actions;\n\nexport default menuSlice.reducer;\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport projectApi from '../../api/projectApi';\n\nexport const apiMarkGuideComplete = createAsyncThunk(\n  'project/markGuideComplete',\n  async ({ projectId, userId, selectedGuideId, environment }, thunkAPI) => {\n    const response = projectApi.markGuideComplete({\n      projectId,\n      userId,\n      selectedGuideId,\n      environment,\n    });\n    return response;\n  }\n);\n\nexport const apiUpdateGuideRoles = createAsyncThunk(\n  'project/updateGuideRoles',\n  async ({ projectId, identifier, environment, rolesInGuides }, thunkAPI) => {\n    const response = projectApi.updateGuideRoles({\n      projectId,\n      identifier,\n      environment,\n      rolesInGuides,\n    });\n    return response;\n  }\n);\n\nexport const apiGetAllGuides = createAsyncThunk(\n  'project/getAllGuides',\n  async ({ projectId, identifier, environment }, thunkAPI) => {\n    const response = projectApi.getAllGuides({\n      projectId,\n      identifier,\n      environment,\n    });\n    return response;\n  }\n);\n\nexport const apiAddNewGuide = createAsyncThunk(\n  'project/addNewGuide',\n  async (\n    { projectId, identifier, steps, title, environment, roleVisibilityList },\n    thunkAPI\n  ) => {\n    const response = projectApi.addNewGuide({\n      projectId,\n      identifier,\n      steps,\n      title,\n      environment,\n      roleVisibilityList,\n    });\n    return response;\n  }\n);\n\nexport const apiUpdateGuide = createAsyncThunk(\n  'project/updateGuide',\n  async ({ guide, environment }, thunkAPI) => {\n    const response = projectApi.updateGuide({\n      guide,\n      environment,\n    });\n    return response;\n  }\n);\n\nexport const apiDeleteGuides = createAsyncThunk(\n  'project/deleteGuides',\n  async ({ guideIdsToDelete, projectId, environment }, thunkAPI) => {\n    const response = projectApi.deleteGuides({\n      guideIdsToDelete,\n      projectId,\n      environment,\n    });\n    return response;\n  }\n);\n\nconst initialState = {\n  currentEnvironment: 'LOCAL',\n  identifier: '',\n  guides: [],\n  completedGuides: [],\n  selectedGuideId: '',\n  joyrideStart: false,\n  joyrideSteps: [],\n  joyrideCurrentIndex: 0,\n  loading: false,\n  projectRoles: {},\n  userIdle: false,\n};\nexport const projectSlicer = createSlice({\n  name: 'project',\n  initialState,\n  reducers: {\n    actionSetEnvironment: (state, { payload }) => {\n      state.currentEnvironment = payload;\n    },\n    actionSetUserIdle: (state, { payload }) => {\n      state.userIdle = payload;\n    },\n    actionSetIdentifier: (state, { payload }) => {\n      state.identifier = payload;\n    },\n    actionSetJoyrideSteps: (state, { payload }) => {\n      state.selectedGuideId = payload;\n      const selectedGuide = state.guides.find(\n        (guide) => guide.guideId === payload\n      );\n      if (!selectedGuide) {\n        state.joyrideSteps = [];\n      } else {\n        state.joyrideSteps = selectedGuide.steps;\n      }\n    },\n    actionSetJoyrideStart: (state, { payload }) => {\n      state.joyrideStart = payload;\n    },\n    actionSetJoyrideIndex: (state, { payload }) => {\n      state.joyrideCurrentIndex = payload;\n    },\n  },\n  extraReducers: {\n    [apiAddNewGuide.pending]: (state) => {\n      state.loading = true;\n    },\n    [apiAddNewGuide.fulfilled]: (state, { payload }) => {\n      state.guides = payload.guides;\n      state.loading = false;\n    },\n    [apiAddNewGuide.rejected]: (state) => {\n      state.loading = false;\n    },\n    [apiGetAllGuides.pending]: (state) => {\n      state.loading = true;\n    },\n    [apiGetAllGuides.fulfilled]: (state, { payload }) => {\n      state.guides = payload.guides;\n      state.loading = false;\n    },\n    [apiGetAllGuides.rejected]: (state) => {\n      state.loading = false;\n    },\n    [apiMarkGuideComplete.pending]: (state) => {\n      state.loading = true;\n    },\n    [apiMarkGuideComplete.fulfilled]: (state, { payload }) => {\n      state.completedGuides = payload.completedGuides;\n      state.loading = false;\n    },\n    [apiMarkGuideComplete.rejected]: (state) => {\n      state.loading = true;\n    },\n    [apiUpdateGuide.pending]: (state) => {\n      state.loading = true;\n    },\n    [apiUpdateGuide.fulfilled]: (state, { payload }) => {\n      state.guides = payload.guides;\n      state.loading = false;\n    },\n    [apiUpdateGuide.rejected]: (state) => {\n      state.loading = true;\n    },\n    [apiDeleteGuides.pending]: (state) => {\n      state.loading = true;\n    },\n    [apiDeleteGuides.fulfilled]: (state, { payload }) => {\n      state.guides = payload.guides;\n      state.loading = false;\n    },\n    [apiDeleteGuides.rejected]: (state) => {\n      state.loading = true;\n    },\n    [apiUpdateGuideRoles.pending]: (state) => {\n      state.loading = true;\n    },\n    [apiUpdateGuideRoles.fulfilled]: (state, { payload }) => {\n      const rolesInGuides = payload.rolesInGuides;\n      let newGuides = [...state.guides];\n      newGuides = state.guides.map((guide) => {\n        let newGuide = { ...guide };\n        newGuide.roleVisibility = rolesInGuides[guide.guideId];\n        return newGuide;\n      });\n      state.guides = newGuides;\n      state.loading = false;\n    },\n    [apiUpdateGuideRoles.rejected]: (state) => {\n      state.loading = true;\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  actionSetEnvironment,\n  actionSetIdentifier,\n  actionSetJoyrideSteps,\n  actionSetJoyrideStart,\n  actionSetUserIdle,\n} = projectSlicer.actions;\n\nexport default projectSlicer.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from './slice/userSlice';\nimport menuReducer from './slice/menuSlice';\nimport projectReducer from './slice/projectSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n    menu: menuReducer,\n    project: projectReducer,\n  },\n});\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport unique from 'unique-selector';\nimport { actionConfigureGuidesNewCurrentAction } from '../../../redux/slice/menuSlice';\nimport {\n  CG_NEW_ADD_DETAILS,\n  CG_NEW_START,\n} from '../../../menuconstants/CG_New';\n\nexport default function ANG_2_DomSelect() {\n  const menu = useSelector((state) => state.menu);\n  const dispatch = useDispatch();\n  const { configureGuidesNewState } = menu;\n  const { guideTitle, roleVisibilityList } = configureGuidesNewState;\n\n  const mouseEnterHandler = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const el = e.target;\n    el.classList.add('incedoguide-domselect');\n  };\n  const mouseLeaveHandler = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const el = e.target;\n    el.classList.remove('incedoguide-domselect');\n  };\n  const mouseClickHandler = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const targetElement = unique(e.currentTarget, {\n      selectorTypes: ['ID', 'Tag', 'NthChild'],\n    });\n    const allElements = document.querySelectorAll('*');\n\n    allElements.forEach((element) => {\n      element.removeEventListener('mouseenter', mouseEnterHandler, true);\n      element.removeEventListener('mouseleave', mouseLeaveHandler, true);\n      element.removeEventListener('click', mouseClickHandler, false);\n      element.classList.remove('incedoguide-domselect');\n    });\n    dispatch(\n      actionConfigureGuidesNewCurrentAction({\n        action: CG_NEW_ADD_DETAILS,\n        data: targetElement,\n      })\n    );\n  };\n\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const allElements = document.querySelectorAll('*');\n\n      allElements.forEach((element) => {\n        element.addEventListener('mouseenter', mouseEnterHandler, true);\n        element.addEventListener('mouseleave', mouseLeaveHandler, true);\n        element.addEventListener('click', mouseClickHandler, false);\n      });\n\n      document.addEventListener('keydown', function (e) {\n        if (e.keyCode === 27) {\n          const allElements = document.querySelectorAll('*');\n\n          allElements.forEach((element) => {\n            element.removeEventListener('mouseenter', mouseEnterHandler, true);\n            element.removeEventListener('mouseleave', mouseLeaveHandler, true);\n            element.removeEventListener('click', mouseClickHandler, false);\n            element.classList.remove('incedoguide-domselect');\n          });\n\n          dispatch(\n            actionConfigureGuidesNewCurrentAction({\n              action: CG_NEW_START,\n            })\n          );\n        }\n      });\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <div className=\"incedo-dom-select-cancel\">PRESS ESC TO CANCEL</div>\n    </>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  Form,\n  Input,\n  Label,\n  FormGroup,\n  FormFeedback,\n} from 'reactstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  CG_NEW_ADD_DETAILS,\n  CG_NEW_CONFIRM_STEP,\n} from '../../../menuconstants/CG_New';\nimport {\n  actionConfigureGuidesNewCurrentAction,\n  actionMenuOption,\n  actionMenuToggle,\n} from '../../../redux/slice/menuSlice';\nimport { MAIN_ADMIN, MENU_TOGGLE_OPEN } from '../../../menuconstants/mainMenu';\n\nexport default function ANG_3_AddDetails() {\n  const menu = useSelector((state) => state.menu);\n  const user = useSelector((state) => state.user);\n  const { projectDetails } = user;\n  const { projectRoles } = projectDetails;\n  const { configureGuidesNewState } = menu;\n  const { roleVisibilityList: roleVisibilityListInState } =\n    configureGuidesNewState;\n  const dispatch = useDispatch();\n  const [guideTitle, setGuideTitle] = useState(\n    configureGuidesNewState.guideTitle || ''\n  );\n  const [stepName, setStepName] = useState('');\n  const [stepContent, setStepContent] = useState('');\n  const [roleVisibilityList, setRoleVisibilityList] = useState(\n    roleVisibilityListInState\n  );\n  const allRolesWithoutAdminRole = Object.keys(projectRoles).filter(\n    (role) => role !== MAIN_ADMIN\n  );\n\n  //Validation States\n  const [validity, setValidity] = useState({});\n  //Checking Validation on each data change\n  useEffect(() => {\n    guideTitle !== ''\n      ? setValidity((old) => ({ ...old, guideTitle: { isValid: true } }))\n      : setValidity((old) => ({\n          ...old,\n          guideTitle: {\n            isValid: false,\n            invalidMessage: 'Guide Title cannot be empty',\n          },\n        }));\n    stepName !== ''\n      ? setValidity((old) => ({ ...old, stepName: { isValid: true } }))\n      : setValidity((old) => ({\n          ...old,\n          stepName: {\n            isValid: false,\n            invalidMessage: 'Guide Step Title cannot be empty',\n          },\n        }));\n    stepContent !== ''\n      ? setValidity((old) => ({ ...old, stepContent: { isValid: true } }))\n      : setValidity((old) => ({\n          ...old,\n          stepContent: {\n            isValid: false,\n            invalidMessage: 'Guide Step Content cannot be empty',\n          },\n        }));\n  }, [guideTitle, stepName, stepContent]);\n\n  const roleVisibilityCheckboxChanged = (role) => {\n    setRoleVisibilityList((old) => ({ ...old, [role]: !old[role] }));\n  };\n\n  return (\n    <>\n      <Modal\n        toggle={function noRefCheck() {}}\n        isOpen={configureGuidesNewState.currentAction === CG_NEW_ADD_DETAILS}\n      >\n        <ModalHeader\n          toggle={() => {\n            dispatch(actionMenuOption(''));\n            dispatch(actionConfigureGuidesNewCurrentAction({ action: '' }));\n            dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n          }}\n        >\n          Add Details for the Guide\n        </ModalHeader>\n        <ModalBody>\n          <Form>\n            {configureGuidesNewState.guideTitle === '' && (\n              <React.Fragment>\n                <FormGroup>\n                  <Label for=\"guideTitle\">Guide Title</Label>\n                  <Input\n                    id=\"guideTitle\"\n                    name=\"guideTitle\"\n                    placeholder=\"\"\n                    type=\"text\"\n                    valid={validity['guideTitle']?.isValid || false}\n                    invalid={!validity['guideTitle']?.isValid || false}\n                    onChange={(e) => {\n                      setGuideTitle(e.currentTarget.value);\n                    }}\n                    value={guideTitle}\n                  />\n                  <FormFeedback invalid=\"true\">\n                    {validity['guideTitle']?.invalidMessage}\n                  </FormFeedback>\n                </FormGroup>\n                {/* Render all Role Check boxes */}\n\n                <FormGroup>\n                  <Label for=\"stepName\">User Roles</Label> <br />\n                  {allRolesWithoutAdminRole.map((role) => {\n                    return (\n                      <React.Fragment key={role}>\n                        <FormGroup check inline>\n                          <Input\n                            type=\"checkbox\"\n                            checked={roleVisibilityList[role] || false}\n                            onChange={() => roleVisibilityCheckboxChanged(role)}\n                          />\n                          <Label check>{role}</Label>\n                        </FormGroup>\n                      </React.Fragment>\n                    );\n                  })}\n                </FormGroup>\n              </React.Fragment>\n            )}\n\n            <FormGroup>\n              <Label for=\"stepName\">Step Name</Label>\n              <Input\n                id=\"stepName\"\n                name=\"stepName\"\n                placeholder=\"\"\n                type=\"text\"\n                valid={validity['stepName']?.isValid || false}\n                invalid={!validity['stepName']?.isValid || false}\n                onChange={(e) => {\n                  setStepName(e.currentTarget.value);\n                }}\n                value={stepName}\n              />\n              <FormFeedback invalid=\"true\">\n                {validity['stepName']?.invalidMessage}\n              </FormFeedback>\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"stepDescription\">Step Description</Label>\n              <Input\n                id=\"stepDescription\"\n                name=\"stepDescription\"\n                placeholder=\"\"\n                type=\"text\"\n                valid={validity['stepContent']?.isValid || false}\n                invalid={!validity['stepContent']?.isValid || false}\n                onChange={(e) => {\n                  setStepContent(e.currentTarget.value);\n                }}\n                value={stepContent}\n              />\n              <FormFeedback invalid=\"true\">\n                {validity['stepContent']?.invalidMessage}\n              </FormFeedback>\n            </FormGroup>\n          </Form>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            color=\"primary\"\n            onClick={() => {\n              if (\n                Object.keys(validity).every(\n                  (key) => validity[key].isValid === true\n                )\n              ) {\n                const titleAlreadyPresentInState =\n                  configureGuidesNewState.guideTitle !== '';\n                dispatch(\n                  actionConfigureGuidesNewCurrentAction({\n                    action: CG_NEW_CONFIRM_STEP,\n                    data: {\n                      roleVisibilityList,\n                      stepName,\n                      stepContent,\n                      guideTitle: titleAlreadyPresentInState\n                        ? configureGuidesNewState.guideTitle\n                        : guideTitle,\n                    },\n                  })\n                );\n              } else {\n              }\n            }}\n          >\n            CONFIRM\n          </Button>{' '}\n          <Button\n            onClick={() => {\n              dispatch(actionMenuOption(''));\n              dispatch(actionConfigureGuidesNewCurrentAction({ action: '' }));\n              dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n            }}\n          >\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React from 'react';\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  Card,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n  CardText,\n  Badge,\n} from 'reactstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  CG_NEW_CONFIRM_STEP,\n  CG_NEW_START,\n} from '../../../menuconstants/CG_New';\nimport {\n  actionConfigureGuidesNewCurrentAction,\n  actionMenuOption,\n  actionMenuToggle,\n} from '../../../redux/slice/menuSlice';\nimport { apiAddNewGuide } from '../../../redux/slice/projectSlice';\nimport { MENU_TOGGLE_OPEN } from '../../../menuconstants/mainMenu';\n\nexport default function ANG_4_Confirm() {\n  const menu = useSelector((state) => state.menu);\n  const user = useSelector((state) => state.user);\n  const project = useSelector((state) => state.project);\n\n  const { currentEnvironment, identifier } = project;\n  const { configureGuidesNewState } = menu;\n  const { steps } = configureGuidesNewState;\n  const { projectDetails } = user;\n\n  const dispatch = useDispatch();\n  const { projectId } = projectDetails;\n\n  return (\n    <>\n      <Modal\n        toggle={function noRefCheck() {}}\n        isOpen={configureGuidesNewState.currentAction === CG_NEW_CONFIRM_STEP}\n      >\n        <ModalHeader\n          toggle={() => {\n            dispatch(actionMenuOption(''));\n            dispatch(actionConfigureGuidesNewCurrentAction({ action: '' }));\n            dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n          }}\n        >\n          Confirm the steps\n        </ModalHeader>\n        <ModalBody>\n          {steps.length === 0 && <h3>No Steps present </h3>}\n          {steps.length !== 0 &&\n            steps.map(({ title, content }, index) => (\n              <Card key={index} className=\"mt-2\">\n                <CardBody>\n                  <Badge color=\"primary\">Step {index + 1}</Badge>\n                  <CardTitle tag=\"h5\" className=\"mt-2\">\n                    {title}\n                  </CardTitle>\n                  <CardSubtitle className=\"mb-2 text-muted\" tag=\"h6\">\n                    {content}\n                  </CardSubtitle>\n                </CardBody>\n              </Card>\n            ))}\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            color=\"primary\"\n            onClick={() => {\n              dispatch(\n                apiAddNewGuide({\n                  projectId,\n                  identifier,\n                  title: configureGuidesNewState.guideTitle,\n                  steps: configureGuidesNewState.steps,\n                  roleVisibilityList:\n                    configureGuidesNewState.roleVisibilityList,\n                  currentEnvironment,\n                })\n              );\n              dispatch(\n                actionConfigureGuidesNewCurrentAction({\n                  action: '',\n                })\n              );\n              dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n            }}\n          >\n            OK\n          </Button>{' '}\n          <Button\n            onClick={() => {\n              dispatch(\n                actionConfigureGuidesNewCurrentAction({\n                  action: CG_NEW_START,\n                  data: {\n                    title: configureGuidesNewState.guideTitle,\n                    roleVisibilityList:\n                      configureGuidesNewState.roleVisibilityList,\n                  },\n                })\n              );\n            }}\n          >\n            Add New Step\n          </Button>\n          <Button\n            onClick={() => {\n              dispatch(actionMenuOption(''));\n              dispatch(actionConfigureGuidesNewCurrentAction({ action: '' }));\n              dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n            }}\n          >\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React from 'react';\nimport { Badge } from 'reactstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CG_NEW_DOM_SELECT, CG_NEW_START } from '../../../menuconstants/CG_New';\nimport { actionConfigureGuidesNewCurrentAction } from '../../../redux/slice/menuSlice';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\n\nexport default function ANG_1_Start() {\n  const menu = useSelector((state) => state.menu);\n  const { configureGuidesNewState } = menu;\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <div\n        className={\n          configureGuidesNewState.currentAction === CG_NEW_START\n            ? 'incedo-guide-domselect-help-visible'\n            : 'incedo-guide-domselect-help-invisible'\n        }\n      >\n        <FontAwesomeIcon\n          id=\"domSelectionIcon\"\n          className={'incedo-guide-domselect-icon'}\n          icon={faCheck}\n          onClick={() => {\n            dispatch(\n              actionConfigureGuidesNewCurrentAction({\n                action: CG_NEW_DOM_SELECT,\n                data: {},\n              })\n            );\n          }}\n        />\n        <Badge className=\"incedoguide-badge\" color=\"primary\">\n          Click Icon to Start Selection\n        </Badge>\n      </div>\n    </>\n  );\n}\n","/* eslint-disable react/jsx-pascal-case */\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport ANG_2_DomSelect from './addnewguides/ANG_2_DomSelect';\nimport {\n  CG_NEW_ADD_DETAILS,\n  CG_NEW_CONFIRM_STEP,\n  CG_NEW_DOM_SELECT,\n  CG_NEW_START,\n} from '../../menuconstants/CG_New';\nimport ANG_3_AddDetails from './addnewguides/ANG_3_AddDetails';\nimport ANG_4_Confirm from './addnewguides/ANG_4_Confirm';\nimport ANG_1_Start from './addnewguides/ANG_1_Start';\n\nexport default function AddNewGuide() {\n  const menu = useSelector((state) => state.menu);\n  const { configureGuidesNewState } = menu;\n\n  return (\n    <>\n      {configureGuidesNewState.currentAction === CG_NEW_START && (\n        <ANG_1_Start />\n      )}\n      {configureGuidesNewState.currentAction === CG_NEW_DOM_SELECT && (\n        <ANG_2_DomSelect />\n      )}\n      {configureGuidesNewState.currentAction === CG_NEW_ADD_DETAILS && (\n        <ANG_3_AddDetails />\n      )}\n      {configureGuidesNewState.currentAction === CG_NEW_CONFIRM_STEP && (\n        <ANG_4_Confirm />\n      )}\n    </>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  Input,\n} from 'reactstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  actionConfigureGuidesAddStepsCurrentAction,\n  actionMenuOption,\n  actionMenuToggle,\n} from '../../../redux/slice/menuSlice';\nimport { MENU_TOGGLE_OPEN } from '../../../menuconstants/mainMenu';\nimport {\n  CG_ADD_STEP_INSERTION_POINT,\n  CG_ADD_STEP_START,\n} from '../../../menuconstants/CG_AddStep';\nimport { FormGroup, Label } from 'reactstrap';\n\nexport default function ASEG_1_Start() {\n  const menu = useSelector((state) => state.menu);\n  const project = useSelector((state) => state.project);\n  const { guides } = project;\n  const { configureGuidesAddStepsState } = menu;\n  const dispatch = useDispatch();\n  const [selectedGuideId, setSelectedGuideId] = useState(\n    (guides.length !== 0 && guides[0].guideId) || 0\n  );\n  let selectedGuide = {};\n\n  const guideIdSelectHandler = (e) => {\n    console.log(e.target.value);\n    e.persist();\n    setSelectedGuideId((old) => e.target.value);\n  };\n\n  useEffect(() => {\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    selectedGuide = guides.find((guide) => +guide.guideId === +selectedGuideId);\n  }, [selectedGuideId]);\n\n  return (\n    <>\n      <Modal\n        toggle={function noRefCheck() {}}\n        isOpen={\n          configureGuidesAddStepsState.currentAction === CG_ADD_STEP_START\n        }\n      >\n        <ModalHeader\n          toggle={() => {\n            dispatch(actionMenuOption(''));\n            dispatch(\n              actionConfigureGuidesAddStepsCurrentAction({ action: '' })\n            );\n            dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n          }}\n        >\n          Add Steps to Existing\n        </ModalHeader>\n        <ModalBody>\n          {guides.length !== 0 && (\n            <FormGroup>\n              <Label for=\"exampleSelect\">Select the Guide</Label>\n              <Input\n                id=\"exampleSelect\"\n                name=\"select\"\n                type=\"select\"\n                value={selectedGuideId}\n                onChange={guideIdSelectHandler}\n              >\n                {guides.map(({ title, guideId }) => {\n                  return (\n                    <option key={guideId} value={guideId}>\n                      {title}\n                    </option>\n                  );\n                })}\n              </Input>\n            </FormGroup>\n          )}\n          {guides.length === 0 && <h3>No Guides Present</h3>}\n        </ModalBody>\n        <ModalFooter>\n          {guides.length !== 0 && (\n            <>\n              <Button\n                color=\"primary\"\n                onClick={() => {\n                  dispatch(\n                    actionConfigureGuidesAddStepsCurrentAction({\n                      action: CG_ADD_STEP_INSERTION_POINT,\n                      data: {\n                        guideId: selectedGuideId,\n                        oldGuide: selectedGuide,\n                      },\n                    })\n                  );\n                }}\n              >\n                CONFIRM\n              </Button>{' '}\n            </>\n          )}\n          <Button\n            onClick={() => {\n              dispatch(actionMenuOption(''));\n              dispatch(\n                actionConfigureGuidesAddStepsCurrentAction({ action: '' })\n              );\n              dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n            }}\n          >\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React from 'react';\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Button,\n  Card,\n  CardBody,\n  CardTitle,\n  CardText,\n  Badge,\n} from 'reactstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  actionConfigureGuidesAddStepsCurrentAction,\n  actionMenuOption,\n  actionMenuToggle,\n} from '../../../redux/slice/menuSlice';\nimport { MENU_TOGGLE_OPEN } from '../../../menuconstants/mainMenu';\nimport {\n  CG_ADD_STEP_INSERTION_POINT,\n  CG_ADD_STEP_PROMPT,\n} from '../../../menuconstants/CG_AddStep';\n\nexport default function EEG_2_InsertionPoint() {\n  const menu = useSelector((state) => state.menu);\n  const project = useSelector((state) => state.project);\n  const { guides } = project;\n  const { configureGuidesAddStepsState } = menu;\n  const { selectedGuideId } = configureGuidesAddStepsState;\n  const currentGuide = guides.find(\n    (guide) => +guide.guideId === +selectedGuideId\n  );\n  const dispatch = useDispatch();\n\n  const insertionSelectedHandler = (insertionIndex) => {\n    dispatch(\n      actionConfigureGuidesAddStepsCurrentAction({\n        action: CG_ADD_STEP_PROMPT,\n        data: {\n          insertionIndex,\n          title: currentGuide.title,\n        },\n      })\n    );\n  };\n\n  return (\n    <>\n      <Modal\n        toggle={function noRefCheck() {}}\n        isOpen={\n          configureGuidesAddStepsState.currentAction ===\n          CG_ADD_STEP_INSERTION_POINT\n        }\n      >\n        <ModalHeader\n          toggle={() => {\n            dispatch(actionMenuOption(''));\n            dispatch(\n              actionConfigureGuidesAddStepsCurrentAction({ action: '' })\n            );\n            dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n          }}\n        >\n          Select Insertion Location\n        </ModalHeader>\n        <ModalBody>\n          {currentGuide.steps.length !== 0 &&\n            currentGuide.steps.map(({ title, content }, index) => {\n              return (\n                <React.Fragment key={index}>\n                  <Card className=\"mb-2\">\n                    <CardBody>\n                      <Badge color=\"primary\">Step {index + 1}</Badge>\n                      <CardTitle tag=\"h5\">{title}</CardTitle>\n                      <CardText>{content}</CardText>\n                    </CardBody>\n                  </Card>\n                  <div\n                    style={{ width: '100%', textAlign: 'center' }}\n                    onClick={() => insertionSelectedHandler(index + 1)}\n                  >\n                    <Button\n                      color=\"primary\"\n                      outline\n                      className=\"mb-2\"\n                      size=\"sm\"\n                      style={{\n                        display: 'inline-block',\n                      }}\n                    >\n                      Insert after Step {index + 1}\n                    </Button>\n                  </div>\n                </React.Fragment>\n              );\n            })}\n          {currentGuide.steps.length === 0 && (\n            <div style={{ width: '100%', textAlign: 'center' }}>\n              <h3>No Steps Present</h3>\n              <Button\n                color=\"primary\"\n                outline\n                className=\"mb-2\"\n                size=\"sm\"\n                style={{\n                  display: 'inline-block',\n                }}\n              >\n                Insert New Step\n              </Button>\n            </div>\n          )}\n        </ModalBody>\n      </Modal>\n    </>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport unique from 'unique-selector';\nimport { actionConfigureGuidesAddStepsCurrentAction } from '../../../redux/slice/menuSlice';\nimport { CG_ADD_STEP_ADD_DETAILS } from '../../../menuconstants/CG_AddStep';\n\nexport default function ASEG_4_DomSelect() {\n  const dispatch = useDispatch();\n\n  const mouseEnterHandler = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const el = e.target;\n    el.classList.add('incedoguide-domselect');\n  };\n  const mouseLeaveHandler = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const el = e.target;\n    el.classList.remove('incedoguide-domselect');\n  };\n  const mouseClickHandler = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const targetElement = unique(e.currentTarget, {\n      selectorTypes: ['ID', 'Tag', 'NthChild'],\n    });\n    const allElements = document.querySelectorAll('*');\n\n    allElements.forEach((element) => {\n      element.removeEventListener('mouseenter', mouseEnterHandler, true);\n      element.removeEventListener('mouseleave', mouseLeaveHandler, true);\n      element.removeEventListener('click', mouseClickHandler, false);\n      element.classList.remove('incedoguide-domselect');\n    });\n    dispatch(\n      actionConfigureGuidesAddStepsCurrentAction({\n        action: CG_ADD_STEP_ADD_DETAILS,\n        data: {\n          currentDomTarget: targetElement,\n        },\n      })\n    );\n  };\n\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const allElements = document.querySelectorAll('*');\n\n      allElements.forEach((element) => {\n        element.addEventListener('mouseenter', mouseEnterHandler, true);\n        element.addEventListener('mouseleave', mouseLeaveHandler, true);\n        element.addEventListener('click', mouseClickHandler, false);\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return <></>;\n}\n","import React, { useState } from 'react';\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  Form,\n  Input,\n  Label,\n  FormGroup,\n  FormFeedback,\n} from 'reactstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  actionConfigureGuidesAddStepsCurrentAction,\n  actionConfigureGuidesNewCurrentAction,\n  actionMenuOption,\n  actionMenuToggle,\n} from '../../../redux/slice/menuSlice';\nimport { MENU_TOGGLE_OPEN } from '../../../menuconstants/mainMenu';\nimport {\n  CG_ADD_STEP_ADD_DETAILS,\n  CG_ADD_STEP_CONFIRM_STEPS,\n} from '../../../menuconstants/CG_AddStep';\nimport { useEffect } from 'react';\n\nexport default function ASEG_5_AddDetails() {\n  const menu = useSelector((state) => state.menu);\n  const { configureGuidesAddStepsState } = menu;\n  const { guideTitle } = configureGuidesAddStepsState;\n  const dispatch = useDispatch();\n  const [stepName, setStepName] = useState('');\n  const [stepContent, setStepContent] = useState('');\n\n  //Checking Validation\n  const [validity, setValidity] = useState({});\n  //Checking Validation on each data change\n  useEffect(() => {\n    stepName !== ''\n      ? setValidity((old) => ({ ...old, stepName: { isValid: true } }))\n      : setValidity((old) => ({\n          ...old,\n          stepName: {\n            isValid: false,\n            invalidMessage: 'Guide Step Title cannot be empty',\n          },\n        }));\n    stepContent !== ''\n      ? setValidity((old) => ({ ...old, stepContent: { isValid: true } }))\n      : setValidity((old) => ({\n          ...old,\n          stepContent: {\n            isValid: false,\n            invalidMessage: 'Guide Step Content cannot be empty',\n          },\n        }));\n  }, [stepName, stepContent]);\n\n  return (\n    <>\n      <Modal\n        toggle={function noRefCheck() {}}\n        isOpen={\n          configureGuidesAddStepsState.currentAction === CG_ADD_STEP_ADD_DETAILS\n        }\n      >\n        <ModalHeader\n          toggle={() => {\n            dispatch(actionMenuOption(''));\n            dispatch(actionConfigureGuidesNewCurrentAction({ action: '' }));\n            dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n          }}\n        >\n          Add Details for the Guide\n        </ModalHeader>\n        <ModalBody>\n          <Form>\n            <FormGroup>\n              <Label for=\"guideTitle\">Guide Title</Label>\n              <Input\n                id=\"guideTitle\"\n                name=\"guideTitle\"\n                placeholder=\"\"\n                disabled={true}\n                type=\"text\"\n                value={guideTitle}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"stepName\">Step Name</Label>\n              <Input\n                id=\"stepName\"\n                name=\"stepName\"\n                placeholder=\"\"\n                type=\"text\"\n                valid={validity['stepName']?.isValid || false}\n                invalid={!validity['stepName']?.isValid || false}\n                onChange={(e) => {\n                  setStepName(e.currentTarget.value);\n                }}\n                value={stepName}\n              />\n              <FormFeedback invalid=\"true\">\n                {validity['stepName']?.invalidMessage}\n              </FormFeedback>\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"stepDescription\">Step Content</Label>\n              <Input\n                id=\"stepDescription\"\n                name=\"stepDescription\"\n                placeholder=\"\"\n                type=\"textarea\"\n                valid={validity['stepContent']?.isValid || false}\n                invalid={!validity['stepContent']?.isValid || false}\n                onChange={(e) => {\n                  setStepContent(e.currentTarget.value);\n                }}\n                value={stepContent}\n              />\n              <FormFeedback invalid=\"true\">\n                {validity['stepContent']?.invalidMessage}\n              </FormFeedback>\n            </FormGroup>\n          </Form>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            color=\"primary\"\n            onClick={() => {\n              if (\n                Object.keys(validity).every(\n                  (key) => validity[key].isValid === true\n                )\n              ) {\n                dispatch(\n                  actionConfigureGuidesAddStepsCurrentAction({\n                    action: CG_ADD_STEP_CONFIRM_STEPS,\n                    data: {\n                      stepName,\n                      stepContent,\n                    },\n                  })\n                );\n              } else {\n              }\n            }}\n          >\n            CONFIRM\n          </Button>{' '}\n          <Button\n            onClick={() => {\n              dispatch(actionMenuOption(''));\n              dispatch(\n                actionConfigureGuidesAddStepsCurrentAction({ action: '' })\n              );\n              dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n            }}\n          >\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React from 'react';\nimport { Badge } from 'reactstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { actionConfigureGuidesAddStepsCurrentAction } from '../../../redux/slice/menuSlice';\nimport {\n  CG_ADD_STEP_DOM_SELECT,\n  CG_ADD_STEP_PROMPT,\n} from '../../../menuconstants/CG_AddStep';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\n\nexport default function ASEG_3_Prompt() {\n  const menu = useSelector((state) => state.menu);\n  const { configureGuidesAddStepsState } = menu;\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <div\n        className={\n          configureGuidesAddStepsState.currentAction === CG_ADD_STEP_PROMPT\n            ? 'incedo-guide-domselect-help-visible'\n            : 'incedo-guide-domselect-help-invisible'\n        }\n      >\n        <FontAwesomeIcon\n          id=\"domSelectionIcon\"\n          className={'incedo-guide-domselect-icon'}\n          icon={faCheck}\n          onClick={() => {\n            dispatch(\n              actionConfigureGuidesAddStepsCurrentAction({\n                action: CG_ADD_STEP_DOM_SELECT,\n              })\n            );\n          }}\n        />\n        <Badge className=\"incedoguide-badge\" color=\"primary\">\n          Click Icon to Start Selection\n        </Badge>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  actionConfigureGuidesAddStepsCurrentAction,\n  actionMenuOption,\n  actionMenuToggle,\n} from '../../../redux/slice/menuSlice';\nimport { apiUpdateGuide } from '../../../redux/slice/projectSlice';\nimport { MENU_TOGGLE_OPEN } from '../../../menuconstants/mainMenu';\nimport {\n  CG_ADD_STEP_CONFIRM_STEPS,\n  CG_ADD_STEP_PROMPT,\n} from '../../../menuconstants/CG_AddStep';\n\nexport default function ASEG_6_Confirm() {\n  const menu = useSelector((state) => state.menu);\n  const project = useSelector((state) => state.project);\n\n  const { currentEnvironment, guides } = project;\n  const { configureGuidesAddStepsState } = menu;\n  const { insertionIndex, guideTitle, steps, selectedGuideId } =\n    configureGuidesAddStepsState;\n\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Modal\n        toggle={function noRefCheck() {}}\n        isOpen={\n          configureGuidesAddStepsState.currentAction ===\n          CG_ADD_STEP_CONFIRM_STEPS\n        }\n      >\n        <ModalHeader\n          toggle={() => {\n            dispatch(actionMenuOption(''));\n            dispatch(\n              actionConfigureGuidesAddStepsCurrentAction({ action: '' })\n            );\n            dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n          }}\n        >\n          Confirm the steps\n        </ModalHeader>\n        <ModalBody>Confirm the steps</ModalBody>\n        <ModalFooter>\n          <Button\n            color=\"primary\"\n            onClick={() => {\n              //Add new steps to existing Guide Steps in state\n              const guideToUpdate = guides.find(\n                (guide) => +guide.guideId === +selectedGuideId\n              );\n              const oldSteps = [...guideToUpdate.steps];\n              const newGuideStepsAltered = oldSteps\n                .splice(0, insertionIndex)\n                .concat(steps)\n                .concat(oldSteps.splice(-insertionIndex));\n\n              //Dipatch action to update the new Guide Steps\n              dispatch(\n                apiUpdateGuide({\n                  guide: { ...guideToUpdate, steps: newGuideStepsAltered },\n                  currentEnvironment,\n                })\n              );\n              dispatch(\n                actionConfigureGuidesAddStepsCurrentAction({\n                  action: '',\n                })\n              );\n              dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n            }}\n          >\n            OK\n          </Button>{' '}\n          <Button\n            onClick={() => {\n              dispatch(\n                actionConfigureGuidesAddStepsCurrentAction({\n                  action: CG_ADD_STEP_PROMPT,\n                  data: {\n                    insertionIndex,\n                    title: guideTitle,\n                  },\n                })\n              );\n            }}\n          >\n            Add New Step\n          </Button>\n          <Button\n            onClick={() => {\n              dispatch(actionMenuOption(''));\n              dispatch(\n                actionConfigureGuidesAddStepsCurrentAction({ action: '' })\n              );\n              dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n            }}\n          >\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","/* eslint-disable react/jsx-pascal-case */\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  CG_ADD_STEP_ADD_DETAILS,\n  CG_ADD_STEP_CONFIRM_STEPS,\n  CG_ADD_STEP_DOM_SELECT,\n  CG_ADD_STEP_INSERTION_POINT,\n  CG_ADD_STEP_PROMPT,\n  CG_ADD_STEP_START,\n} from '../../menuconstants/CG_AddStep';\nimport ASEG_1_Start from './addstepsexisting/ASEG_1_Start';\nimport ASEG_2_InsertionPoint from './addstepsexisting/ASEG_2_InsertionPoint';\nimport ASEG_4_DomSelect from './addstepsexisting/ASEG_4_DomSelect';\nimport ASEG_5_AddDetails from './addstepsexisting/ASEG_5_AddDetails';\nimport ASEG_3_Prompt from './addstepsexisting/ASEG_3_Prompt';\nimport ASEG_6_Confirm from './addstepsexisting/ASEG_6_Confirm';\n\nexport default function AddStepsExistingGuide() {\n  const menu = useSelector((state) => state.menu);\n  const { configureGuidesAddStepsState } = menu;\n\n  return (\n    <>\n      {configureGuidesAddStepsState.currentAction === CG_ADD_STEP_START && (\n        <ASEG_1_Start />\n      )}\n      {configureGuidesAddStepsState.currentAction ===\n        CG_ADD_STEP_INSERTION_POINT && <ASEG_2_InsertionPoint />}\n      {configureGuidesAddStepsState.currentAction === CG_ADD_STEP_PROMPT && (\n        <ASEG_3_Prompt />\n      )}\n      {configureGuidesAddStepsState.currentAction ===\n        CG_ADD_STEP_DOM_SELECT && <ASEG_4_DomSelect />}\n      {configureGuidesAddStepsState.currentAction ===\n        CG_ADD_STEP_ADD_DETAILS && <ASEG_5_AddDetails />}\n      {configureGuidesAddStepsState.currentAction ===\n        CG_ADD_STEP_CONFIRM_STEPS && <ASEG_6_Confirm />}\n    </>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  Input,\n} from 'reactstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  actionConfigureGuidesEditStepsCurrentAction,\n  actionMenuOption,\n  actionMenuToggle,\n} from '../../../redux/slice/menuSlice';\nimport { MENU_TOGGLE_OPEN } from '../../../menuconstants/mainMenu';\nimport { FormGroup, Label } from 'reactstrap';\nimport {\n  CG_EDIT_STEP_EDIT_DETAILS,\n  CG_EDIT_STEP_START,\n} from '../../../menuconstants/CG_EditStep';\n\nexport default function ESE_1_Start() {\n  const menu = useSelector((state) => state.menu);\n  const project = useSelector((state) => state.project);\n  const { guides } = project;\n  const { configureGuidesEditStepsState } = menu;\n  const dispatch = useDispatch();\n  const [selectedGuideId, setSelectedGuideId] = useState(\n    (guides.length !== 0 && guides[0].guideId) || 0\n  );\n  let selectedGuide = {};\n\n  const guideIdSelectHandler = (e) => {\n    e.persist();\n    setSelectedGuideId((old) => e.target.value);\n  };\n\n  useEffect(() => {\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    selectedGuide = guides.find((guide) => +guide.guideId === +selectedGuideId);\n  }, [selectedGuideId]);\n\n  return (\n    <>\n      <Modal\n        toggle={function noRefCheck() {}}\n        isOpen={\n          configureGuidesEditStepsState.currentAction === CG_EDIT_STEP_START\n        }\n      >\n        <ModalHeader\n          toggle={() => {\n            dispatch(actionMenuOption(''));\n            dispatch(\n              actionConfigureGuidesEditStepsCurrentAction({ action: '' })\n            );\n            dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n          }}\n        >\n          Edit Steps of Existing\n        </ModalHeader>\n        <ModalBody>\n          {guides.length !== 0 && (\n            <FormGroup>\n              <Label for=\"exampleSelect\">Select the Tour</Label>\n              <Input\n                id=\"exampleSelect\"\n                name=\"select\"\n                type=\"select\"\n                value={selectedGuideId}\n                onChange={guideIdSelectHandler}\n              >\n                {guides.map(({ title, guideId }) => {\n                  return (\n                    <option key={guideId} value={guideId}>\n                      {title}\n                    </option>\n                  );\n                })}\n              </Input>\n            </FormGroup>\n          )}\n          {guides.length === 0 && <h3>No Guides Present</h3>}\n        </ModalBody>\n        <ModalFooter>\n          {guides.length !== 0 && (\n            <Button\n              color=\"primary\"\n              onClick={() => {\n                dispatch(\n                  actionConfigureGuidesEditStepsCurrentAction({\n                    action: CG_EDIT_STEP_EDIT_DETAILS,\n                    data: {\n                      guideId: selectedGuideId,\n                      oldGuide: selectedGuide,\n                    },\n                  })\n                );\n              }}\n            >\n              CONFIRM\n            </Button>\n          )}\n          <Button\n            onClick={() => {\n              dispatch(actionMenuOption(''));\n              dispatch(\n                actionConfigureGuidesEditStepsCurrentAction({ action: '' })\n              );\n              dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n            }}\n          >\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  Input,\n  FormFeedback,\n} from 'reactstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  actionConfigureGuidesEditStepsCurrentAction,\n  actionMenuOption,\n  actionMenuToggle,\n} from '../../../redux/slice/menuSlice';\nimport { MENU_TOGGLE_OPEN } from '../../../menuconstants/mainMenu';\nimport { FormGroup, Label } from 'reactstrap';\nimport {\n  CG_EDIT_STEP_EDIT_CONFIRM,\n  CG_EDIT_STEP_EDIT_DETAILS,\n} from '../../../menuconstants/CG_EditStep';\n\nexport default function ESE_2_EditDetails() {\n  const menu = useSelector((state) => state.menu);\n  const { configureGuidesEditStepsState } = menu;\n  const { oldGuide } = configureGuidesEditStepsState;\n  const dispatch = useDispatch();\n  const [selectedStep, setSelectedStep] = useState(0);\n  const [newGuide, setNewGuide] = useState(oldGuide);\n\n  const guideStepSelectedHandler = (e) => {\n    e.persist();\n    setSelectedStep((old) => e.target.value);\n  };\n\n  //Check Validation\n  const [validity, setValidity] = useState({});\n  const [titleValidity, setTitleValidity] = useState({\n    isValid: true,\n    invalidMessage: 'Guide Title cannot be empty',\n  });\n\n  //When title changed, Check its validation and set it in state\n  useEffect(() => {\n    setTitleValidity((old) => ({\n      isValid: newGuide.title !== '',\n      invalidMessage: 'Guide Title cannot be empty',\n    }));\n  }, [newGuide]);\n\n  //When Guides are being updated, Check validation for all steps and update in state\n  useEffect(() => {\n    let newValidityState = {};\n    newGuide.steps.forEach((step, index) => {\n      newValidityState = {\n        ...newValidityState,\n        [index]: {\n          stepTitle: {\n            isValid: step.title !== '',\n            invalidMessage: 'Step Title cannot be empty',\n          },\n          stepContent: {\n            isValid: step.content !== '',\n            invalidMessage: 'Step Content cannot be empty',\n          },\n        },\n      };\n    });\n\n    setValidity((old) => newValidityState);\n  }, [newGuide]);\n\n  return (\n    <>\n      <Modal\n        toggle={function noRefCheck() {}}\n        isOpen={\n          configureGuidesEditStepsState.currentAction ===\n          CG_EDIT_STEP_EDIT_DETAILS\n        }\n      >\n        <ModalHeader\n          toggle={() => {\n            dispatch(actionMenuOption(''));\n            dispatch(\n              actionConfigureGuidesEditStepsCurrentAction({ action: '' })\n            );\n            dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n          }}\n        >\n          Edit Steps of Existing\n        </ModalHeader>\n        <ModalBody>\n          {newGuide.steps.length !== 0 && (\n            <>\n              <FormGroup>\n                <Label for=\"stepName\">Guide Title</Label>\n                <Input\n                  id=\"stepName\"\n                  name=\"stepName\"\n                  placeholder=\"\"\n                  type=\"text\"\n                  valid={titleValidity?.isValid || false}\n                  invalid={!titleValidity?.isValid || false}\n                  onChange={(e) => {\n                    e.persist();\n                    setNewGuide((old) => ({ ...old, title: e.target.value }));\n                  }}\n                  value={newGuide.title}\n                />\n                <FormFeedback invalid=\"true\">\n                  {titleValidity?.invalidMessage}\n                </FormFeedback>\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"exampleSelect\">Select the Step</Label>\n                <Input\n                  id=\"exampleSelect\"\n                  name=\"select\"\n                  type=\"select\"\n                  value={selectedStep}\n                  onChange={guideStepSelectedHandler}\n                >\n                  {newGuide.steps.length &&\n                    newGuide.steps.map(({ title }, index) => {\n                      return (\n                        <option key={index} value={index}>\n                          Step {index + 1} - {title}\n                        </option>\n                      );\n                    })}\n                  {!newGuide.steps.length && <h1>No Steps Present</h1>}\n                </Input>\n                <FormGroup className=\"mt-3\">\n                  <Label for=\"stepName\">Step Title</Label>\n                  <Input\n                    id=\"stepName\"\n                    name=\"stepName\"\n                    placeholder=\"\"\n                    type=\"text\"\n                    valid={validity[selectedStep]?.stepTitle?.isValid || false}\n                    invalid={\n                      !validity[selectedStep]?.stepTitle?.isValid || false\n                    }\n                    onChange={(e) => {\n                      e.persist();\n                      const oldSteps = [...newGuide.steps];\n                      oldSteps[selectedStep] = {\n                        ...oldSteps[selectedStep],\n                        title: e.target.value,\n                      };\n                      setNewGuide((old) => ({\n                        ...old,\n                        steps: oldSteps,\n                      }));\n                    }}\n                    value={newGuide.steps[selectedStep].title}\n                  />\n                  <FormFeedback invalid=\"true\">\n                    {validity[selectedStep]?.stepTitle?.invalidMessage}\n                  </FormFeedback>\n                </FormGroup>\n                <FormGroup>\n                  <Label for=\"stepDescription\">Step Content</Label>\n                  <Input\n                    id=\"stepDescription\"\n                    name=\"stepDescription\"\n                    placeholder=\"\"\n                    type=\"textarea\"\n                    valid={\n                      validity[selectedStep]?.stepContent?.isValid || false\n                    }\n                    invalid={\n                      !validity[selectedStep]?.stepContent?.isValid || false\n                    }\n                    onChange={(e) => {\n                      e.persist();\n                      const oldSteps = [...newGuide.steps];\n                      oldSteps[selectedStep] = {\n                        ...oldSteps[selectedStep],\n                        content: e.target.value,\n                      };\n                      setNewGuide((old) => ({\n                        ...old,\n                        steps: oldSteps,\n                      }));\n                    }}\n                    value={newGuide.steps[selectedStep].content}\n                  />\n                  <FormFeedback invalid=\"true\">\n                    {validity[selectedStep]?.stepContent?.invalidMessage}\n                  </FormFeedback>\n                </FormGroup>\n                <Button\n                  color=\"danger\"\n                  outline\n                  disabled={newGuide.steps.length === 1}\n                  onClick={() => {\n                    //If there are more than one step, If not do not allow to delete the last step\n                    if (newGuide.steps.length > 1) {\n                      const newSteps = newGuide.steps.filter(\n                        (_, index) => +selectedStep !== index\n                      );\n                      setNewGuide((old) => ({\n                        ...old,\n                        steps: newSteps,\n                      }));\n                      setSelectedStep((old) => 0);\n                    } else {\n                    }\n                  }}\n                >\n                  {newGuide.steps.length === 1 && 'THIS STEP CANNOT BE DELETED'}\n                  {newGuide.steps.length > 1 &&\n                    `Delete Step ${+selectedStep + 1}`}\n                </Button>\n                {/* Show error when user tried to delete the last step in Guide */}\n              </FormGroup>\n            </>\n          )}\n          {newGuide.steps.length === 0 && <h2>All Steps Deleted</h2>}\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            color=\"primary\"\n            onClick={() => {\n              //Only move to next step if stepTitle and stepContent for all steps are not empty\n              if (\n                Object.values(validity).every(\n                  (step) => step.stepTitle.isValid && step.stepContent.isValid\n                ) &&\n                titleValidity.isValid\n              ) {\n                dispatch(\n                  actionConfigureGuidesEditStepsCurrentAction({\n                    action: CG_EDIT_STEP_EDIT_CONFIRM,\n                    data: {\n                      newGuide: newGuide,\n                    },\n                  })\n                );\n              } else {\n              }\n            }}\n          >\n            CONFIRM\n          </Button>{' '}\n          <Button\n            onClick={() => {\n              dispatch(actionMenuOption(''));\n              dispatch(\n                actionConfigureGuidesEditStepsCurrentAction({ action: '' })\n              );\n              dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n            }}\n          >\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React from 'react';\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  Table,\n} from 'reactstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  actionConfigureGuidesEditStepsCurrentAction,\n  actionMenuOption,\n  actionMenuToggle,\n} from '../../../redux/slice/menuSlice';\nimport { MENU_TOGGLE_OPEN } from '../../../menuconstants/mainMenu';\nimport { CG_EDIT_STEP_EDIT_CONFIRM } from '../../../menuconstants/CG_EditStep';\nimport { apiUpdateGuide } from '../../../redux/slice/projectSlice';\n\nexport default function ESE_3_ConfirmDetails() {\n  const menu = useSelector((state) => state.menu);\n  const project = useSelector((state) => state.project);\n  const { currentEnvironment } = project;\n  const { configureGuidesEditStepsState } = menu;\n  const { oldGuide, newGuide } = configureGuidesEditStepsState;\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Modal\n        toggle={function noRefCheck() {}}\n        isOpen={\n          configureGuidesEditStepsState.currentAction ===\n          CG_EDIT_STEP_EDIT_CONFIRM\n        }\n      >\n        <ModalHeader\n          toggle={() => {\n            dispatch(actionMenuOption(''));\n            dispatch(\n              actionConfigureGuidesEditStepsCurrentAction({ action: '' })\n            );\n            dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n          }}\n        >\n          Confirm New Steps\n        </ModalHeader>\n        <ModalBody>\n          {newGuide.steps.length !== 0 && (\n            <>\n              {newGuide.steps.map((step, index) => {\n                const oldTitle = oldGuide.steps[index].title;\n                const newTitle = newGuide.steps[index].title;\n                const oldContent = oldGuide.steps[index].content;\n                const newContent = newGuide.steps[index].content;\n\n                return (\n                  <div key={index}>\n                    <h4>Step {index + 1}</h4>\n                    <Table bordered>\n                      <thead>\n                        <tr>\n                          <th>Old Title</th>\n                          <th>New Title</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr>\n                          <td>{oldTitle}</td>\n                          <td>{newTitle}</td>\n                        </tr>\n                      </tbody>\n                    </Table>\n                    <Table key={index}>\n                      <thead>\n                        <tr>\n                          <th>Old Content</th>\n                          <th>New Content</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr>\n                          <td>{oldContent}</td>\n                          <td>{newContent}</td>\n                        </tr>\n                      </tbody>\n                    </Table>\n                  </div>\n                );\n              })}\n            </>\n          )}\n          {newGuide.steps.length === 0 && <h2>All Steps Removed </h2>}\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            color=\"primary\"\n            onClick={() => {\n              dispatch(\n                apiUpdateGuide({\n                  guide: newGuide,\n                  currentEnvironment,\n                })\n              );\n              dispatch(\n                actionConfigureGuidesEditStepsCurrentAction({\n                  action: '',\n                })\n              );\n              dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n            }}\n          >\n            CONFIRM\n          </Button>{' '}\n          <Button\n            onClick={() => {\n              dispatch(actionMenuOption(''));\n              dispatch(\n                actionConfigureGuidesEditStepsCurrentAction({ action: '' })\n              );\n              dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n            }}\n          >\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","/* eslint-disable react/jsx-pascal-case */\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  CG_EDIT_STEP_EDIT_CONFIRM,\n  CG_EDIT_STEP_EDIT_DETAILS,\n  CG_EDIT_STEP_START,\n} from '../../menuconstants/CG_EditStep';\nimport ESE_1_Start from './editstepsexisting/ESE_1_Start';\nimport ESE_2_EditDetails from './editstepsexisting/ESE_2_EditDetails';\nimport ESE_3_ConfirmDetails from './editstepsexisting/ESE_3_ConfirmDetails';\n\nexport default function EditStepsExisting() {\n  const menu = useSelector((state) => state.menu);\n  const { configureGuidesEditStepsState } = menu;\n\n  return (\n    <>\n      {configureGuidesEditStepsState.currentAction === CG_EDIT_STEP_START && (\n        <ESE_1_Start />\n      )}\n      {configureGuidesEditStepsState.currentAction ===\n        CG_EDIT_STEP_EDIT_DETAILS && <ESE_2_EditDetails />}\n      {configureGuidesEditStepsState.currentAction ===\n        CG_EDIT_STEP_EDIT_CONFIRM && <ESE_3_ConfirmDetails />}\n    </>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  Input,\n} from 'reactstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  actionConfigureGuidesReorderStepsCurrentAction,\n  actionMenuOption,\n  actionMenuToggle,\n} from '../../../redux/slice/menuSlice';\nimport { MENU_TOGGLE_OPEN } from '../../../menuconstants/mainMenu';\nimport {\n  CG_REORDER_STEP_CHANGE_ORDER,\n  CG_REORDER_STEP_START,\n} from '../../../menuconstants/CG_ReorderStep';\nimport { FormGroup, Label } from 'reactstrap';\n\nexport default function ESE_1_Start() {\n  const menu = useSelector((state) => state.menu);\n  const project = useSelector((state) => state.project);\n  const { guides } = project;\n  const { configureGuidesReorderStepsState } = menu;\n  const dispatch = useDispatch();\n  const [selectedGuideId, setSelectedGuideId] = useState(\n    (guides.length !== 0 && guides[0].guideId) || 0\n  );\n  let selectedGuide = {};\n\n  const guideIdSelectHandler = (e) => {\n    setSelectedGuideId((old) => e.target.value);\n  };\n\n  useEffect(() => {\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    selectedGuide = guides.find((guide) => guide.guideId === selectedGuideId);\n  }, [selectedGuideId]);\n\n  return (\n    <>\n      <Modal\n        toggle={function noRefCheck() {}}\n        isOpen={\n          configureGuidesReorderStepsState.currentAction ===\n          CG_REORDER_STEP_START\n        }\n      >\n        <ModalHeader\n          toggle={() => {\n            dispatch(actionMenuOption(''));\n            dispatch(\n              actionConfigureGuidesReorderStepsCurrentAction({ action: '' })\n            );\n            dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n          }}\n        >\n          Edit Steps of Existing\n        </ModalHeader>\n        <ModalBody>\n          {guides.length !== 0 && (\n            <FormGroup>\n              <Label for=\"exampleSelect\">Select the Tour</Label>\n              <Input\n                id=\"exampleSelect\"\n                name=\"select\"\n                type=\"select\"\n                value={selectedGuideId}\n                onChange={guideIdSelectHandler}\n              >\n                {guides.map(({ title, guideId }) => {\n                  return (\n                    <option key={guideId} value={guideId}>\n                      {title}\n                    </option>\n                  );\n                })}\n              </Input>\n            </FormGroup>\n          )}\n          {guides.length === 0 && <h3>No Tours Present</h3>}\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            color=\"primary\"\n            onClick={() => {\n              dispatch(\n                actionConfigureGuidesReorderStepsCurrentAction({\n                  action: CG_REORDER_STEP_CHANGE_ORDER,\n                  data: {\n                    guideId: selectedGuideId,\n                    oldGuide: selectedGuide,\n                  },\n                })\n              );\n            }}\n          >\n            CONFIRM\n          </Button>{' '}\n          <Button\n            onClick={() => {\n              dispatch(actionMenuOption(''));\n              dispatch(\n                actionConfigureGuidesReorderStepsCurrentAction({ action: '' })\n              );\n              dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n            }}\n          >\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  Card,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n  CardText,\n} from 'reactstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  actionConfigureGuidesReorderStepsCurrentAction,\n  actionMenuOption,\n  actionMenuToggle,\n} from '../../../redux/slice/menuSlice';\nimport { MENU_TOGGLE_OPEN } from '../../../menuconstants/mainMenu';\nimport {\n  CG_REORDER_STEP_CHANGE_ORDER,\n  CG_REORDER_STEP_CONFIRM,\n} from '../../../menuconstants/CG_ReorderStep';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowDown, faArrowUp } from '@fortawesome/free-solid-svg-icons';\n\nexport default function RSE_2_StepOrder() {\n  const menu = useSelector((state) => state.menu);\n  const { configureGuidesReorderStepsState } = menu;\n  const { oldGuide } = configureGuidesReorderStepsState;\n  const { steps } = oldGuide;\n  const dispatch = useDispatch();\n  const [newGuide, setNewGuide] = useState(oldGuide);\n\n  useEffect(() => {\n    console.log(newGuide.steps);\n  }, [newGuide]);\n\n  return (\n    <>\n      <Modal\n        toggle={function noRefCheck() {}}\n        isOpen={\n          configureGuidesReorderStepsState.currentAction ===\n          CG_REORDER_STEP_CHANGE_ORDER\n        }\n      >\n        <ModalHeader\n          toggle={() => {\n            dispatch(actionMenuOption(''));\n            dispatch(\n              actionConfigureGuidesReorderStepsCurrentAction({ action: '' })\n            );\n            dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n          }}\n        >\n          Reorder Steps\n        </ModalHeader>\n        <ModalBody>\n          {newGuide.steps.length !== 0 &&\n            newGuide.steps.map((step, index) => {\n              return (\n                <Card className=\"mt-2\" key={index}>\n                  <div\n                    style={{\n                      display: 'flex',\n                      flexDirection: 'row',\n                      width: '100%',\n                      padding: '10px',\n                    }}\n                  >\n                    <div style={{ flex: '1' }}>\n                      <CardBody>\n                        <CardTitle tag=\"h5\">Step {index + 1}</CardTitle>\n                        <CardSubtitle className=\"mb-2 text-muted\" tag=\"h6\">\n                          {step.title}\n                        </CardSubtitle>\n                        <CardText>{step.content}</CardText>\n                      </CardBody>\n                    </div>\n                    <div\n                      style={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        justifyContent: 'center',\n                        alignContent: 'center',\n                      }}\n                    >\n                      {index !== 0 && (\n                        <Button\n                          className=\"m-2\"\n                          onClick={() => {\n                            let newSteps = [...newGuide.steps];\n                            let stepFrom = newSteps[index];\n                            let stepTo = newSteps[index - 1];\n                            newSteps[index] = stepTo;\n                            newSteps[index - 1] = stepFrom;\n\n                            setNewGuide((old) => {\n                              return {\n                                ...old,\n                                steps: newSteps,\n                              };\n                            });\n                          }}\n                        >\n                          <FontAwesomeIcon icon={faArrowUp} />\n                        </Button>\n                      )}\n                      {index !== steps.length - 1 && (\n                        <Button\n                          className=\"m-2\"\n                          onClick={() => {\n                            let newSteps = [...newGuide.steps];\n                            let stepFrom = newSteps[index];\n                            let stepTo = newSteps[index + 1];\n                            newSteps[index] = stepTo;\n                            newSteps[index + 1] = stepFrom;\n\n                            setNewGuide((old) => {\n                              console.log({\n                                ...old,\n                                steps: newSteps,\n                              });\n                              return {\n                                ...old,\n                                steps: newSteps,\n                              };\n                            });\n                          }}\n                        >\n                          <FontAwesomeIcon icon={faArrowDown} />\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </Card>\n              );\n            })}\n          {newGuide.steps.length === 0 && <h2>No Steps Present</h2>}\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            color=\"primary\"\n            onClick={() => {\n              console.log(newGuide);\n              dispatch(\n                actionConfigureGuidesReorderStepsCurrentAction({\n                  action: CG_REORDER_STEP_CONFIRM,\n                  data: {\n                    newGuide: newGuide,\n                  },\n                })\n              );\n            }}\n          >\n            CONFIRM\n          </Button>{' '}\n          <Button\n            onClick={() => {\n              dispatch(actionMenuOption(''));\n              dispatch(\n                actionConfigureGuidesReorderStepsCurrentAction({ action: '' })\n              );\n              dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n            }}\n          >\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React from 'react';\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  Card,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n  CardText,\n} from 'reactstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  actionConfigureGuidesReorderStepsCurrentAction,\n  actionMenuOption,\n  actionMenuToggle,\n} from '../../../redux/slice/menuSlice';\nimport { MENU_TOGGLE_OPEN } from '../../../menuconstants/mainMenu';\nimport { apiUpdateGuide } from '../../../redux/slice/projectSlice';\nimport { CG_REORDER_STEP_CONFIRM } from '../../../menuconstants/CG_ReorderStep';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowDown } from '@fortawesome/free-solid-svg-icons';\n\nexport default function RSE_3_ConfirmDetails() {\n  const menu = useSelector((state) => state.menu);\n  const project = useSelector((state) => state.project);\n  const { currentEnvironment } = project;\n  const { configureGuidesReorderStepsState } = menu;\n  const { newGuide } = configureGuidesReorderStepsState;\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Modal\n        toggle={function noRefCheck() {}}\n        isOpen={\n          configureGuidesReorderStepsState.currentAction ===\n          CG_REORDER_STEP_CONFIRM\n        }\n      >\n        <ModalHeader\n          toggle={() => {\n            dispatch(actionMenuOption(''));\n            dispatch(\n              actionConfigureGuidesReorderStepsCurrentAction({ action: '' })\n            );\n            dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n          }}\n        >\n          Confirm New Order\n        </ModalHeader>\n        <ModalBody>\n          {newGuide.steps.length !== 0 && (\n            <>\n              {newGuide.steps.map((step, index) => {\n                return (\n                  <React.Fragment key={index}>\n                    <Card className=\"m-2\">\n                      <CardBody>\n                        <CardTitle tag=\"h5\">Step {index + 1}</CardTitle>\n                        <CardSubtitle className=\"mb-2 text-muted\" tag=\"h6\">\n                          {step.title}\n                        </CardSubtitle>\n                        <CardText>{step.content}</CardText>\n                      </CardBody>\n                    </Card>\n                    {index !== newGuide.steps.length - 1 && (\n                      <div\n                        style={{\n                          width: '100%',\n                          display: 'flex',\n                          flexDirection: 'row',\n                          alignItems: 'center',\n                          justifyContent: 'center',\n                        }}\n                      >\n                        <FontAwesomeIcon icon={faArrowDown} />\n                      </div>\n                    )}\n                  </React.Fragment>\n                );\n              })}\n            </>\n          )}\n          {newGuide.steps.length === 0 && <h2>All Steps Removed </h2>}\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            color=\"primary\"\n            onClick={() => {\n              dispatch(\n                apiUpdateGuide({\n                  guide: newGuide,\n                  currentEnvironment,\n                })\n              );\n              dispatch(\n                actionConfigureGuidesReorderStepsCurrentAction({\n                  action: '',\n                })\n              );\n              dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n            }}\n          >\n            CONFIRM\n          </Button>{' '}\n          <Button\n            onClick={() => {\n              dispatch(actionMenuOption(''));\n              dispatch(\n                actionConfigureGuidesReorderStepsCurrentAction({ action: '' })\n              );\n              dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n            }}\n          >\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","/* eslint-disable react/jsx-pascal-case */\nimport React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport RSE_1_Start from './reordersteps/RSE_1_Start';\nimport {\n  CG_REORDER_STEP_CHANGE_ORDER,\n  CG_REORDER_STEP_CONFIRM,\n  CG_REORDER_STEP_START,\n} from '../../menuconstants/CG_ReorderStep';\nimport RSE_2_StepOrder from './reordersteps/RSE_2_StepOrder';\nimport RSE_3_ConfirmDetails from './reordersteps/RSE_3_ConfirmDetails';\n\nexport default function ReorderStepsExisting() {\n  const menu = useSelector((state) => state.menu);\n  const { configureGuidesReorderStepsState } = menu;\n\n  return (\n    <>\n      {configureGuidesReorderStepsState.currentAction ===\n        CG_REORDER_STEP_START && <RSE_1_Start />}\n      {configureGuidesReorderStepsState.currentAction ===\n        CG_REORDER_STEP_CHANGE_ORDER && <RSE_2_StepOrder />}\n      {configureGuidesReorderStepsState.currentAction ===\n        CG_REORDER_STEP_CONFIRM && <RSE_3_ConfirmDetails />}\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  Input,\n} from 'reactstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  actionConfigureGuidesDeleteGuidesCurrentAction,\n  actionMenuOption,\n  actionMenuToggle,\n} from '../../../redux/slice/menuSlice';\nimport { MENU_TOGGLE_OPEN } from '../../../menuconstants/mainMenu';\nimport { FormGroup, Label } from 'reactstrap';\nimport {\n  CG_DELETE_GUIDE_CONFIRM,\n  CG_DELETE_GUIDE_START,\n} from '../../../menuconstants/CG_DeleteGuide';\n\nexport default function DG_1_Start() {\n  const menu = useSelector((state) => state.menu);\n  const project = useSelector((state) => state.project);\n  const { guides } = project;\n  const { configureGuidesDeleteGuidesState } = menu;\n  const dispatch = useDispatch();\n  const [guideIdsToDelete, setGuideIdsToDelete] = useState([]);\n\n  const addGuideToDelete = (guideId) => {\n    if (guideIdsToDelete.find((id) => id === guideId)) {\n      let newGuideIds = [];\n      newGuideIds = guideIdsToDelete.filter((id) => {\n        return id !== guideId;\n      });\n      setGuideIdsToDelete((old) => {\n        return newGuideIds;\n      });\n    } else {\n      let newGuideIds = guideIdsToDelete;\n      newGuideIds.push(guideId);\n      setGuideIdsToDelete((old) => {\n        return newGuideIds;\n      });\n    }\n  };\n\n  return (\n    <>\n      <Modal\n        toggle={function noRefCheck() {}}\n        isOpen={\n          configureGuidesDeleteGuidesState.currentAction ===\n          CG_DELETE_GUIDE_START\n        }\n      >\n        <ModalHeader\n          toggle={() => {\n            dispatch(actionMenuOption(''));\n            dispatch(\n              actionConfigureGuidesDeleteGuidesCurrentAction({ action: '' })\n            );\n            dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n          }}\n        >\n          Delete Guides\n        </ModalHeader>\n        <ModalBody>\n          {guides.length !== 0 &&\n            guides.map(({ guideId, title }) => {\n              return (\n                <FormGroup check inline key={guideId}>\n                  <Input\n                    type=\"checkbox\"\n                    checked={guideIdsToDelete.find((id) => id === guideId)}\n                    onChange={() => {\n                      addGuideToDelete(guideId);\n                    }}\n                  />\n                  <Label check>{title}</Label>\n                </FormGroup>\n              );\n            })}\n          {guides.length === 0 && <h3>No Guides Present</h3>}\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            color=\"primary\"\n            onClick={() => {\n              dispatch(\n                actionConfigureGuidesDeleteGuidesCurrentAction({\n                  action: CG_DELETE_GUIDE_CONFIRM,\n                  data: {\n                    guideIdsToDelete: guideIdsToDelete,\n                  },\n                })\n              );\n            }}\n          >\n            CONFIRM\n          </Button>{' '}\n          <Button\n            onClick={() => {\n              dispatch(actionMenuOption(''));\n              dispatch(\n                actionConfigureGuidesDeleteGuidesCurrentAction({ action: '' })\n              );\n              dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n            }}\n          >\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React from 'react';\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n} from 'reactstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  actionConfigureGuidesDeleteGuidesCurrentAction,\n  actionMenuOption,\n  actionMenuToggle,\n} from '../../../redux/slice/menuSlice';\nimport { MENU_TOGGLE_OPEN } from '../../../menuconstants/mainMenu';\n\nimport { Card } from 'reactstrap';\nimport { CG_DELETE_GUIDE_CONFIRM } from '../../../menuconstants/CG_DeleteGuide';\nimport { apiDeleteGuides } from '../../../redux/slice/projectSlice';\n\nexport default function DG_2_Confirm() {\n  const user = useSelector((state) => state.user);\n  const { projectDetails } = user;\n  const { projectId } = projectDetails;\n  const menu = useSelector((state) => state.menu);\n  const project = useSelector((state) => state.project);\n  const { guides, currentEnvironment } = project;\n  const { configureGuidesDeleteGuidesState } = menu;\n  const { guideIdsToDelete } = configureGuidesDeleteGuidesState;\n  const generatedGuides = {};\n  const dispatch = useDispatch();\n  guides.forEach((guide) => {\n    if (guideIdsToDelete.includes(guide.guideId)) {\n      generatedGuides[guide.guideId] = guide;\n    }\n  });\n\n  return (\n    <>\n      <Modal\n        toggle={function noRefCheck() {}}\n        isOpen={\n          configureGuidesDeleteGuidesState.currentAction ===\n          CG_DELETE_GUIDE_CONFIRM\n        }\n      >\n        <ModalHeader\n          toggle={() => {\n            dispatch(actionMenuOption(''));\n            dispatch(\n              actionConfigureGuidesDeleteGuidesCurrentAction({ action: '' })\n            );\n            dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n          }}\n        >\n          Confirm Guides to Delete\n        </ModalHeader>\n        <ModalBody>\n          {Object.keys(generatedGuides).length !== 0 &&\n            Object.keys(generatedGuides).map((key) => {\n              return (\n                <Card key={key} className=\"mt-2\">\n                  <CardBody>\n                    <CardTitle tag=\"h5\">{generatedGuides[key].title}</CardTitle>\n                    <CardSubtitle className=\"mb-2 text-muted\" tag=\"h6\">\n                      Number of Steps - {generatedGuides[key].steps.length}\n                    </CardSubtitle>\n                  </CardBody>\n                </Card>\n              );\n            })}\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            color=\"primary\"\n            onClick={() => {\n              //Dipatch action to delete the selected Guide IDS\n              dispatch(\n                apiDeleteGuides({\n                  guideIdsToDelete,\n                  projectId,\n                  currentEnvironment,\n                })\n              );\n              dispatch(\n                actionConfigureGuidesDeleteGuidesCurrentAction({\n                  action: '',\n                })\n              );\n              dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n            }}\n          >\n            CONFIRM\n          </Button>{' '}\n          <Button\n            onClick={() => {\n              dispatch(actionMenuOption(''));\n              dispatch(\n                actionConfigureGuidesDeleteGuidesCurrentAction({ action: '' })\n              );\n              dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n            }}\n          >\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","/* eslint-disable react/jsx-pascal-case */\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport DG_1_Start from './deleteguides/DG_1_Start';\nimport {\n  CG_DELETE_GUIDE_CONFIRM,\n  CG_DELETE_GUIDE_START,\n} from '../../menuconstants/CG_DeleteGuide';\nimport DG_2_Confirm from './deleteguides/DG_2_Confirm';\n\nexport default function DeleteGuides() {\n  const menu = useSelector((state) => state.menu);\n  const { configureGuidesDeleteGuidesState } = menu;\n\n  return (\n    <>\n      {configureGuidesDeleteGuidesState.currentAction ===\n        CG_DELETE_GUIDE_START && <DG_1_Start />}\n      {configureGuidesDeleteGuidesState.currentAction ===\n        CG_DELETE_GUIDE_CONFIRM && <DG_2_Confirm />}\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { MENU_OPTION_CONFIGURE_GUIDES } from '../menuconstants/menuOptions';\nimport AddNewGuide from './configureguide/AddNewGuide';\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  Dropdown,\n  Label,\n  Input,\n  FormGroup,\n} from 'reactstrap';\nimport {\n  actionConfigureGuidesOption,\n  actionMenuOption,\n  actionMenuToggle,\n} from '../redux/slice/menuSlice';\nimport { MENU_TOGGLE_OPEN } from '../menuconstants/mainMenu';\nimport { CONFIGURE_GUIDE_MENU_OPTIONS } from '../menuconstants/configureGuide';\nimport AddStepsExistingGuide from './configureguide/AddStepsExistingGuide';\nimport EditStepsExisting from './configureguide/EditStepsExisting';\nimport ReorderStepsExisting from './configureguide/ReorderStepsExisting';\nimport DeleteGuides from './configureguide/DeleteGuides';\n\nexport default function ConfigureGuides() {\n  const menu = useSelector((state) => state.menu);\n  const dispatch = useDispatch();\n  const { menuOption } = menu;\n  const [selectedOption, setSelectedOption] = useState(\n    Object.keys(CONFIGURE_GUIDE_MENU_OPTIONS)[0]\n  );\n\n  const onChangeSelection = (e) => {\n    setSelectedOption(e.target.value);\n  };\n\n  return (\n    <>\n      <Modal\n        toggle={function noRefCheck() {}}\n        isOpen={menuOption === MENU_OPTION_CONFIGURE_GUIDES}\n      >\n        <ModalHeader\n          toggle={() => {\n            dispatch(actionMenuOption(''));\n            dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n          }}\n        >\n          Choose your option\n        </ModalHeader>\n        <ModalBody>\n          <Dropdown toggle={function noRefCheck() {}}>\n            <FormGroup>\n              <Label for=\"exampleSelect\">Select an option</Label>\n              <Input\n                type=\"select\"\n                name=\"select\"\n                id=\"exampleSelect\"\n                value={selectedOption}\n                onChange={onChangeSelection}\n              >\n                {Object.keys(CONFIGURE_GUIDE_MENU_OPTIONS).map((key) => {\n                  return (\n                    <option\n                      key={CONFIGURE_GUIDE_MENU_OPTIONS[key].action}\n                      value={CONFIGURE_GUIDE_MENU_OPTIONS[key].action}\n                    >\n                      {CONFIGURE_GUIDE_MENU_OPTIONS[key].title}\n                    </option>\n                  );\n                })}\n              </Input>\n            </FormGroup>\n          </Dropdown>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            color=\"primary\"\n            onClick={function noRefCheck() {\n              dispatch(actionMenuOption(''));\n              dispatch(actionConfigureGuidesOption({ action: selectedOption }));\n            }}\n          >\n            Confirm\n          </Button>{' '}\n          <Button\n            onClick={() => {\n              dispatch(actionMenuOption(''));\n              dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n            }}\n          >\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n      {/* Render all Components under Configure Guide */}\n      <AddNewGuide />\n      <AddStepsExistingGuide />\n      <EditStepsExisting />\n      <ReorderStepsExisting />\n      <DeleteGuides />\n    </>\n  );\n}\n","import { faPlayCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ListGroup, ListGroupItem } from 'reactstrap';\nimport {\n  actionSetJoyrideStart,\n  actionSetJoyrideSteps,\n} from '../redux/slice/projectSlice';\n\nexport default function GuideItem({ title, guideId }) {\n  const dispatch = useDispatch();\n\n  const startGuide = (e) => {\n    dispatch(actionSetJoyrideSteps(guideId));\n    dispatch(actionSetJoyrideStart(true));\n  };\n\n  return (\n    <div onClick={startGuide}>\n      <ListGroup>\n        <ListGroupItem>\n          <span className=\"guide-list-item\">\n            <FontAwesomeIcon icon={faPlayCircle} className=\"guide-blinking\" />\n            {title}\n          </span>\n        </ListGroupItem>\n      </ListGroup>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  Label,\n  Input,\n  FormGroup,\n  ListGroup,\n  ListGroupItem,\n  InputGroup,\n  Badge,\n} from 'reactstrap';\nimport {\n  actionMenuOption,\n  actionMenuToggle,\n  actionSetupRolesCurrentAction,\n} from '../../redux/slice/menuSlice';\nimport { MAIN_ADMIN, MENU_TOGGLE_OPEN } from '../../menuconstants/mainMenu';\nimport {\n  SR_SETUP_CONFIRM,\n  SR_SETUP_START,\n} from '../../menuconstants/setupRoles';\n\nexport default function SR_1_Start() {\n  const menu = useSelector((state) => state.menu);\n  const user = useSelector((state) => state.user);\n  const dispatch = useDispatch();\n  const { projectDetails } = user;\n  const { projectRoles, userId } = projectDetails;\n  const { setupRolesState } = menu;\n  const [roleSelected, setRoleSelected] = useState(MAIN_ADMIN);\n  const [newUser, setNewUser] = useState('');\n  const [newRoles, setNewRoles] = useState(projectRoles);\n\n  const roleSelectHandler = (e) => {\n    e.persist();\n    setRoleSelected((old) => e.target.value);\n  };\n\n  const newUserChangeHandler = (e) => {\n    e.persist();\n    setNewUser((old) => e.target.value);\n  };\n\n  const newUserSubmitHandler = (e) => {\n    e.persist();\n    const newUserUpdatedRoles = {\n      ...newRoles,\n      [roleSelected]: [...newRoles[roleSelected], newUser],\n    };\n\n    setNewRoles((old) => newUserUpdatedRoles);\n  };\n\n  const deleteUserHandler = (user) => {\n    const newUserUpdatedRoles = {\n      ...newRoles,\n      [roleSelected]: [\n        ...newRoles[roleSelected].filter(\n          (alreadyPresentUser) => alreadyPresentUser !== user\n        ),\n      ],\n    };\n\n    setNewRoles((old) => newUserUpdatedRoles);\n    console.log(newUserUpdatedRoles);\n  };\n\n  useEffect(() => {}, [roleSelected]);\n\n  return (\n    <>\n      <Modal\n        toggle={function noRefCheck() {}}\n        isOpen={setupRolesState.currentAction === SR_SETUP_START}\n      >\n        <ModalHeader\n          toggle={() => {\n            dispatch(actionMenuOption(''));\n            dispatch(\n              actionSetupRolesCurrentAction({\n                action: '',\n              })\n            );\n            dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n          }}\n        >\n          Setup Roles for Users\n        </ModalHeader>\n        <ModalBody>\n          {/* List all the Roles */}\n          <FormGroup>\n            <Label for=\"role\">Select Role</Label>\n            <Input\n              id=\"role\"\n              name=\"role\"\n              type=\"select\"\n              value={roleSelected}\n              onChange={roleSelectHandler}\n            >\n              {newRoles &&\n                Object.keys(newRoles).map((roleKey) => {\n                  return <option key={roleKey}>{roleKey}</option>;\n                })}\n            </Input>\n          </FormGroup>\n          {/* List all the Users for Roles */}\n          <h5>User IDS in selected role</h5>\n          <ListGroup>\n            {newRoles &&\n              newRoles[roleSelected].length !== 0 &&\n              newRoles[roleSelected].map((user) => {\n                return (\n                  <React.Fragment key={user}>\n                    <ListGroupItem\n                      style={{ display: 'flex', flexDirection: 'row' }}\n                    >\n                      <span style={{ flex: '1' }}>{user}</span>\n                      {/* Show Delete only if user is not the main initial admin */}\n                      {user + '' !== userId + '' && (\n                        <Badge\n                          color=\"danger\"\n                          className=\"incedo-delete-badge\"\n                          onClick={() => deleteUserHandler(user)}\n                        >\n                          DELETE\n                        </Badge>\n                      )}\n                      {user + '' === userId + '' && (\n                        <Badge color=\"success\" onClick={() => {}}>\n                          PROJECT ADMIN\n                        </Badge>\n                      )}\n                    </ListGroupItem>\n                  </React.Fragment>\n                );\n              })}\n            {newRoles && newRoles[roleSelected].length === 0 && (\n              <p>No Users Present!</p>\n            )}\n          </ListGroup>\n          <FormGroup className=\"mt-3\">\n            <Label for=\"newUser\">Add New User</Label>\n            <InputGroup>\n              <Input\n                id=\"newUser\"\n                value={newUser}\n                name=\"newUser\"\n                onChange={newUserChangeHandler}\n                placeholder=\"Enter New User ID\"\n                type=\"text\"\n              />\n              <Button color=\"primary\" onClick={newUserSubmitHandler}>\n                Add User\n              </Button>\n            </InputGroup>\n          </FormGroup>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            color=\"primary\"\n            onClick={() => {\n              dispatch(\n                actionSetupRolesCurrentAction({\n                  action: SR_SETUP_CONFIRM,\n                  data: {\n                    oldRoles: projectRoles,\n                    newRoles,\n                  },\n                })\n              );\n            }}\n          >\n            Confirm\n          </Button>{' '}\n          <Button\n            onClick={() => {\n              dispatch(actionMenuOption(''));\n              dispatch(\n                actionSetupRolesCurrentAction({\n                  action: '',\n                })\n              );\n              dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n            }}\n          >\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Modal, ModalHeader, ModalFooter, Button } from 'reactstrap';\nimport {\n  actionMenuOption,\n  actionMenuToggle,\n  actionSetupRolesCurrentAction,\n} from '../../redux/slice/menuSlice';\nimport { apiUpdateProjectRoles } from '../../redux/slice/userSlice';\nimport { MENU_TOGGLE_OPEN } from '../../menuconstants/mainMenu';\nimport { SR_SETUP_CONFIRM } from '../../menuconstants/setupRoles';\n\nexport default function SR_2_Confirm() {\n  const menu = useSelector((state) => state.menu);\n  const user = useSelector((state) => state.user);\n  const project = useSelector((state) => state.project);\n  const { currentEnvironment } = project;\n  const { projectDetails, userDetails } = user;\n  const { projectId } = projectDetails;\n  const { userId } = userDetails;\n  const dispatch = useDispatch();\n  const { setupRolesState } = menu;\n  const { newRoles } = setupRolesState;\n\n  return (\n    <>\n      <Modal\n        toggle={function noRefCheck() {}}\n        isOpen={setupRolesState.currentAction === SR_SETUP_CONFIRM}\n      >\n        <ModalHeader\n          toggle={() => {\n            dispatch(actionMenuOption(''));\n            dispatch(\n              actionSetupRolesCurrentAction({\n                action: '',\n              })\n            );\n            dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n          }}\n        >\n          Update Roles?\n        </ModalHeader>\n        <ModalFooter>\n          <Button\n            color=\"primary\"\n            onClick={() => {\n              dispatch(\n                apiUpdateProjectRoles({\n                  userId,\n                  projectId,\n                  projectRoles: newRoles,\n                  environment: currentEnvironment,\n                })\n              );\n              dispatch(actionMenuOption(''));\n              dispatch(\n                actionSetupRolesCurrentAction({\n                  action: '',\n                })\n              );\n            }}\n          >\n            YES\n          </Button>{' '}\n          <Button\n            onClick={() => {\n              dispatch(actionMenuOption(''));\n              dispatch(\n                actionSetupRolesCurrentAction({\n                  action: '',\n                })\n              );\n              dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n            }}\n          >\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","/* eslint-disable react/jsx-pascal-case */\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { SR_SETUP_CONFIRM, SR_SETUP_START } from '../menuconstants/setupRoles';\nimport SR_1_Start from './setupRoles/SR_1_Start';\nimport SR_2_Confirm from './setupRoles/SR_2_Confirm';\n\nexport default function SetupRoles() {\n  const menu = useSelector((state) => state.menu);\n  const { setupRolesState } = menu;\n\n  return (\n    <>\n      {setupRolesState.currentAction === SR_SETUP_START && <SR_1_Start />}\n      {setupRolesState.currentAction === SR_SETUP_CONFIRM && <SR_2_Confirm />}\n    </>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport {\n  Modal,\n  ModalHeader,\n  ModalFooter,\n  Button,\n  ModalBody,\n  FormGroup,\n  Label,\n  Input,\n} from 'reactstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  GV_SETUP_CONFIRM,\n  GV_SETUP_START,\n} from '../../menuconstants/guideVisibility';\nimport { MAIN_ADMIN, MENU_TOGGLE_OPEN } from '../../menuconstants/mainMenu';\nimport {\n  actionGuideVisibilityCurrentAction,\n  actionMenuOption,\n  actionMenuToggle,\n} from '../../redux/slice/menuSlice';\n\nexport default function GV_1_Start() {\n  const user = useSelector((state) => state.user);\n  const menu = useSelector((state) => state.menu);\n  const project = useSelector((state) => state.project);\n  const { guides } = project;\n  const { guideVisibilityState } = menu;\n  const { projectDetails } = user;\n  const { projectRoles } = projectDetails;\n  const [guideSelected, setGuideSelected] = useState(0);\n  const [rolesInGuides, setRolesInGuides] = useState({});\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (guides.length !== 0) {\n      setGuideSelected((old) => guides[0].guideId);\n      let mapRolesInGuides = {};\n      guides.forEach((guide) => {\n        mapRolesInGuides = {\n          ...mapRolesInGuides,\n          [+guide.guideId]: guide.roleVisibility,\n        };\n      });\n      setRolesInGuides((old) => mapRolesInGuides);\n    }\n  }, [guides]);\n\n  const guideSelectionHandler = (e) => {\n    e.persist();\n    setGuideSelected(+e.target.value);\n  };\n\n  const checkboxChangedHandler = (roleKey) => {\n    console.log(roleKey);\n    if (rolesInGuides[guideSelected].includes(roleKey)) {\n      let newRolesInGuides = [...rolesInGuides[guideSelected]];\n      newRolesInGuides = rolesInGuides[guideSelected].filter(\n        (role) => role !== roleKey\n      );\n      const newRolesInGuidesAltered = {\n        ...rolesInGuides,\n        [guideSelected]: newRolesInGuides,\n      };\n      setRolesInGuides((old) => newRolesInGuidesAltered);\n    } else {\n      let newRolesInGuides = [...rolesInGuides[guideSelected]];\n      newRolesInGuides.push(roleKey);\n      const newRolesInGuidesAltered = {\n        ...rolesInGuides,\n        [guideSelected]: newRolesInGuides,\n      };\n      setRolesInGuides((old) => newRolesInGuidesAltered);\n    }\n  };\n\n  return (\n    <Modal\n      toggle={function noRefCheck() {}}\n      isOpen={guideVisibilityState.currentAction === GV_SETUP_START}\n    >\n      <ModalHeader\n        toggle={() => {\n          dispatch(actionMenuOption(''));\n          dispatch(actionGuideVisibilityCurrentAction({ action: '' }));\n          dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n        }}\n      >\n        Setup Guide Visibility\n      </ModalHeader>\n      <ModalBody>\n        {guides && guides.length !== 0 && (\n          <React.Fragment>\n            <FormGroup>\n              <Label for=\"guideSelected\">Select Guide</Label>\n              <Input\n                id=\"guideSelected\"\n                name=\"guideSelected\"\n                type=\"select\"\n                value={guideSelected}\n                onChange={guideSelectionHandler}\n              >\n                {guides.map((guide) => {\n                  return (\n                    <option key={guide.guideId} value={guide.guideId}>\n                      {guide.title}\n                    </option>\n                  );\n                })}\n              </Input>\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"guideSelected\">Choose Roles</Label>\n              <br />\n              {projectRoles &&\n                rolesInGuides &&\n                Object.keys(projectRoles).length !== 0 &&\n                Object.keys(rolesInGuides).length !== 0 &&\n                Object.keys(projectRoles).map((roleKey) => {\n                  return (\n                    <FormGroup check inline key={roleKey}>\n                      {roleKey !== MAIN_ADMIN && (\n                        <React.Fragment>\n                          <Input\n                            type=\"checkbox\"\n                            onChange={() => checkboxChangedHandler(roleKey)}\n                            checked={rolesInGuides[guideSelected].includes(\n                              roleKey\n                            )}\n                          />\n                          <Label check>{roleKey}</Label>\n                        </React.Fragment>\n                      )}\n                    </FormGroup>\n                  );\n                })}\n            </FormGroup>\n          </React.Fragment>\n        )}\n        {guides && guides.length === 0 && <h3>No Tours present</h3>}\n      </ModalBody>\n      <ModalFooter>\n        <Button\n          color=\"primary\"\n          onClick={() => {\n            dispatch(\n              actionGuideVisibilityCurrentAction({\n                action: GV_SETUP_CONFIRM,\n                data: {\n                  rolesInGuides,\n                },\n              })\n            );\n          }}\n        >\n          UPDATE\n        </Button>{' '}\n        <Button\n          onClick={() => {\n            dispatch(actionMenuOption(''));\n            dispatch(actionGuideVisibilityCurrentAction({ action: '' }));\n            dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n          }}\n        >\n          Cancel\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Modal, ModalHeader, ModalFooter, Button } from 'reactstrap';\nimport {\n  actionMenuOption,\n  actionMenuToggle,\n  actionGuideVisibilityCurrentAction,\n} from '../../redux/slice/menuSlice';\nimport { MENU_TOGGLE_OPEN } from '../../menuconstants/mainMenu';\nimport { GV_SETUP_CONFIRM } from '../../menuconstants/guideVisibility';\nimport { apiUpdateGuideRoles } from '../../redux/slice/projectSlice';\n\nexport default function GV_2_Confirm() {\n  const user = useSelector((state) => state.user);\n  const menu = useSelector((state) => state.menu);\n  const project = useSelector((state) => state.project);\n  const { identifier, currentEnvironment } = project;\n  const { projectDetails } = user;\n  const { projectId } = projectDetails;\n  const { guideVisibilityState } = menu;\n  const { rolesInGuides } = guideVisibilityState;\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Modal\n        toggle={function noRefCheck() {}}\n        isOpen={guideVisibilityState.currentAction === GV_SETUP_CONFIRM}\n      >\n        <ModalHeader\n          toggle={() => {\n            dispatch(actionMenuOption(''));\n            dispatch(\n              actionGuideVisibilityCurrentAction({\n                action: '',\n              })\n            );\n            dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n          }}\n        >\n          Confirm Update?\n        </ModalHeader>\n        <ModalFooter>\n          <Button\n            color=\"primary\"\n            onClick={() => {\n              dispatch(\n                apiUpdateGuideRoles({\n                  projectId,\n                  identifier,\n                  rolesInGuides,\n                  environment: currentEnvironment,\n                })\n              );\n              dispatch(actionMenuOption(''));\n              dispatch(\n                actionGuideVisibilityCurrentAction({\n                  action: '',\n                })\n              );\n            }}\n          >\n            YES\n          </Button>{' '}\n          <Button\n            onClick={() => {\n              dispatch(actionMenuOption(''));\n              dispatch(\n                actionGuideVisibilityCurrentAction({\n                  action: '',\n                })\n              );\n              dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n            }}\n          >\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","/* eslint-disable react/jsx-pascal-case */\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  GV_SETUP_CONFIRM,\n  GV_SETUP_START,\n} from '../menuconstants/guideVisibility';\nimport GV_1_Start from './guidevisibility/GV_1_Start';\nimport GV_2_Confirm from './guidevisibility/GV_2_Confirm';\n\nexport default function GuideVisibility() {\n  const menu = useSelector((state) => state.menu);\n  const { guideVisibilityState } = menu;\n  return (\n    <>\n      {guideVisibilityState.currentAction === GV_SETUP_START && <GV_1_Start />}\n      {guideVisibilityState.currentAction === GV_SETUP_CONFIRM && (\n        <GV_2_Confirm />\n      )}\n    </>\n  );\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Badge, Dropdown } from 'reactstrap';\nimport { DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport {\n  ADMIN_USER,\n  MAIN_ADMIN,\n  MAIN_MENU_OPTIONS,\n  MENU_TOGGLE_CLOSE,\n  MENU_TOGGLE_OPEN,\n  NORMAL_USER,\n} from './menuconstants/mainMenu';\nimport ConfigureGuides from './menu/ConfigureGuides';\nimport { actionMenuOption, actionMenuToggle } from './redux/slice/menuSlice';\nimport GuideItem from './uicomponents/GuideItem';\nimport SetupRoles from './menu/SetupRoles';\nimport GuideVisibility from './menu/GuideVisibility';\nimport { checkIfGuideShouldBeVisibleToUser } from './helper/util';\n\nexport default function Menu() {\n  const user = useSelector((state) => state.user);\n  const menu = useSelector((state) => state.menu);\n  const project = useSelector((state) => state.project);\n  const dispatch = useDispatch();\n  const { menuToggle } = menu;\n  const { projectDetails, userDetails } = user;\n  const { projectRoles, userId } = projectDetails;\n  const { currentUserId, currentUserRoles } = userDetails;\n  const { guides } = project;\n\n  const isUserAdmin =\n    projectRoles && projectRoles[MAIN_ADMIN].includes(currentUserId);\n\n  return (\n    <React.Fragment>\n      <Dropdown\n        toggle={() => {\n          menuToggle === MENU_TOGGLE_OPEN\n            ? dispatch(actionMenuToggle(MENU_TOGGLE_CLOSE))\n            : dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n        }}\n        isOpen={menuToggle === MENU_TOGGLE_OPEN}\n      >\n        <DropdownToggle color=\"none\">\n          <img\n            src=\"https://img.icons8.com/dusk/64/000000/compass--v2.png\"\n            className=\"incedo-menu-icon\"\n            alt=\"Guide Icon\"\n            style={{ width: '50px', height: '50px' }}\n          />\n        </DropdownToggle>\n        <DropdownMenu style={{ minWidth: '225px' }}>\n          {isUserAdmin ? (\n            +currentUserId === +userId ? (\n              <Badge color=\"danger\">PROJECT ADMIN</Badge>\n            ) : (\n              <Badge color=\"warning\">ADMIN</Badge>\n            )\n          ) : (\n            <Badge color=\"primary\">USER</Badge>\n          )}\n          <DropdownItem header>Menu Options</DropdownItem>\n          {/* Render all Admin Menu Options */}\n          {isUserAdmin &&\n            MAIN_MENU_OPTIONS[ADMIN_USER].map(({ title, action }) => {\n              return (\n                <DropdownItem\n                  key={title}\n                  onClick={() => {\n                    dispatch(actionMenuOption(action));\n                    dispatch(actionMenuToggle(MENU_TOGGLE_CLOSE));\n                  }}\n                >\n                  {title}\n                </DropdownItem>\n              );\n            })}\n          {/* Render all Non Admin Menu Options */}\n          {!isUserAdmin &&\n            MAIN_MENU_OPTIONS[NORMAL_USER].map(({ title, action }) => {\n              return (\n                <DropdownItem\n                  key={title}\n                  onClick={() => {\n                    dispatch(actionMenuOption(action));\n                    dispatch(actionMenuToggle(MENU_TOGGLE_CLOSE));\n                  }}\n                >\n                  {title}\n                </DropdownItem>\n              );\n            })}\n          {guides.length !== 0 && (\n            <DropdownItem header>Guides Available</DropdownItem>\n          )}\n          {/* Render all Guides if User is Admin */}\n          {isUserAdmin &&\n            guides.map((guide) => {\n              return (\n                <DropdownItem key={guide.guideId}>\n                  <GuideItem title={guide.title} guideId={guide.guideId} />\n                </DropdownItem>\n              );\n            })}\n          {/* If User is not ADMIN, Render Guides only based on current Role */}\n          {!isUserAdmin &&\n            guides.map((guide) => {\n              if (\n                checkIfGuideShouldBeVisibleToUser(\n                  guide.roleVisibility,\n                  currentUserRoles\n                )\n              ) {\n                return (\n                  <DropdownItem key={guide.guideId}>\n                    <GuideItem title={guide.title} guideId={guide.guideId} />\n                  </DropdownItem>\n                );\n              } else {\n                return null;\n              }\n            })}\n        </DropdownMenu>\n      </Dropdown>\n      {/* Render the Selected Menu Option */}\n      <ConfigureGuides />\n      <SetupRoles />\n      <GuideVisibility />\n    </React.Fragment>\n  );\n}\n","export const checkIfGuideShouldBeVisibleToUser = (\n  guideRoles,\n  currentUserRoles\n) => {\n  let shouldGuideBeVisible = false;\n  currentUserRoles.forEach((role) => {\n    if (guideRoles.includes(role)) {\n      shouldGuideBeVisible = true;\n    }\n  });\n\n  return shouldGuideBeVisible;\n};\n","import React from 'react';\nimport { Button, Modal, ModalFooter, ModalHeader } from 'reactstrap';\nimport { useDispatch } from 'react-redux';\nimport { actionSetUserIdle } from '../redux/slice/projectSlice';\nimport { actionMenuToggle } from '../redux/slice/menuSlice';\nimport { MENU_TOGGLE_CLOSE, MENU_TOGGLE_OPEN } from '../menuconstants/mainMenu';\n\nexport default function UserIdleModal() {\n  const dispatch = useDispatch();\n\n  return (\n    <Modal toggle={function noRefCheck() {}} isOpen={true}>\n      <ModalHeader\n        toggle={() => {\n          dispatch(actionSetUserIdle(false));\n          dispatch(actionMenuToggle(MENU_TOGGLE_CLOSE));\n        }}\n      >\n        Need some help ?\n      </ModalHeader>\n      <ModalFooter>\n        <Button\n          color=\"primary\"\n          onClick={() => {\n            dispatch(actionSetUserIdle(false));\n            dispatch(actionMenuToggle(MENU_TOGGLE_OPEN));\n          }}\n        >\n          YES 😅\n        </Button>{' '}\n        <Button\n          onClick={() => {\n            dispatch(actionSetUserIdle(false));\n            dispatch(actionMenuToggle(MENU_TOGGLE_CLOSE));\n          }}\n        >\n          NO{' '}\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Menu from './Menu';\nimport {\n  actionSetEnvironment,\n  actionSetIdentifier,\n  actionSetJoyrideStart,\n  actionSetJoyrideSteps,\n  actionSetUserIdle,\n  apiGetAllGuides,\n  apiMarkGuideComplete,\n} from './redux/slice/projectSlice';\nimport ReactJoyride, { EVENTS, STATUS } from 'react-joyride';\nimport { apiFetchUserDetails } from './redux/slice/userSlice';\nimport { useIdleTimer } from 'react-idle-timer';\nimport UserIdleModal from './uicomponents/UserIdleModal';\n\nexport default function Core({\n  userId,\n  environment = 'LOCAL',\n  projectName,\n  fullName,\n  emailId,\n  projectRoles,\n  currentUserId,\n  currentUserRoles,\n}) {\n  const user = useSelector((state) => state.user);\n  const project = useSelector((state) => state.project);\n  const { userDetails, projectDetails } = user;\n  const { identifier, joyrideStart, joyrideSteps, userIdle } = project;\n  const { projectId } = projectDetails;\n  const { currentEnvironment, selectedGuideId } = project;\n  const [currentStepIndex, setCurrentStepIndex] = useState(0);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(actionSetEnvironment(environment));\n    dispatch(\n      apiFetchUserDetails({\n        userId,\n        emailId,\n        fullName,\n        projectName,\n        currentEnvironment,\n        projectRoles,\n        currentUserId,\n        currentUserRoles,\n      })\n    );\n    if (typeof window !== 'undefined') {\n      // dispatch(actionSetIdentifier(window.location.pathname));\n      dispatch(actionSetIdentifier('/'));\n    }\n  }, [\n    userId,\n    emailId,\n    fullName,\n    projectName,\n    currentEnvironment,\n    dispatch,\n    environment,\n    currentUserId,\n    projectRoles,\n    currentUserRoles,\n  ]);\n\n  useEffect(() => {\n    if (projectId !== '' && identifier !== '') {\n      dispatch(\n        apiGetAllGuides({\n          projectId,\n          identifier,\n          environment: currentEnvironment,\n        })\n      );\n\n      //Check for any guides not completed from different page\n      const oldGuideStarted = localStorage.getItem('IG_STEPS');\n      if (oldGuideStarted !== 'null' && oldGuideStarted !== null) {\n        const oldGuideStepIndex = JSON.parse(oldGuideStarted).currentStepIndex;\n        const oldGuideId = JSON.parse(oldGuideStarted).selectedGuideId;\n\n        //Wait until document loads before triggering steps left from last guide start in different page\n        setTimeout(() => {\n          dispatch(actionSetJoyrideStart(true));\n          dispatch(actionSetJoyrideSteps(oldGuideId));\n          setCurrentStepIndex((old) => +oldGuideStepIndex + 0.5); //BUG - Temporary fix for double render in useEffect\n        }, 1000);\n      }\n    }\n  }, [projectId, identifier, currentEnvironment, dispatch]);\n\n  //Joyride Handlers\n  const handleJoyrideCallback = (data) => {\n    if (joyrideStart) {\n      localStorage.setItem(\n        'IG_STEPS',\n        JSON.stringify({\n          selectedGuideId,\n          currentStepIndex: currentStepIndex,\n        })\n      );\n\n      const { status, type } = data;\n      if (type === EVENTS.TOOLTIP_CLOSE) {\n        dispatch(actionSetJoyrideStart(false));\n      } else if ([EVENTS.STEP_AFTER, EVENTS.TARGET_NOT_FOUND].includes(type)) {\n        if (type === EVENTS.TARGET_NOT_FOUND) {\n          //If Target is not found, It means the element is not present on the screen\n          setCurrentStepIndex((old) => currentStepIndex - 1);\n        } else {\n          //Target is present on the screen\n          setCurrentStepIndex((old) => currentStepIndex + 1);\n        }\n      }\n      if (status === STATUS.FINISHED) {\n        dispatch(\n          apiMarkGuideComplete({\n            projectId,\n            selectedGuideId,\n            userId,\n            currentEnvironment,\n          })\n        );\n        setCurrentStepIndex((old) => 0);\n        dispatch(actionSetJoyrideStart(false));\n        localStorage.setItem('IG_STEPS', null);\n      }\n      if (status === STATUS.SKIPPED) {\n        //localStorage.setItem('IG_STEPS', null);\n        dispatch(actionSetJoyrideStart(false));\n      }\n    } else {\n    }\n  };\n  const getHelpers = () => {};\n\n  //Handle Idle Timer Logic\n  const handleOnIdle = (event) => {\n    dispatch(actionSetUserIdle(true));\n  };\n\n  //When user is active\n  const handleOnActive = (event) => {};\n\n  //When user does something\n  const handleOnAction = (event) => {};\n\n  useIdleTimer({\n    timeout: 1000 * 10 * 60, //10 Mins of Inactivity\n    onIdle: handleOnIdle,\n    onActive: handleOnActive,\n    onAction: handleOnAction,\n    debounce: 500,\n  });\n\n  return (\n    <>\n      {/* Display Idle Modal when user is inactive */}\n      {userIdle && <UserIdleModal />}\n      {userDetails && projectDetails && <Menu />}\n      <ReactJoyride\n        callback={handleJoyrideCallback}\n        continuous={true}\n        getHelpers={getHelpers}\n        run={joyrideStart}\n        scrollToFirstStep={true}\n        showProgress={true}\n        showSkipButton={true}\n        spotlightClicks={true}\n        steps={joyrideSteps}\n        stepIndex={currentStepIndex}\n        styles={{\n          options: {\n            zIndex: 10000,\n            primaryColor: 'orange',\n          },\n        }}\n      />\n    </>\n  );\n}\n","import React from 'react';\nimport { store } from './redux/store';\nimport { Provider } from 'react-redux';\nimport Core from './Core';\nimport './incedoguide.css';\nexport default function IncedoGuide({\n  userId,\n  environment = 'LOCAL',\n  projectName,\n  fullName,\n  emailId,\n  projectRoles,\n  currentUserId,\n  currentUserRoles,\n}) {\n  return (\n    <Provider store={store}>\n      <Core\n        userId={userId}\n        environment={environment}\n        projectName={projectName}\n        fullName={fullName}\n        emailId={emailId}\n        projectRoles={projectRoles}\n        currentUserId={currentUserId}\n        currentUserRoles={currentUserRoles}\n      />\n    </Provider>\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ButtonGroup } from 'reactstrap';\nimport '../../index.css';\n\nexport default function CommonTabs({ index }) {\n  return (\n    <div id=\"common-tabs\">\n      <ButtonGroup>\n        <Link\n          to=\"/leave-dashboard\"\n          className={\n            index === 0 ? 'incedo-tab incedo-tab-active' : 'incedo-tab'\n          }\n        >\n          Leave Dashboard\n        </Link>\n        <Link\n          to=\"/apply-leave\"\n          className={\n            index === 1 ? 'incedo-tab incedo-tab-active' : 'incedo-tab'\n          }\n        >\n          Apply Leave\n        </Link>\n        <Link\n          to=\"/request-compoff\"\n          className={\n            index === 2 ? 'incedo-tab incedo-tab-active' : 'incedo-tab'\n          }\n        >\n          Request Comp-Off\n        </Link>\n        <Link\n          to=\"/leave-history\"\n          className={\n            index === 3 ? 'incedo-tab incedo-tab-active' : 'incedo-tab'\n          }\n        >\n          Leave History\n        </Link>\n      </ButtonGroup>\n    </div>\n  );\n}\n","import React from 'react';\nimport '../../index.css';\n\nexport default function Footer({ index }) {\n  return (\n    <div>\n      {/* <Navbar color=\"light\" expand=\"md\" light>\n        <NavbarToggler onClick={function noRefCheck() {}} />\n        <Collapse navbar>\n          <Nav className=\"me-auto\" navbar>\n            <NavLink href=\"/leave-dashboard\">Leave Dashboard</NavLink>\n            <NavLink href=\"/apply-leave\">Apply Leave</NavLink>\n            <NavItem>\n              <NavLink href=\"/request-compoff\">Request Comp-Off</NavLink>\n            </NavItem>\n            <NavLink href=\"/leave-history\">Leave History</NavLink>\n          </Nav>\n        </Collapse>\n      </Navbar> */}\n    </div>\n  );\n}\n","import React from 'react';\nimport CommonTabs from './ui-general/CommonTabs';\nimport Footer from './ui-general/Footer';\nimport { Row, Col, Card, Button, CardBody, CardTitle, Table } from 'reactstrap';\n\nexport default function LeaveDashboard() {\n  return (\n    <div id=\"leave-dashboard\">\n      <CommonTabs index={0} />\n      <Row style={{ textAlign: 'right' }}>\n        <Col className=\"p-2 m-2\" style={{ display: 'inline-block' }}>\n          <Button className=\"incedo-quicklink\">Quick Links</Button>\n        </Col>\n      </Row>\n      <Row className=\"p-4\" id=\"leave-balance\">\n        <Col>\n          <Card>\n            <CardBody>\n              <CardTitle tag=\"h5\">Current Leave Balance</CardTitle>\n              <Table bordered>\n                <thead>\n                  <tr>\n                    <th className=\"incedo-table-header\">Leave Type</th>\n                    <th className=\"incedo-table-header\">\n                      Available Leave Balance\n                    </th>\n                    <th className=\"incedo-table-header\">Expiry Date</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>Privilege Leave</td>\n                    <td>18</td>\n                    <td>Dec 29, 2021</td>\n                  </tr>\n                  <tr>\n                    <td>Casual Leave</td>\n                    <td>8</td>\n                    <td>Dec 29, 2021</td>\n                  </tr>\n                  <tr>\n                    <td>Compensatory Off</td>\n                    <td>0</td>\n                    <td>Dec 29, 2021</td>\n                  </tr>\n                </tbody>\n              </Table>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n      <Row className=\"p-4\" id=\"pending-approval\">\n        <Col>\n          <Card>\n            <CardBody>\n              <CardTitle tag=\"h5\">Pending for Approval</CardTitle>\n              <Table bordered>\n                <thead>\n                  <tr>\n                    <th className=\"incedo-table-header\">Leave Type</th>\n                    <th className=\"incedo-table-header\">From Data</th>\n                    <th className=\"incedo-table-header\">To Date</th>\n                    <th className=\"incedo-table-header\">Days</th>\n                    <th className=\"incedo-table-header\">Approver</th>\n                    <th className=\"incedo-table-header\">Request Date</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>Privilege Leave</td>\n                    <td>24th November, 2021</td>\n                    <td>25th November, 2021</td>\n                    <td>2 Days</td>\n                    <td>Swaminathan</td>\n                    <td>23rd November, 2021</td>\n                  </tr>\n                </tbody>\n              </Table>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n      <Footer />\n    </div>\n  );\n}\n","import React from 'react';\nimport CommonTabs from './ui-general/CommonTabs';\nimport Footer from './ui-general/Footer';\nimport {\n  Row,\n  Col,\n  FormGroup,\n  Label,\n  Input,\n  Card,\n  Button,\n  CardBody,\n} from 'reactstrap';\n\nexport default function ApplyLeave() {\n  return (\n    <div id=\"apply-leave\">\n      <CommonTabs index={1} />\n      <Row style={{ textAlign: 'right' }}>\n        <Col className=\"p-2 m-2\" style={{ display: 'inline-block' }}>\n          <Button className=\"incedo-quicklink\">Quick Links</Button>\n        </Col>\n      </Row>\n      <Row className=\"p-4\" id=\"leave-information\">\n        <Col>\n          <Card>\n            <CardBody>\n              <FormGroup>\n                <Label for=\"exampleSelect\">Select Leave Type</Label>\n                <Input id=\"exampleSelect\" name=\"select\" type=\"select\">\n                  <option>Privilege Leave-CF</option>\n                  <option>Privilege Leave</option>\n                  <option>Casual Leave</option>\n                  <option>Compensatory Off</option>\n                  <option>Marriage Leave</option>\n                  <option>Maternity/Adoption Leave</option>\n                  <option>Maternity/Leave Extension</option>\n                  <option>Miscarriage Leave</option>\n                  <option>Paternity/Adoption Leave</option>\n                  <option>Sabbatical Leave</option>\n                  <option>Bereavement Leave</option>\n                  <option>Leave Without Pay</option>\n                  <option>Weekly Off</option>\n                </Input>\n              </FormGroup>\n            </CardBody>\n          </Card>\n        </Col>\n        <Col>\n          <Card>\n            <CardBody>\n              <FormGroup>\n                <Label for=\"exampleEmail\">Available Leaves</Label>\n                <Input\n                  id=\"exampleEmail\"\n                  name=\"number\"\n                  disabled\n                  placeholder=\"18\"\n                  type=\"number\"\n                />\n              </FormGroup>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n      <Row className=\"p-4\" id=\"date-selection\">\n        <Col>\n          <Card>\n            <CardBody>\n              <FormGroup>\n                <Label for=\"exampleDatetime\">From Date</Label>\n                <Input\n                  id=\"exampleDatetime\"\n                  name=\"datetime\"\n                  placeholder=\"From Date\"\n                  type=\"date\"\n                />\n              </FormGroup>\n            </CardBody>\n          </Card>\n        </Col>\n        <Col>\n          <Card>\n            <CardBody>\n              <FormGroup>\n                <Label for=\"exampleDatetime\">To Date</Label>\n                <Input\n                  id=\"exampleDatetime\"\n                  name=\"datetime\"\n                  placeholder=\"To Data\"\n                  type=\"date\"\n                />\n              </FormGroup>\n            </CardBody>\n          </Card>\n        </Col>\n        <Col>\n          <Card>\n            <CardBody>\n              <FormGroup>\n                <Label for=\"exampleEmail\">No of Days</Label>\n                <Input\n                  id=\"exampleEmail\"\n                  name=\"number\"\n                  placeholder=\"1\"\n                  type=\"number\"\n                />\n              </FormGroup>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n      <Row className=\"p-4\" id=\"comments-input\">\n        <Col>\n          <Card>\n            <CardBody>\n              <FormGroup>\n                <Label for=\"exampleText\">Comments, if any</Label>\n                <Input id=\"exampleText\" name=\"text\" type=\"textarea\" />\n              </FormGroup>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n      <Footer />\n    </div>\n  );\n}\n","import React from 'react';\nimport CommonTabs from './ui-general/CommonTabs';\nimport Footer from './ui-general/Footer';\nimport {\n  Row,\n  Col,\n  FormGroup,\n  Label,\n  Input,\n  Card,\n  Button,\n  CardBody,\n} from 'reactstrap';\n\nexport default function RaiseCompOff() {\n  return (\n    <div id=\"raise-compoff\">\n      <CommonTabs index={2} />\n      <Row style={{ textAlign: 'right' }}>\n        <Col className=\"p-2 m-2\" style={{ display: 'inline-block' }}>\n          <Button className=\"incedo-quicklink\">Quick Links</Button>\n        </Col>\n      </Row>\n\n      <Row className=\"p-4\" id=\"from-date\">\n        <Col>\n          <Card>\n            <CardBody>\n              <FormGroup>\n                <Label for=\"exampleDatetime\">From Date</Label>\n                <Input\n                  id=\"exampleDatetime\"\n                  name=\"datetime\"\n                  placeholder=\"From Date\"\n                  type=\"date\"\n                />\n              </FormGroup>\n            </CardBody>\n          </Card>\n        </Col>\n        <Col>\n          <Card>\n            <CardBody>\n              <FormGroup>\n                <Label for=\"exampleDatetime\">To Date</Label>\n                <Input\n                  id=\"exampleDatetime\"\n                  name=\"datetime\"\n                  placeholder=\"To Data\"\n                  type=\"date\"\n                />\n              </FormGroup>\n            </CardBody>\n          </Card>\n        </Col>\n        <Col>\n          <Card>\n            <CardBody>\n              <FormGroup>\n                <Label for=\"exampleEmail\">No of Days</Label>\n                <Input\n                  id=\"exampleEmail\"\n                  name=\"number\"\n                  placeholder=\"1\"\n                  type=\"number\"\n                />\n              </FormGroup>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n      <Row className=\"p-4\" id=\"comments\">\n        <Col>\n          <Card>\n            <CardBody>\n              <FormGroup>\n                <Label for=\"exampleText\">Comments, if any</Label>\n                <Input id=\"exampleText\" name=\"text\" type=\"textarea\" />\n              </FormGroup>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n      <Footer />\n    </div>\n  );\n}\n","import React from 'react';\nimport { Row } from 'reactstrap';\nimport CommonTabs from './ui-general/CommonTabs';\n\nexport default function LeaveHistory() {\n  return (\n    <div id=\"leave-history\">\n      <CommonTabs index={3} />\n      <Row className=\"p-4\" id=\"leave-history\">\n        Leave History\n      </Row>\n    </div>\n  );\n}\n","import React from 'react';\nimport {\n  Container,\n  Row,\n  Col,\n  Card,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n  Button,\n} from 'reactstrap';\n\nexport default function HumanResources() {\n  return (\n    <div className=\"human-resources\">\n      <Container fluid>\n        <Row id=\"download-options\">\n          <Col>\n            <Card>\n              <CardBody>\n                <CardTitle tag=\"h5\" id=\"faq\">\n                  FAQs\n                </CardTitle>\n                <CardSubtitle className=\"mb-2 text-muted\" tag=\"h6\">\n                  Frequently Asked Questions\n                </CardSubtitle>\n                <Button className=\"incedoguide-download\">Download</Button>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col>\n            <Card>\n              <CardBody>\n                <CardTitle tag=\"h5\">\n                  Group and Parental Medical Policy\n                </CardTitle>\n                <CardSubtitle className=\"mb-2 text-muted\" tag=\"h6\">\n                  Know More about the Group and Medical Policy\n                </CardSubtitle>\n                <Button className=\"incedoguide-download\">Download</Button>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n        <Row className=\"mt-3\">\n          <Col>\n            <Card>\n              <CardBody>\n                <CardTitle tag=\"h5\">\n                  Group Personal Accident Insurance\n                </CardTitle>\n                <CardSubtitle className=\"mb-2 text-muted\" tag=\"h6\">\n                  Know more about the Group Personal Accident Insurance\n                </CardSubtitle>\n                <Button className=\"incedoguide-download\">Download</Button>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col>\n            <Card>\n              <CardBody>\n                <CardTitle tag=\"h5\">Group Term Life Insurance</CardTitle>\n                <CardSubtitle className=\"mb-2 text-muted\" tag=\"h6\">\n                  Know More about the Group Term Life Insurance\n                </CardSubtitle>\n                <Button className=\"incedoguide-download\">Download</Button>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n        <Row className=\"mt-3\">\n          <Col>\n            <Card>\n              <CardBody>\n                <CardTitle tag=\"h5\">Claim Intimation Process</CardTitle>\n                <CardSubtitle className=\"mb-2 text-muted\" tag=\"h6\">\n                  Prior intimation to insurance company in case of\n                  hospitalisation in non-network hospital\n                </CardSubtitle>\n                <Button className=\"incedoguide-download\">Download</Button>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col>\n            <Card>\n              <CardBody>\n                <CardTitle tag=\"h5\">Sample Claim Reimbursement Form</CardTitle>\n                <CardSubtitle className=\"mb-2 text-muted\" tag=\"h6\">\n                  For reimbursement of claims, Please utilize this form to share\n                  the requisite details\n                </CardSubtitle>\n                <Button className=\"incedoguide-download\">Download</Button>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n        <Row className=\"mt-3\">\n          <Col>\n            <Card>\n              <CardBody>\n                <CardTitle tag=\"h5\">\n                  Claim Reimbursement Form Editable Version\n                </CardTitle>\n                <CardSubtitle className=\"mb-2 text-muted\" tag=\"h6\">\n                  For reimbursement of claims, Please utilize this form to share\n                  the requisite details\n                </CardSubtitle>\n                <Button className=\"incedoguide-download\">Download</Button>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col>\n            <Card>\n              <CardBody>\n                <CardTitle tag=\"h5\">\n                  Claim Reimbursement Form PDF Version\n                </CardTitle>\n                <CardSubtitle className=\"mb-2 text-muted\" tag=\"h6\">\n                  For reimbursement of claims, Please utilize this form to share\n                  the requisite details\n                </CardSubtitle>\n                <Button className=\"incedoguide-download\">Download</Button>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n        <Row className=\"mt-3\">\n          <Col>\n            <Card>\n              <CardBody>\n                <CardTitle tag=\"h5\">Network List of Hospital</CardTitle>\n                <CardSubtitle className=\"mb-2 text-muted\" tag=\"h6\">\n                  Please refer to the document to know the hospitals which fall\n                  within the network of the insurance provide\n                </CardSubtitle>\n                <Button className=\"incedoguide-download\">Download</Button>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col>\n            <Card>\n              <CardBody>\n                <CardTitle tag=\"h5\">Excluded list of hospitals</CardTitle>\n                <CardSubtitle className=\"mb-2 text-muted\" tag=\"h6\">\n                  Please refer to the document to know the excluded hospitals\n                  which do not fall within the network of the insurance provider\n                </CardSubtitle>\n                <Button className=\"incedoguide-download\">Download</Button>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n","import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport CONFIG from './config';\nimport {\n  Navbar,\n  NavbarBrand,\n  NavbarToggler,\n  Collapse,\n  Nav,\n  NavItem,\n  NavLink,\n  Container,\n  Row,\n} from 'reactstrap';\nimport incedoImage from './assets/incedo.webp';\n//import IncedoGuide from 'incedoguide';\nimport IncedoGuide from './library/IncedoGuide';\nimport LeaveDashboard from './components/LeaveDashboard';\nimport ApplyLeave from './components/ApplyLeave';\nimport RaiseCompOff from './components/RaiseCompOff';\nimport LeaveHistory from './components/LeaveHistory';\nimport './index.css';\nimport HumanResources from './components/pages/HumanResources';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Row>\n          <div>\n            <Navbar color=\"light\" expand=\"md\" light>\n              <NavbarBrand href=\"/\">\n                <img src={incedoImage} alt=\"Incedo\" className=\"incedo-navbar\" />\n              </NavbarBrand>\n              <NavbarToggler onClick={function noRefCheck() {}} />\n              <Collapse navbar>\n                <Nav className=\"me-auto\" navbar>\n                  <NavLink href=\"/\">Leave Portal</NavLink>\n                  <NavLink href=\"/\">Policy Center</NavLink>\n                  <NavItem>\n                    <NavLink href=\"/human-resources\">Human Resources</NavLink>\n                  </NavItem>\n                  <NavLink href=\"/\">Process Excellence</NavLink>\n                </Nav>\n                <IncedoGuide\n                  userId={CONFIG.userId}\n                  environment={CONFIG.environment}\n                  projectName={CONFIG.projectName}\n                  fullName={CONFIG.fullName}\n                  emailId={CONFIG.emailId}\n                  projectRoles={CONFIG.projectRoles}\n                  currentUserId={CONFIG.currentUserId}\n                  currentUserRoles={CONFIG.currentUserRoles}\n                />\n              </Collapse>\n            </Navbar>\n            <Container fluid className=\"p-2\">\n              <Switch>\n                <Route path=\"/\" exact component={LeaveDashboard} />\n                <Route\n                  path=\"/leave-dashboard\"\n                  exact\n                  component={LeaveDashboard}\n                />\n                <Route path=\"/apply-leave\" exact component={ApplyLeave} />\n                <Route path=\"/request-compoff\" exact component={RaiseCompOff} />\n                <Route path=\"/leave-history\" exact component={LeaveHistory} />\n                <Route path=\"/leave-history\" exact component={LeaveHistory} />\n                <Route\n                  path=\"/human-resources\"\n                  exact\n                  component={HumanResources}\n                />\n              </Switch>\n            </Container>\n          </div>\n        </Row>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}